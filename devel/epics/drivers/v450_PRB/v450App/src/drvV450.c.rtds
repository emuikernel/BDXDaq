/* drvV450.c */

/* sergey from 3122 */

/* Copyright (c) 2005 Duke University
 *
 * Steve Hartman <hartman@fel.duke.edu>, Duke FEL Laboratory
 * Version 1.0
 * Please check <www.fel.duke.edu/epics> for the most recent version.
 *
 * This code provides EPICS support for the VMIVME-3122 High-Performance
 * 16-bit ADC board.
 * 
 */

/*
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 USA
*/

#include <vxWorks.h>
#include <sysLib.h>
#include <vxLib.h>
#include <types.h>
#include <stdioLib.h>
#include <stdlib.h>
#include <vme.h>
#include <epicsVersion.h>
#if (EPICS_VERSION==3) && (EPICS_REVISION>=14)
	#include <epicsExport.h>
#endif

#include <dbDefs.h>
#include <drvSup.h>

#include <drvV450.h>

#define GAIN	GAIN_1X
#define SCAN	AUTO_SCAN 

#define NUM_CHANNELS 16 /* number of channels in board */

/* these can be changed in st.cmd before iocInit if necessary */
unsigned int numV450cards = 9;        /* number of cards in crate */
unsigned int v450_base = 0xC000;    /* base address of card 0 */

long v450_init(void);
long v450_report(int);

struct {
  long	number; /* the number of following elements */
	DRVSUPFUN	report;
	DRVSUPFUN	init;
} drvV450={
	2,
	v450_report,
	v450_init};

#if (EPICS_VERSION==3) && (EPICS_REVISION>=14)
	epicsExportAddress(drvet,drvV450);
#endif

static int v450_addr;
static unsigned short **pai_v450;

/* initialize the v450 analog input card */
long
v450_init(void)
{
  unsigned short **boards_present;
  short shval;
  long status;
  int i;
  v450 *board;
  
  

  pai_v450 = (unsigned short **)calloc(numV450cards,sizeof(*pai_v450));
  if(!pai_v450)
  {
	printf("V450Config: failed to allocate space\n");
	return(ERROR);
  }

  boards_present = pai_v450;

  if ( (status = sysBusToLocalAdrs(VME_AM_STD_SUP_DATA,(char *)v450_base,(char **)&v450_addr)) != OK)
  {
	printf("Addressing error in V450Config\n");
	return(ERROR);
  }
  else
  {
    printf("Board address = 0x%08x\n",(int)v450_addr);
  }

  board = (( v450 *)((int)v450_addr));

  for (i=0; i<numV450cards; i++, board++, boards_present++)
  {
    printf("[%d] probing board at 0x%08x ---> ",i,board);

	if (vxMemProbe((char *)board,VX_READ,sizeof(short),(char *)&shval) == OK)
    {
	  *boards_present = (unsigned short *)board;

      /* board initialization */
	  /*
	  board->src = 1;
	  board->ccr =  0x5800 | GAIN | SCAN;
	  board->csr = LED_OFF | OFFSET_BIN;
	  */

      
     //board->uled = 0xFFFF;   //Turn on user LED's
     // board->macro = 0x8405;      /* MACRO for Set all channels to +/-12.5V at 16.7 Hz */
      
      board->CTL0 = 0x100A;  /* set Channel 0 to +/-12V @ 4.17 samples /Sec */
      board->CTL1 = 0x100A;  /* set Channel 1 to +/-12V @ 4.17 samples /Sec */
      board->CTL2 = 0x100A;  /* set Channel 2 to +/-12V @ 4.17 samples /Sec */
      board->CTL3 = 0x100A;  /* set Channel 3 to +/-12V @ 4.17 samples /Sec */
      board->CTL4 = 0x100A;  /* set Channel 4 to +/-12V @ 4.17 samples /Sec */
      board->CTL5 = 0x100A;  /* set Channel 5 to +/-12V @ 4.17 samples /Sec */
      board->CTL6 = 0x100A;  /* set Channel 6 to +/-12V @ 4.17 samples /Sec */
      board->CTL7 = 0x100A;  /* set Channel 7 to +/-12V @ 4.17 samples /Sec */
      board->CTL8 = 0x100A;  /* set Channel 8 to +/-12V @ 4.17 samples /Sec */
      board->CTL9 = 0x100A;  /* set Channel 9 to +/-12V @ 4.17 samples /Sec */
      board->CTL10 = 0x100A;  /* set Channel 10 to +/-12V @ 4.17 samples /Sec */
      board->CTL11 = 0x100A;  /* set Channel 11 to +/-12V @ 4.17 samples /Sec */
      board->CTL12 = 0x100A;  /* set Channel 12 to +/-12V @ 4.17 samples /Sec */
      board->CTL13 = 0x100A;  /* set Channel 13 to +/-12V @ 4.17 samples /Sec */
      board->CTL14 = 0x100A;  /* set Channel 14 to +/-12V @ 4.17 samples /Sec */
      board->CTL15 = 0x100A;  /* set Channel 15 to +/-12V @ 4.17 samples /Sec */
      
      board->rtda = rtd_on;   	/* Enable RTD A @ 100 ohm platinum, ISO 385 curve */
      board->rtdb = rtd_on;	/* Enable RTD B @ 100 ohm platinum, ISO 385 curve */
      board->rtdc = rtd_on;	/* Enable RTD C @ 100 ohm platinum, ISO 385 curve */
      board->rtdd = rtd_on;	/* Enable RTD D @ 100 ohm platinum, ISO 385 curve */
      
      taskDelay(1);

			   
      printf("memprobe finds V450 board at this address\n");
      
	}
    else
	{
      printf("Error in memprobe - No V450 found at this address\n");
	}
  }/*end of board initialization */
  

  
  return(OK);
}

int
v450_read(unsigned short card, unsigned int signal, unsigned long *pval)
{
  float vout;
 // float ohms;
  float temp;
 // unsigned short hibyte;
 // unsigned short lobyte;
  signed long rawdata;
  register v450 *paiVMI;
  
  
  
  if (( paiVMI = ( v450 *)pai_v450[card]) == 0)
  {
    printf("v450_read error. \n"); /* can't read from module */
    return(ERROR);
  }
 
 if (signal <= 15 )  /* if signal name is 0 to 15, we're reading ADC channels (0-15) */
 {   
  /* for full 32bit resolution - correct register locking, read high 2 bytes, then low 2 bytes (32 bits)*/
  *pval = (paiVMI->data[signal*2])<<16;   /* high bytes */  
  *pval += paiVMI->data[signal*2+1];      /* low bytes */
  rawdata = (*pval);
  
  /* For debug, convert and print vout */
  vout = (*pval) * 12.5 / 2147483648;   /* (32 bits) voltage range +/-12.5 V  / 2 power 31 (page 14 of V450 manual) */
  //printf("card=%2d signal=%2d vout=%f\n\n",card,signal,vout);
  
 //  printf("card=%2d signal=%2d rawdata=%ld, rawdata=0x%x, rawdata= %d \n",card,signal,rawdata, rawdata, rawdata); /* read raw data number  */
printf("we are ADC =%2d signal\n",signal);
 } 
   
   if (signal <= 16 <= 20 )  /* if signal name is 16 to 20, we're reading RTD Temps (Ch16=RTDA, Ch17=RTDB, Ch18=RTDC,Ch19=RTDD,Ch20=TMPR)  */
   {
     
 //  printf("we are at card=%2d signal=%2d\n\n",card,signal);
   
      switch (signal)  {
      
	case 16: /*  Read RTD A  */
	  
	printf("we are case=%2d\n",signal);
	break;
      
         
	case 17:  /*  Read RTD B  */
	printf("we are case=%2d\n",signal);
	break;
	
	
        
	case 18: /*  Read RTD C  */
	printf("we are case=%2d\n",signal);
	break;
	
	
         
	case 19: /*  Read RTD D  */
	printf("we are case=%2d\n",signal);
	break;
	
      
         
	case 20: /*  Read RTD D  */
	printf("we are case=%2d\n",signal);
	break;
	
      }
     
   }
   
   
   

   
   
   
 // else  /* if signal name is less than 0, we're reading RTD's (-2 = 270 ohm test resistor, -3 =RTDD */
 // {
    /* hibyte is MS ohms, lobyte is LS (fractional ohms)  */
 //   *pval = paiVMI->data[signal*2];   /* high bytes */ 
 //  hibyte = (*pval);
  //  *pval = paiVMI->data[signal*2+1];  /* low bytes */
 //   lobyte = (*pval);
   // *pval = (hibyte + (lobyte/0xFFFF));   
  //  ohms = (*pval);
    
   /* For debug, Add whole part (MS) to fractional part (LS) and print RTD Ohms */
  //  printf("card=%2d signal=%2d hibyte=%2d lobyte=%2d ohms=%f\n",card,signal,hibyte,lobyte,ohms);
  //   printf("Address = %p, Board serial# = %2d, rahi = %d, ralo = %d, rbhi = %d, rblo = %d, rchi = %d, rclo = %d, rdhi = %d, rdlo = %d\n\n",
//			   paiVMI,paiVMI->serial,paiVMI->rahi,paiVMI->ralo,paiVMI->rbhi,paiVMI->rblo,paiVMI->rchi,paiVMI->rclo,paiVMI->rdhi,paiVMI->rdlo);
 // }



//  else  /* if signal name greater than we're reading RTD Temps */
//  {
    /* hibyte is MS ohms, lobyte is LS (fractional ohms)  */
 //   *pval = paiVMI->data[signal*2];   /* high bytes */ 
    
      /* For debug, convert and print temp in C */
 //   temp = (*pval) / 16;  
  
 //   printf("card=%2d signal=%2d Temp(C)=%f\n",card,signal,temp);
 //   printf("Address = %p, Board serial# = %2d, tmpa = %d, tmpb = %d, tmpc = %d, tmpd = %d, tmpr = %d \n\n",
//			   paiVMI,paiVMI->serial,paiVMI->tmpa,paiVMI->tmpb,paiVMI->tmpc,paiVMI->tmpd,paiVMI->tmpr);
 // }

  

  
  return(OK);
}


long
v450_report(int level)
{
  int i;
  v450 *paiVMI;

  for (i = 0; i < numV450cards; i++)
  {
	if (pai_v450[i])
    {
	  printf("  ai: V450 card number %d is present\n",i);
	  if ( level > 0 )
      {
		paiVMI = (v450 *)pai_v450[i];
		printf("Address = %p, Board ID = 0x%x, CSR = 0x%x, CCR = 0x%x, RCR = 0x%x, ICR = 0x%x, IVR = 0x%x\n",
			   paiVMI,paiVMI->bir,paiVMI->csr,paiVMI->ccr,paiVMI->rcr,paiVMI->icr,paiVMI->ivr);
	  }

	}
  }

  return(OK);
}
