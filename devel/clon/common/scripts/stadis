#!/usr/bin/bltwish

###!/bin/sh
###\
##exec $CODA_BIN/bltwish1.8 -f "$0" ${1+"$@"}

package require BLT

namespace import blt::*
namespace import -force blt::tile::*

#####################################
#  Independent Run Status display
#
#  Author V.Gyurjyan 
#
#  CODA 01.08.02
#
# Sergey Boyarinov: update for the new blt2.4 (June 2008)
#
#####################################
wm title . "STADIS"
wm iconname . "WC"
wm geometry . 1270x40+0+0
set m .
toplevel .a
wm title .a "STADIS: Word Count"
wm iconname .a "WC"
wm geometry .a 965x700+0+70
set wcm .a.
toplevel .b
wm title .b "STADIS: Trigger Monitor"
wm iconname .b "TM"
wm geometry .b 965x700+0+70
set tm .b.
toplevel .c
wm title .c "STADIS: Epics"
wm iconname .c "TM"
wm geometry .c 300x731+1270+40
set pm .c.
toplevel .d
wm title .d "STADIS: Word Bar"
wm iconname .d "TM"
wm geometry .d 1340x210+0+780
set bm .d.
#toplevel .e
#wm title .e "STADIS: Tagger"
#wm iconname .e "TM"
#wm geometry .e 1140x200+0+1000
#set tbm .e.

set myx  [ wm geometry $m ] 
puts $myx
#===========================================================================#
#          Main Program
#===========================================================================#
global fcup_l fcup_r clock_l clock_r fcup_lold fcup_rold clock_lold clock_rold
global softreset
global env clonparms clonwsrc
global adate 
global namak
global font3
global m
global tm
global pm
global bm
global wcm

#------ start with trigger monitor
wm iconify .b 
 set cloner $env(CLON_ER)   
 set clon $env(CLON)
 set clonparms $env(CLON_PARMS)
 set clonwsrc ${clon}/source
 set clonbin ${clon}/common/scripts


source $clonbin/dchv_util/features.tcl

set clock 0.0
set pdf 0.0
set pass 0
set fail 0
for { set i 0} { $i < 6 } { incr i } {
set l2dl1($i) 0.0
set l1($i) 0.0
set l1_max($i) 0.0
set l1_min($i) 0.0
set gl1gen($i) 0.0
set l1al1g($i) 0.0
set l2($i) 0.0
set gl2($i) 0.0
set gl1($i) 0.0
set grvl($i) 0.0
set grvm($i) 0.0
set grvn($i) 0.0
set e_dc($i) 0.0
set e_ec($i) 0.0
set e_sc($i) 0.0
set e_cc($i) 0.0
set e_ec1($i) 0.0
}

set tcl_precision 12

set tfont -Adobe-Times-Bold-R-Normal-*-140-*
set font3 -Adobe-Times-Bold-R-Normal-*-180-*

set muffler 0
set secalarm 5
set muffler_limit 30
set nl 1
set channels 6
set ntimes   21
set DCntimes 21
set chandef { {cross green} {plus magenta} {circle blue}\
              {square red} {cross red} {diamond yellow}}
#set chandef { {"" green} {"" magenta} {"" blue} {"" red } {"" black} {"" yellow}}

#----------- Reading the alarm limits ------------------------
catch { set f [open ${clonparms}/stadis/stadis_wc.conf] } ercatch

set ress [ string first "couldn't open" $ercatch ]
if { $ress == 0 } {

puts " Error opening file stadis_wc.conf "
destroy $m
} 
while {[gets $f line] >=0 } {
set type [lindex $line 0]
if { $type == "*DC*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_dc_max($i) [lindex $line 0]
set e_dc_min($i) [lindex $line 1]
}
}
if { $type == "*EC*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_ec_max($i) [lindex $line 0]
set e_ec_min($i) [lindex $line 1]
}
}
if { $type == "*TOF*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_sc_max($i) [lindex $line 0]
set e_sc_min($i) [lindex $line 1]
}
}
if { $type == "*DC/CLAS*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_dc_clas_max($i) [lindex $line 0]
set e_dc_clas_min($i) [lindex $line 1]
}
}
if { $type == "*EC/CLAS*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_ec_clas_max($i) [lindex $line 0]
set e_ec_clas_min($i) [lindex $line 1]
}
}
if { $type == "*TOF/CLAS*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_sc_clas_max($i) [lindex $line 0]
set e_sc_clas_min($i) [lindex $line 1]
}
}
if { $type == "*L1_GENERATED*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l1g_max($i) [lindex $line 0]
set l1g_min($i) [lindex $line 1]
}
}
if { $type == "*L1_ACCEPTED*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l1_max($i) [lindex $line 0]
set l1_min($i) [lindex $line 1]
}
}
if { $type == "*L1_A/L1_G*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l1ag_max($i) [lindex $line 0]
set l1ag_min($i) [lindex $line 1]
}
}
if { $type == "*L2*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l2_max($i) [lindex $line 0]
set l2_min($i) [lindex $line 1]
}
}
if { $type == "*L2/L1*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l2l1_max($i) [lindex $line 0]
set l2l1_min($i) [lindex $line 1]
}
}
if { $type == "*Pass/Fail*"} {
gets $f line
gets $f line
set pf_max [lindex $line 0]
set pf_min [lindex $line 1]
}
}
close $f




#===================================================================#
#   Main procedurs
#===================================================================#

#===================================================================#
#
# procedure to display time plot in wrap around mode.
# Expects a blt::graph (which you have to provide from your main script)
# , the number of data points and the number of lines.
# the configuration options for elements, labels etc. you can do 
# in your main script.
#
#===================================================================#
proc tgraph_ini {graph ntime nline} {
    global datax datay tgraph_ntimes tgraph_nlines

    set tgraph_ntimes($graph) $ntime
    set tgraph_nlines($graph) $nline
    for {set nl 0} {$nl < $nline} {incr nl} {
        $graph element  create dat$nl 
        set datax($graph,$nl) ""
        set datay($graph,$nl) ""
    }

#sergey $graph xaxis configure -command formatXLabels -subticks 0 

SetActiveLegend $graph
SetClosestPoint $graph
SetZoom $graph
#SetPrint $graph

}


#===================================================================#
#
# This procedure expects the blt::graph, a line number and a pair
# of coordinates to append to the plotted line, it deletes the first 
# element once the highwatermark is reached !
#
#===================================================================#
proc tgraph {graph nl x y } {
    global datax datay tgraph_ntimes 
    #---------------------------------------------------------------#
    # to get decent time axis labels every minute
    #---------------------------------------------------------------#
    #--------------------------------------------------------------#
    # if the high water mark is reached start scrolling, otherwise 
    # append
    #---------------------------------------------------------------#
    if { [llength $datax($graph,$nl)] < $tgraph_ntimes($graph) } {
        set datax($graph,$nl) [lappend datax($graph,$nl) $x]
        set datay($graph,$nl) [lappend datay($graph,$nl) $y]
    } else {    
        set datax($graph,$nl) [lrange $datax($graph,$nl) 1 end]
        set datay($graph,$nl) [lrange $datay($graph,$nl) 1 end]
        set datax($graph,$nl) [lappend datax($graph,$nl) $x]
        set datay($graph,$nl) [lappend datay($graph,$nl) $y]
    }
    $graph element configure dat$nl -xdata $datax($graph,$nl) \
            -ydata $datay($graph,$nl)

}
 
proc formatXLabels {graph x} {

set tth [expr int(($x/3600))]
#puts $tth
set ttm [expr int((($x-$tth*3600)/60))]
set tts [expr int((($x-$tth*3600)-$ttm*60))]
     return "$tth\:$ttm\:$tts"


}

#===================================================================#
#
# reset the graph
#
#===================================================================#
proc tgraph_reset { graph } {
    global tgraph_nlines
    for {set nl 0} {$nl < $tgraph_nlines($graph)} {incr nl} {
        set datax($graph,$nl) ""
        set datay($graph,$nl) ""
        $graph element configure dat$nl -xdata $datax($graph,$nl) \
                -ydata $datay($graph,$nl) 
    }
}


#===================================================================#
#
# Save to file
#
#===================================================================#
proc tsave {graph {file ""}} {
    if {$file == ""} {
        set file [getfilename "Generate Postscript File"]
        if {$file == ""} return
    }
    set bg  [lindex [$graph configure -bg] 4]
    set pbg [lindex [$graph configure -plotbackground] 4]
    set lbg [lindex [$graph legend configure -bg] 4]
    $graph configure -bg white -plotbackground white
    $graph legend configure -bg white
    $graph postscript $file -pagewidth 10c -pageheight 17c\
            -landscape true -colormode color;
    $graph configure -bg "$bg" -plotbackground $pbg
    $graph legend configure -bg $lbg
}


#===================================================================#
#
#  Print on printer, use lpr and $PRINTER setting ;-)
#
#===================================================================#
proc tprint {graph {printer ""}} {
    global argv0
    set pfile "/tmp/$argv0.$graph.[pid]"
    tsave $graph $pfile
    if {$printer == ""} {
        after 1000 "eval exec lpr $pfile; exec rm -f $pfile"
    } else {
        after 1000 "eval exec lpr -Pprinter $pfile; exec rm -f $pfile"
    }
}
#------------------------------------------------------------------
#------------- Function to position the window -------------#
proc positionWindow w {
    wm geometry $w +300+300
}


#-------------- Initialization ------------------------
set old_unixtime 0
set lolimit 0.1
set uplimit 0.9
set time_old 0
set runnumber_old 0


set det 0
set tor 0
set mtor 0
set fail 0
set pass 0
for { set i 0 } { $i < 6} { incr i} {
set l1($i) 0
set l2($i) 0
set l1gen($i) 0
set gl2($i) 0
set gl1($i) 0
set gl1gen($i) 0
set l1al1g($i) 0
set l2dl1($i) 0
set boc_dc($i) 0
set boc_ec($i) 0
set boc_sc($i) 0
set boc_cc($i) 0
set boc_ec1($i) 0
set e_dc($i) 0
set e_ec($i) 0
set e_sc($i) 0
set e_cc($i) 0
set e_ec1($i) 0
set grvl($i) 0
set grvm($i) 0
set grvn($i) 0
}

#---------- What are the ROC status's ------------

option add *Blt_graph.font *Times*Bold*R*14* 
option add *Blt_htext.Font *Times*Bold-R*14*
option add *Blt_graph.textFont *Times*Bold*R*14* 
set visual [winfo screenvisual .]

##sergey?? option add *Pixels				4


#------------ frame for word count bars ------------------
set nwd_w 1300 
 set nwd_h 220
frame ${bm}nwd -relief raised -bd 3 -width $nwd_w -height $nwd_h


option add *Blt_barchart*xTitle "Trigger bits"
option add *Blt_barchart*yTitle "Rate \[Hz\]"
option add *Blt_barchart.font *new*century*100*
option add *Blt_barchart*legendMapped false
option add *Blt_barchart*elemBackground white
option add *Blt_barchart*elemActiveBackground white
option add *Blt_barchart*elemRelief raised
set visual [winfo screenvisual .] 

#-------------- dc -----------------------
set dc_w 230
set graphbar11 ${bm}nwd.graphbar11
blt::barchart $graphbar11 

$graphbar11 configure -width $dc_w -height $nwd_h
$graphbar11 yaxis configure  -loose 1
$graphbar11 yaxis configure  -min 0.0
#$graphbar11 yaxis configure  -max 100.0
$graphbar11 yaxis configure  -title "DC Words"
$graphbar11 xaxis configure  -title "DC_Sector" 
#sergey $graphbar11 legend configure -mapped 0

    $graphbar11 element create s0 \
         -data { 1  1000 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar11 element create s1 \
         -data { 2  100 } -relief raised \
        -bd 2  -fg SpringGreen3
    $graphbar11 element create s2 \
         -data { 3  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar11 element create s3 \
         -data { 4  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar11 element create s4 \
         -data { 5  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar11 element create s5 \
         -data { 6  100 } -relief raised \
        -bd 2 -fg SpringGreen3

pack $graphbar11 -side left -padx 5
#-------------- ec -----------------------
set ec_w 230
set graphbar12 ${bm}nwd.graphbar12
blt::barchart $graphbar12 

$graphbar12 configure -width $ec_w -height $nwd_h
$graphbar12 yaxis configure  -loose 1
$graphbar12 yaxis configure  -min 0.0
#$graphbar12 yaxis configure  -max 100.0
$graphbar12 yaxis configure  -title "EC Words"
$graphbar12 xaxis configure  -title "EC_Sector" 
#sergey $graphbar12 legend configure -mapped 0

    $graphbar12 element create s0 \
         -data { 1  1000 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar12 element create s1 \
         -data { 2  100 } -relief raised \
        -bd 2  -fg SpringGreen3
    $graphbar12 element create s2 \
         -data { 3  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar12 element create s3 \
         -data { 4  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar12 element create s4 \
         -data { 5  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar12 element create s5 \
         -data { 6  100 } -relief raised \
        -bd 2 -fg SpringGreen3

pack $graphbar12 -side left -padx 5
#-------------- sc -----------------------
set sc_w 230
set graphbar13 ${bm}nwd.graphbar13
blt::barchart $graphbar13 

$graphbar13 configure -width $sc_w -height $nwd_h
$graphbar13 yaxis configure  -loose 1
$graphbar13 yaxis configure  -min 0.0
#$graphbar13 yaxis configure  -max 100.0
$graphbar13 yaxis configure  -title "SC Words"
$graphbar13 xaxis configure  -title "SC_Sector" 
#sergey $graphbar13 legend configure -mapped 0

    $graphbar13 element create s0 \
         -data { 1  1000 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar13 element create s1 \
         -data { 2  100 } -relief raised \
        -bd 2  -fg SpringGreen3
    $graphbar13 element create s2 \
         -data { 3  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar13 element create s3 \
         -data { 4  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar13 element create s4 \
         -data { 5  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar13 element create s5 \
         -data { 6  100 } -relief raised \
        -bd 2 -fg SpringGreen3

pack $graphbar13 -side left -padx 5
#-------------- cc -----------------------
set cc_w 230
set graphbar14 ${bm}nwd.graphbar14
blt::barchart $graphbar14 

$graphbar14 configure -width $cc_w -height $nwd_h
$graphbar14 yaxis configure  -loose 1
$graphbar14 yaxis configure  -min 0.0
#$graphbar14 yaxis configure  -max 100.0
$graphbar14 yaxis configure  -title "CC Words"
$graphbar14 xaxis configure  -title "CC_Sector" 
#sergey $graphbar14 legend configure -mapped 0

    $graphbar14 element create s0 \
         -data { 1  1000 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar14 element create s1 \
         -data { 2  100 } -relief raised \
        -bd 2  -fg SpringGreen3
    $graphbar14 element create s2 \
         -data { 3  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar14 element create s3 \
         -data { 4  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar14 element create s4 \
         -data { 5  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar14 element create s5 \
         -data { 6  100 } -relief raised \
        -bd 2 -fg SpringGreen3

pack $graphbar14 -side left -padx 5
#-------------- lac -----------------------
set lac_w 230
set graphbar15 ${bm}nwd.graphbar15
blt::barchart $graphbar15 

$graphbar15 configure -width $lac_w -height $nwd_h
$graphbar15 yaxis configure  -loose 1
$graphbar15 yaxis configure  -min 0.0
#$graphbar15 yaxis configure  -max 100.0
$graphbar15 yaxis configure  -title "LAC Words"
$graphbar15 xaxis configure  -title "LAC_Sector" 
#sergey $graphbar15 legend configure -mapped 0

    $graphbar15 element create s0 \
         -data { 1  1000 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar15 element create s1 \
         -data { 2  100 } -relief raised \
        -bd 2  -fg SpringGreen3
    $graphbar15 element create s2 \
         -data { 3  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar15 element create s3 \
         -data { 4  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar15 element create s4 \
         -data { 5  100 } -relief raised \
        -bd 2 -fg SpringGreen3
    $graphbar15 element create s5 \
         -data { 6  100 } -relief raised \
        -bd 2 -fg SpringGreen3

pack $graphbar15 -side left -padx 5

#----- frame for DAQ -----------------------
 set lt_w 600 
  set lt_h 350
frame ${pm}lt -relief raised -bd 3 -width $lt_w -height $lt_h
#-----------frame for Magnet----------------------
set pr_w 600 
 set pr_h 350
frame ${pm}pr -relief raised -bd 3 -width $pr_w -height $pr_h

#------------------------------------------------
#-----frame for run information--
set l1b_w 600 
 set l1b_h 400
frame ${pm}l1b -relief raised -bd 3 -width $l1b_w -height $l1b_h

#-------------disk information and livetime ------------------
     set l1b3_w 350
     set l1b3_h 200
frame ${pm}l1b3 -relief raised -bd 3 -width $l1b3_w -height $l1b3_h
canvas ${pm}l1b3.c -relief raised -borderwidth 1  -width $l1b3_w -height $l1b3_h 
${pm}l1b3.c create text  3.5c 0.2c -anchor n  -width 4c -text "Data Acquisition" -fill DarkSlateGray

${pm}l1b3.c create arc 0.6c 1.6c 3.15c 4.3c -fill yellow3 -outline black  -width 0.1m -start 0 -extent 359 -style pieslice -tags diskfull

${pm}l1b3.c create arc 0.6c 1.6c 3.15c 4.3c -fill DeepSkyBlue4  -outline black \
            -start 0 -extent 60 -style pieslice -tags disk

${pm}l1b3.c create text 1.8c 5c -anchor n  -width 4c -text "Raid is ? full" -tags rfull
#------------ livetime pie
${pm}l1b3.c create arc 4c 1.6c 6.55c 4.3c -fill magenta4 -outline black  -width 0.1m -start 0 -extent 359 -style pieslice -tags livo

${pm}l1b3.c create arc 4c 1.6c 6.55c 4.3c -fill SpringGreen2  -outline black \
            -start 0 -extent 60 -style pieslice -tags livepie

${pm}l1b3.c create text 5.3c 5c -anchor n  -width 4c -text "Livetime" -tags livpinfo



pack ${pm}l1b3.c 


#----------------------------------------------------
#------------------magnet pie --------------------------
     set prg3_w 350
     set prg3_h 200

frame ${pm}prg3 -relief raised -bd 3 -width $prg3_w -height $prg3_h
canvas ${pm}prg3.c -relief raised -borderwidth 1  -width $prg3_w -height $prg3_h

${pm}prg3.c create text  3.5c 0.2c -anchor n  -width 4c -text "Magnet" -fill DarkSlateGray
#------------------- torus -----------------
${pm}prg3.c create text  1.7c 0.8c -anchor n  -width 4c -text "Torus" -fill DarkSlateGray
${pm}prg3.c create arc 0.6c 1.6c 3.15c 4.3c -fill yellow3 -outline black  -width 0.1m -start 0 -extent 359 -style pieslice -tags torusfull

${pm}prg3.c create arc 0.6c 1.6c 3.15c 4.3c -fill green4  -outline black \
            -start 0 -extent 60 -style pieslice -tags torus

${pm}prg3.c create text 1.8c 5c -anchor n  -width 4c -text " " -tags ttor
#------------ minitorus -------------------
${pm}prg3.c create text  5.3c 0.8c -anchor n  -width 4c -text "Minitorus" -fill DarkSlateGray
${pm}prg3.c create arc 4c 1.6c 6.55c 4.3c -fill yellow3 -outline black  -width 0.1m -start 0 -extent 359 -style pieslice -tags minitfull

${pm}prg3.c create arc 4c 1.6c 6.55c 4.3c -fill green4  -outline black \
            -start 0 -extent 60 -style pieslice -tags minitor

${pm}prg3.c create text 5.3c 5c -anchor n  -width 4c -text " " -tags tmtor




pack ${pm}prg3.c 
#------------------------------------------------


#----------trigger information-------------------
        set l1b1_w 350 
        set l1b1_h 450
frame ${pm}l1b1 -relief raised -bd 3 -width $l1b1_w -height $l1b1_h


label ${pm}l1b1.text2 -text "Run Configuration File                                 " -font $tfont -fg DarkSlateGray
label ${pm}l1b1.trigl1mask -relief sunken -bd 3 -width 40  -textvariable l1mask -font $tfont

label ${pm}l1b1.clock -text "Clock Based Livetime \[%\]                           " -font $tfont -fg DarkSlateGray
label ${pm}l1b1.clocknum -relief sunken -bd 3 -width 40   -textvariable lvclock -font $tfont

label ${pm}l1b1.text3 -text "Trigger Based Livetime                                 " -font $tfont -fg DarkSlateGray
label ${pm}l1b1.trigps -relief sunken -bd 3 -width 40  -textvariable prescal -font $tfont

label ${pm}l1b1.fcup -text  "Fcup Based Livetime \[%\]                            " -font $tfont -fg DarkSlateGray    
label ${pm}l1b1.fcupnum -relief sunken -bd 3 -width 40  -textvariable lvfcup -font $tfont

label ${pm}l1b1.fcupi -text "Fcup Integral Current \[nC\]                         " -font $tfont -fg DarkSlateGray
label ${pm}l1b1.fcupinum -relief sunken -bd 3 -width 40 -textvariable fcupi -font $tfont
 
label ${pm}l1b1.fcupd -text "Fcup Differential Rate \[nA\]                        " -font $tfont -fg DarkSlateGray
label ${pm}l1b1.fcupdnum -relief sunken -bd 3 -width 40  -textvariable fcupd -font $tfont

pack ${pm}l1b1.text2 ${pm}l1b1.trigl1mask ${pm}l1b1.clock ${pm}l1b1.clocknum  ${pm}l1b1.text3 ${pm}l1b1.trigps ${pm}l1b1.fcup ${pm}l1b1.fcupnum ${pm}l1b1.fcupd ${pm}l1b1.fcupdnum -side top -expand yes -pady 1 


#----------pack everything-----------------------


pack ${pm}l1b3 -in ${pm}lt -side right -padx 5 -pady 5

pack ${pm}prg3 -in ${pm}pr -side right -padx 5 -pady 5

pack ${pm}l1b1 -in ${pm}l1b -side right -padx 5 -pady 5

pack ${pm}lt -fill x 
pack ${pm}pr -fill x  
pack ${pm}l1b -fill x
pack ${bm}nwd -fill x
#pack ${tbm}lt4 -fill x 
#-------------------------------------------------

#------------frame for run information-----------
set run_w 500 
 set run_h 50
frame ${m}run -relief raised -bd 3 -width $run_w -height $run_h

label ${m}run.numtext -text " Run Number" -font $tfont
label ${m}run.number -relief sunken -bd 3 -width 11  -textvariable runnumber -font $tfont
label ${m}run.empt1 -text "     "
label ${m}run.stattext -text " Run Status" -font $tfont
label ${m}run.status -relief sunken -bd 3 -width 13  -textvariable runstat -font $tfont
label ${m}run.empt2 -text "     "
label ${m}run.datetext -text " Date" -font $tfont
label ${m}run.date -relief sunken -bd 3 -width 30  -textvariable rundate -font $tfont

button  ${m}run.wc -width 15  -text "CLAS Word Count" -relief raised  -bd 3 -command {
set Wc [ wm state .a ]
puts $Wc
if { $Wc == "normal" } {
wm iconify .a
wm deiconify .a  
} else { 
wm iconify .b 
wm deiconify .a 
} 
}
button  ${m}run.l2 -width 7  -text "Trigger" -relief raised  -bd 3 -command {
set Tc [ wm state .b ]
puts $Tc
if { $Tc == "normal" } { 
wm iconify .b
wm deiconify .b  
} else { 
wm iconify .a 
wm deiconify .b 
} 

}
button  ${m}run.edit -width 16  -text "Set Alarm Limits" -relief raised  -bd 3 -command {
exec emacs ${clonparms}/stadis/stadis_wc.conf 
#----------- Reading the alarm limits ------------------------
after 3000
catch { set f [open ${clonparms}/stadis/stadis_wc.conf] } ercatch

set ress [ string first "couldn't open" $ercatch ]
if { $ress == 0 } {

puts " Error opening file stadis_wc.conf "
destroy $m
} 

while {[gets $f line] >=0 } {
set type [lindex $line 0]
if { $type == "*DC*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_dc_max($i) [lindex $line 0]
set e_dc_min($i) [lindex $line 1]
}
}
if { $type == "*EC*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_ec_max($i) [lindex $line 0]
set e_ec_min($i) [lindex $line 1]
}
}
if { $type == "*TOF*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_sc_max($i) [lindex $line 0]
set e_sc_min($i) [lindex $line 1]
}
}
if { $type == "*DC/CLAS*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_dc_clas_max($i) [lindex $line 0]
set e_dc_clas_min($i) [lindex $line 1]
}
}
if { $type == "*EC/CLAS*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_ec_clas_max($i) [lindex $line 0]
set e_ec_clas_min($i) [lindex $line 1]
}
}
if { $type == "*TOF/CLAS*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_sc_clas_max($i) [lindex $line 0]
set e_sc_clas_min($i) [lindex $line 1]
}
}
if { $type == "*L1_GENERATED*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l1g_max($i) [lindex $line 0]
set l1g_min($i) [lindex $line 1]
}
}
if { $type == "*L1_ACCEPTED*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l1_max($i) [lindex $line 0]
set l1_min($i) [lindex $line 1]
}
}
if { $type == "*L1_A/L1_G*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l1ag_max($i) [lindex $line 0]
set l1ag_min($i) [lindex $line 1]
}
}
if { $type == "*L2*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l2_max($i) [lindex $line 0]
set l2_min($i) [lindex $line 1]
}
}
if { $type == "*L2/L1*"} {
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set l2l1_max($i) [lindex $line 0]
set l2l1_min($i) [lindex $line 1]
}
}
if { $type == "*Pass/Fail*"} {
gets $f line
gets $f line
set pf_max [lindex $line 0]
set pf_min [lindex $line 1]
}
}
close $f
}

button  ${m}run.sound -width 9  -text "Muffle up" -relief raised  -bd 3 -command {
puts $muffler
set muffler $muffler_limit
puts $muffler
}

pack ${m}run.numtext ${m}run.number ${m}run.empt1 ${m}run.stattext ${m}run.status ${m}run.empt2 ${m}run.datetext ${m}run.date ${m}run.wc ${m}run.l2 ${m}run.edit -side left -padx 1 -expand no  

#----- frame for DC min number of words -----------------------
 set lt_w 465 
 set lt_h 205
frame ${wcm}lt -relief raised -bd 3 -width $lt_w -height $lt_h 
#--------------DC min number of words graph--------------------
    set ltg_w 460 
     set ltg_h 203
frame ${wcm}ltg -relief raised -bd 3 -width $ltg_w -height $ltg_h -bg gray
#------- make a DCminWord widget GRAPH----------------------

frame ${wcm}ltg.graph -bd 1 -relief raised 
set         graph  ${wcm}ltg.graph.graph
blt::graph  $graph
tgraph_ini $graph $DCntimes $channels 


 
    $graph  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1" 
 


    $graph  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $graph  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 



    $graph  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 



    $graph  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $graph  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 




$graph configure -width $ltg_w -height $ltg_h

$graph yaxis configure  -loose 1
$graph yaxis configure  -min 0.0
$graph yaxis configure  -title "Count" 
$graph xaxis configure  -title "DC words per event" -rotate 0.0 

pack         $graph
pack         ${wcm}ltg.graph -side top

#------------------------------------------------
#---------------- dce/clase ratio numbers----------------
    set ltn_w 460 
     set ltn_h 203
frame ${wcm}ltn -relief raised -bd 3 -width $ltn_w -height $ltn_h -bg gray

#------- make a DCminWord widget GRAPH----------------------

frame ${wcm}ltn.graph -bd 1 -relief raised
set         graphDC  ${wcm}ltn.graph.graph
blt::graph  $graphDC
tgraph_ini $graphDC $DCntimes $channels 


    $graphDC  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $graphDC  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $graphDC  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $graphDC  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $graphDC  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $graphDC  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 



$graphDC configure -width $ltn_w -height $ltn_h
$graphDC yaxis configure  -loose 1
#$graphDC yaxis configure  -min 0.0
$graphDC yaxis configure  -max 1.0
$graphDC yaxis configure  -title "dc/clas" 
$graphDC xaxis configure  -title "DC/CLAS word-count ratio per event" -rotate 0.0 

pack         $graphDC
pack         ${wcm}ltn.graph -side top


 
#------------------------------------------------

#-----------frame for rates----------------------
set pr_w 465 
 set pr_h 205
frame ${wcm}pr -relief raised -bd 3 -width $pr_w -height $pr_h

#----------EC rates graph------------------------
    set prg1_w 460 
     set prg1_h 203
frame ${wcm}prg1 -relief raised -bd 3 -width $prg1_w -height $prg1_h -bg gray
#----------make a timegraph widget GRAPH1-----------------------
frame ${wcm}prg1.graph1 -bd 1 -relief raised
set         graph1  ${wcm}prg1.graph1.graph1



blt::graph  $graph1
tgraph_ini $graph1 $ntimes $channels 

    $graph1  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $graph1  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $graph1  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $graph1  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $graph1  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $graph1  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 


$graph1 configure -width $prg1_w -height $prg1_h
$graph1 yaxis configure  -loose 1
$graph1 yaxis configure  -min 0.0
$graph1 yaxis configure  -title "Count"
$graph1 xaxis configure  -title "EC words per event"  -rotate 0.0 

pack         $graph1
pack         ${wcm}prg1.graph1 -side top
#-----------------------------------------------
#-----------SC/CC rates graph--------------------
    set prg2_w 460 
     set prg2_h 203
frame ${wcm}prg2 -relief raised -bd 3 -width $prg2_w -height $prg2_h -bg gray
#----------make a timegraph widget GRAPH2-----------------------
frame ${wcm}prg2.graph2 -bd 1 -relief raised
set         graph2  ${wcm}prg2.graph2.graph2
blt::graph  $graph2
tgraph_ini $graph2 $ntimes $channels 



    $graph2  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $graph2  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $graph2  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $graph2  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $graph2  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $graph2  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 



$graph2 configure -width $prg2_w -height $prg2_h
$graph2 yaxis configure  -loose 1
$graph2 yaxis configure  -min 0.0
$graph2 yaxis configure  -max 0.3
$graph2 yaxis configure  -title "ec/clas"
$graph2 xaxis configure  -title "EC/CLAS word-count ratio per event"  -rotate 0.0 

pack         $graph2
pack         ${wcm}prg2.graph2 -side top

#-----------------------------------------------
#-----------frame for rates----------------------
set wpr_w 465 
 set wpr_h 205
frame ${wcm}wpr -relief raised -bd 3 -width $wpr_w -height $wpr_h

#----------EC rates wgraph------------------------
    set wprg1_w 460 
     set wprg1_h 203
frame ${wcm}wprg1 -relief raised -bd 3 -width $wprg1_w -height $wprg1_h -bg gray
#----------make a timewgraph widget WGRAPH1-----------------------
frame ${wcm}wprg1.wgraph1 -bd 1 -relief raised
set         wgraph1  ${wcm}wprg1.wgraph1.wgraph1



blt::graph  $wgraph1
tgraph_ini $wgraph1 $ntimes $channels 

    $wgraph1  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $wgraph1  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $wgraph1  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $wgraph1  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $wgraph1  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $wgraph1  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 


$wgraph1 configure -width $wprg1_w -height $wprg1_h
$wgraph1 yaxis configure  -loose 1
$wgraph1 yaxis configure  -min 0.0
$wgraph1 yaxis configure  -title "Count"
$wgraph1 xaxis configure  -title "TOF words per event"  -rotate 0.0 

pack         $wgraph1
pack         ${wcm}wprg1.wgraph1 -side top
#-----------------------------------------------
#-----------SC/CC rates wgraph--------------------
    set wprg2_w 460 
     set wprg2_h 203
frame ${wcm}wprg2 -relief raised -bd 3 -width $wprg2_w -height $wprg2_h -bg gray
#----------make a timewgraph widget WGRAPH2-----------------------
frame ${wcm}wprg2.wgraph2 -bd 1 -relief raised
set         wgraph2  ${wcm}wprg2.wgraph2.wgraph2
blt::graph  $wgraph2
tgraph_ini $wgraph2 $ntimes $channels 


    $wgraph2  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $wgraph2  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $wgraph2  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $wgraph2  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $wgraph2  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $wgraph2  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 



$wgraph2 configure -width $wprg2_w -height $wprg2_h
$wgraph2 yaxis configure  -loose 1
$wgraph2 yaxis configure  -min 0.0
$wgraph2 yaxis configure  -max 0.3
$wgraph2 yaxis configure  -title "tof/clas"
$wgraph2 xaxis configure  -title "TOF/CLAS word-count ratio per event"  -rotate 0.0 

pack         $wgraph2
pack         ${wcm}wprg2.wgraph2 -side top

#-----------frame for level2----------------------
set l2pr_w 465 
 set l2pr_h 205
frame ${tm}l2pr -relief raised -bd 3 -width $l2pr_w -height $l2pr_h

#----------L2 rates wgraph------------------------
    set l2prg1_w 460 
     set l2prg1_h 203
frame ${tm}l2prg1 -relief raised -bd 3 -width $l2prg1_w -height $l2prg1_h -bg gray
#----------make a timewgraph widget WGRAPH1-----------------------
frame ${tm}l2prg1.l2graph1 -bd 1 -relief raised
set         l2graph1  ${tm}l2prg1.l2graph1.l2graph1



blt::graph  $l2graph1
tgraph_ini $l2graph1 $ntimes $channels 

    $l2graph1  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $l2graph1  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $l2graph1  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $l2graph1  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $l2graph1  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $l2graph1  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 


$l2graph1 configure -width $l2prg1_w -height $l2prg1_h
$l2graph1 yaxis configure  -loose 1
$l2graph1 yaxis configure  -min 0.0
$l2graph1 yaxis configure  -title "\[Hz\]"
$l2graph1 xaxis configure  -title "Accepted Level2 Triggers "  -rotate 0.0 

pack         $l2graph1
pack         ${tm}l2prg1.l2graph1 -side top
#-----------------------------------------------
#-----------l2/l1 rates graph--------------------
    set l2prg2_w 460 
     set l2prg2_h 203
frame ${tm}l2prg2 -relief raised -bd 3 -width $l2prg2_w -height $l2prg2_h -bg gray
#----------make a timewgraph widget WGRAPH2-----------------------
frame ${tm}l2prg2.l2graph2 -bd 1 -relief raised
set         l2graph2  ${tm}l2prg2.l2graph2.l2graph2
blt::graph  $l2graph2
tgraph_ini $l2graph2 $ntimes $channels 


    $l2graph2  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $l2graph2  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $l2graph2  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $l2graph2  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $l2graph2  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $l2graph2  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 



$l2graph2 configure -width $l2prg2_w -height $l2prg2_h
$l2graph2 yaxis configure  -loose 1
$l2graph2 yaxis configure  -min 0.0
$l2graph2 yaxis configure  -max 6.1
$l2graph2 yaxis configure  -title "L2/L1"
$l2graph2 xaxis configure  -title "Number Of Level2 Tracks Per Event"  -rotate 0.0 

pack         $l2graph2
pack         ${tm}l2prg2.l2graph2 -side top

# =====================================
#---------- frame for level1 ------------------------
    set l2prl_w 465 
     set l2prl_h 205
frame ${tm}l2prl -relief raised -bd 3 -width $l2prl_w -height $l2prl_h -bg gray
#----------make a timewgraph widget for level1-----------------------
    set l2prg3_w 460 
     set l2prg3_h 203
frame ${tm}l2prg3 -relief raised -bd 3 -width $l2prg3_w -height $l2prg3_h -bg gray
#-----------making time graph 
frame ${tm}l2prg3.l2graph3 -bd 1 -relief raised
set         l2graph3  ${tm}l2prg3.l2graph3.l2graph3


blt::graph  $l2graph3
tgraph_ini $l2graph3 $ntimes $channels 

    $l2graph3  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $l2graph3  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $l2graph3  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $l2graph3  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $l2graph3  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $l2graph3  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 


$l2graph3 configure -width $l2prg3_w -height $l2prg3_h
$l2graph3 yaxis configure  -loose 1
$l2graph3 yaxis configure  -min 0.0
$l2graph3 yaxis configure  -title "\[Hz\]"
$l2graph3 xaxis configure  -title " Accepted Level1 Triggers "  -rotate 0.0 

pack         $l2graph3
pack         ${tm}l2prg3.l2graph3 -side top
#-----------------------------------------------
#-----------pass/fail rates graph--------------------
    set l2prg4_w 460 
     set l2prg4_h 203
frame ${tm}l2prg4 -relief raised -bd 3 -width $l2prg4_w -height $l2prg4_h -bg gray
#----------make a timewgraph widget WGRAPH2-----------------------
frame ${tm}l2prg4.l2graph4 -bd 1 -relief raised
set         l2graph4  ${tm}l2prg4.l2graph4.l2graph4
blt::graph  $l2graph4
tgraph_ini $l2graph4 $ntimes $channels 


    $l2graph4  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "V"


$l2graph4 configure -width $l2prg4_w -height $l2prg4_h
$l2graph4 yaxis configure  -loose 1
$l2graph4 yaxis configure  -min 0.0
$l2graph4 yaxis configure  -max 1.0
$l2graph4 yaxis configure  -title "Fail/Pass"
$l2graph4 xaxis configure  -title "Level2 Fail/Level2 Pass Ratio"  -rotate 0.0 

pack         $l2graph4
pack         ${tm}l2prg4.l2graph4 -side top

# =====================================
# =====================================
#---------- frame for level1 ------------------------
    set l2pra_w 465 
     set l2pra_h 205
frame ${tm}l2pra -relief raised -bd 3 -width $l2pra_w -height $l2pra_h -bg gray
#----------make a timewgraph widget for level1-----------------------
    set l2prg5_w 460 
     set l2prg5_h 203
frame ${tm}l2prg5 -relief raised -bd 3 -width $l2prg5_w -height $l2prg5_h -bg gray
#-----------making time graph 
frame ${tm}l2prg5.l2graph5 -bd 1 -relief raised
set         l2graph5  ${tm}l2prg5.l2graph5.l2graph5


blt::graph  $l2graph5
tgraph_ini $l2graph5 $ntimes $channels 

    $l2graph5  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $l2graph5  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $l2graph5  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $l2graph5  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $l2graph5  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $l2graph5  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"
 


$l2graph5 configure -width $l2prg5_w -height $l2prg5_h
$l2graph5 yaxis configure  -loose 1
$l2graph5 yaxis configure  -min 0.0
$l2graph5 yaxis configure  -title "\[Hz\]"
$l2graph5 xaxis configure  -title "Generated Level1 Triggers "  -rotate 0.0 

pack         $l2graph5
pack         ${tm}l2prg5.l2graph5 -side top
#-----------------------------------------------
#-----------accepted/generated rates graph--------------------
    set l2prg6_w 460 
     set l2prg6_h 203
frame ${tm}l2prg6 -relief raised -bd 3 -width $l2prg6_w -height $l2prg6_h -bg gray
#----------make a timewgraph widget WGRAPH2-----------------------
frame ${tm}l2prg6.l2graph6 -bd 1 -relief raised
set         l2graph6  ${tm}l2prg6.l2graph6.l2graph6
blt::graph  $l2graph6
tgraph_ini $l2graph6 $ntimes $channels 

    $l2graph6  element configure dat0 \
            -symbol [lindex [lindex $chandef 0] 0] \
            -color     [lindex [lindex $chandef 0] 1] \
            -label  "S1"
 


    $l2graph6  element configure dat1 \
            -symbol [lindex [lindex $chandef 1] 0] \
            -color     [lindex [lindex $chandef 1] 1] \
            -label  "S2"
 


    $l2graph6  element configure dat2 \
            -symbol [lindex [lindex $chandef 2] 0] \
            -color     [lindex [lindex $chandef 2] 1] \
            -label  "S3"
 


    $l2graph6  element configure dat3 \
            -symbol [lindex [lindex $chandef 3] 0] \
            -color     [lindex [lindex $chandef 3] 1] \
            -label  "S4"
 


    $l2graph6  element configure dat4 \
            -symbol [lindex [lindex $chandef 4] 0] \
            -color     [lindex [lindex $chandef 4] 1] \
            -label  "S5"
 


    $l2graph6  element configure dat5 \
            -symbol [lindex [lindex $chandef 5] 0] \
            -color     [lindex [lindex $chandef 5] 1] \
            -label  "S6"

$l2graph6 configure -width $l2prg6_w -height $l2prg6_h
$l2graph6 yaxis configure  -loose 1
$l2graph6 yaxis configure  -min 0.0
$l2graph6 yaxis configure  -max 1.2
$l2graph6 yaxis configure  -title "Accepted/Generated"
$l2graph6 xaxis configure  -title "Accepted Triggers/Generated Triggers Ratio"  -rotate 0.0 

pack         $l2graph6
pack         ${tm}l2prg6.l2graph6 -side top

# =====================================

pack ${wcm}ltg -in ${wcm}lt -side left -padx 5 -pady 5
pack ${wcm}ltn -in ${wcm}lt -side left -padx 5 -pady 5


pack ${wcm}prg1 -in ${wcm}pr -side left -padx 5 -pady 5
pack ${wcm}prg2 -in ${wcm}pr -side left -padx 5 -pady 5

pack ${wcm}wprg1 -in ${wcm}wpr -side left -padx 5 -pady 5
pack ${wcm}wprg2 -in ${wcm}wpr -side left -padx 5 -pady 5

pack ${tm}l2prg1 -in ${tm}l2pr -side left -padx 5 -pady 5
pack ${tm}l2prg2 -in ${tm}l2pr -side left -padx 5 -pady 5

pack ${tm}l2prg3 -in ${tm}l2prl -side left -padx 5 -pady 5
pack ${tm}l2prg4 -in ${tm}l2prl -side left -padx 5 -pady 5

pack ${tm}l2prg5 -in ${tm}l2pra -side left -padx 5 -pady 5
pack ${tm}l2prg6 -in ${tm}l2pra -side left -padx 5 -pady 5


pack ${m}run -fill x
pack ${wcm}lt -fill x
pack ${wcm}pr -fill x
pack ${wcm}wpr -fill x
pack ${tm}l2pr -fill x
pack ${tm}l2prl -fill x
pack ${tm}l2pra -fill x

#-------------------------------------------------
update


#===================================================================#
# Read files and update the information MAIN_LOOP
#===================================================================#

puts "123"
for {set j 1} {$j>0} {incr j} {
  update
  catch { set adate [ exec date ] } result
  update
#--------- Run Config file -------------------------------------
  set f [open ${clonparms}/trigger/current_trig_config.txt r]
  gets $f line
  update
  puts "line> $line"
  set Ttfile $line
  set Tatr [split $Ttfile /]
  for { set i 1} { $i < 11} { incr i } {
  set Tatr_f [lindex $Tatr $i]
  puts "Tatr_f> $Tatr_f"
  set Tatr_c [split $Tatr_f .]
  set Tatr_cc [lindex $Tatr_c 1]
  puts "Tatr_cc> $Tatr_cc"
  if { $Tatr_cc == "cfg" } { 
    set Ttfile $Tatr_f
    puts "Ttfile> $Ttfile"
    break
  }
}

set l1mask $Ttfile

close $f

#----------------------------------------------------------------
#-------Run information getting and feeling---------------------
catch { set aa [ exec run_number ] } result   
set runnumber [lindex $aa 0]
if { $runnumber > $runnumber_old } {
puts "runnumbers> $runnumber $runnumber_old "
set runnumber_old $runnumber
}
#####################################################################
# ----- Web file organization 
#catch { set er [ exec dimanc mon p ec -1 -1 ]  } result 
#catch { set er [ exec dimanc mon p sc -1 -1 ]  } result 
#catch { set er [ exec dimanc mon p cc -1 -1 ]  } result
#catch { set er [ exec r_ts_go > /usr/local/clas/parms/status/go.txt ]  } result
#catch { set er [ exec cat /usr/local/clas/parms/status/go.txt /usr/local/clas/parms/diman/mondat/mon_ec_p.txt /usr/local/clas/parms/diman/mondat/mon_sc_p.txt /usr/local/clas/parms/diman/mondat/mon_cc_p.txt /usr/local/clas/parms/info_server/info_server.dump /usr/local/clas/parms/epics/EPIC_summary.txt /usr/local/clas/parms/dchv/archive/Run_0${runnumber}.dat > /group/clon/vhg/data/classtate.dat ]  } result  
#################################################################

catch { set bb [ exec run_status ] } result   
set runstat [lindex $bb 11]
#set runstat "unknown"
set rundate $adate

#---------------------------------------------------------------
#--------------------torroid informaion update---------------
set f [open ${clonparms}/epics/EPIC_summary.txt]
while {[gets $f line] >=0 } {
update
set det [lindex $line 0]
#puts $det
if { $det=="torus_current" } {
set tor [ lindex $line 1]
if { $tor < 0 } { set tor [expr $tor*(-1)] }
}
if { $det=="MTIRBCK" } {
set mtor [ lindex $line 1]
if { $mtor < 0 } { set mtor [expr $mtor*(-1)] }
}
}
close $f 

${pm}prg3.c itemconfigure ttor -text " ${tor}A"
${pm}prg3.c itemconfigure tmtor -text " ${mtor}A"

${pm}prg3.c itemconfigure torus -extent [expr $tor*359/4000]
${pm}prg3.c itemconfigure minitor -extent [expr $mtor*359/6000]
update
#-------------------------------------------------------------


set interr 0


set shot [lindex $adate 3]
set tth [lindex [split $shot :] 0]
set ttm [lindex [split $shot :] 1]
set tts [lindex [split $shot :] 2]
if {$tth == "00"} { set tth 0}
if {$tth == "01"} { set tth 1}
if {$tth == "02"} { set tth 2}
if {$tth == "03"} { set tth 3}
if {$tth == "04"} { set tth 4}
if {$tth == "05"} { set tth 5}
if {$tth == "06"} { set tth 6}
if {$tth == "07"} { set tth 7}
if {$tth == "08"} { set tth 8}
if {$tth == "09"} { set tth 9}

if {$ttm == "00"} { set ttm 0}
if {$ttm == "01"} { set ttm 1}
if {$ttm == "02"} { set ttm 2}
if {$ttm == "03"} { set ttm 3}
if {$ttm == "04"} { set ttm 4}
if {$ttm == "05"} { set ttm 5}
if {$ttm == "06"} { set ttm 6}
if {$ttm == "07"} { set ttm 7}
if {$ttm == "08"} { set ttm 8}
if {$ttm == "09"} { set ttm 9}

if {$tts == "00"} { set tts 0}
if {$tts == "01"} { set tts 1}
if {$tts == "02"} { set tts 2}
if {$tts == "03"} { set tts 3}
if {$tts == "04"} { set tts 4}
if {$tts == "05"} { set tts 5}
if {$tts == "06"} { set tts 6}
if {$tts == "07"} { set tts 7}
if {$tts == "08"} { set tts 8}
if {$tts == "09"} { set tts 9}

set ltime [expr $tth*3600+$ttm*60+$tts]
#puts $ltime

#----------- updating L2 information ------------------------
catch { set f [open ${clonparms}/scalers/archive/scalers_clasprod_0$runnumber.txt] } ercatch

set ress [ string first "couldn't open" $ercatch ]
if { $ress == 0 } {

  puts " Error opening scalers_clasprod_0$runnumber.txt file"
} else {
while {[gets $f line] >=0 } {
update
set type [lindex $line 0]
#puts $type
if { $type == "*TRGD00*"} {
update
gets $f line
set cl [lindex $line 0]
set clock [ expr 100000.0/$cl]
gets $f line
gets $f line
set clock_r  [lindex $line 0]
set fcup_r [lindex $line 1]
gets $f line
gets $f line
set clock_l  [lindex $line 0]
set fcup_l  [lindex $line 1]
# read one more line to get the duplicate scaler channel for live gated clock
#gets $f line
#set clock_l  [lindex $line 6]

#------ Count clock based live time--------
if { $clock_r > 0 } {
set grval1 [expr ($clock_l*1.0)/($clock_r*1.0) ]
} else {
set grval1 0
}
if { $fcup_r > 0 } {
set grval2 [expr ($fcup_l*1.0)/($fcup_r*1.0) ]
if { $grval2 > 1.5 } {
set grval2 0
}
} else {
set grval2 0
}
#----livepie update -----------------------
set lvclock [expr $grval1*100.0]
set lvrd [ expr $lvclock*359/100 ]
${pm}l1b3.c itemconfigure livepie -extent $lvrd
set lvdead [ expr int(100.0 - $lvclock) ]
${pm}l1b3.c itemconfigure livpinfo -text "$lvdead% deadtime"
set lvfcup [expr $grval2*100.0]
#puts $lvfcup
#puts "========== DEBUG for PIE ======"
#puts " $grval2 $fcup_r $fcup_l $lvfcup"
#-----------------------------------------

#-------------disk information update-------------------------
#catch { set dsk [ exec ssh ${cloner} df -k /raid ]  } result 
#set diskinfo [ lindex  $dsk 11 ]
#if { $diskinfo > 99 } { exec  cat /usr/local/clas/bin/a.au > /dev/audio }
set raid 1
set diskinfo 1
${pm}l1b3.c itemconfigure rfull -text "Raid is $diskinfo full"
#update
#set raid [ lindex [ split $diskinfo % ] 0 ]

set rd [ expr $raid*359/100 ]


${pm}l1b3.c itemconfigure disk -extent $rd
update
#--------------------------------------------------
#set fdzich 9262.0
set fdzich 7200.0
#---------- Count Fcup information -------
set fcupi [ expr $fcup_l/$fdzich ]
if { $clock_r >0 } {
set fcupone [ expr ($fcup_l*100000.0)/$clock_r ]
set fcupd [ expr $fcupone/$fdzich ]
#--------Update beam current info file for DCHV ---------------
set ff [open ${clonparms}/dchv/ibeam.txt w]
puts $ff $fcupd
close $ff
}
#--------------------------------------------------------------

gets $f line
gets $f line
#puts " Generated Level1 sector based info "
#puts "=========================="
for { set i 0} { $i < 6 } { incr i } {
set l1gen($i) [lindex $line $i]
#puts $l1gen($i)
}
gets $f line
#------------- Trigger based live time ------------
set orbit [lindex $line 4]
set interr [lindex $line 5]
if { $orbit > 0 } {
set prescal [ expr 100*(($interr*1.0)/($orbit*1.0)) ]
} else {
set prescal 0
}
#-------------------------------------------------
gets $f line
set fail [ lindex $line 0 ]
set pass [ lindex $line 1 ]
#puts " Pass and Fail"
#puts "==================="
#puts " $pass $fail "

}
if { $type == "*S1SD00*"} {
gets $f line
#puts $clock
#puts " Level1 sector based info "
#puts "=========================="
for { set i 0} { $i < 6 } { incr i } {
set l1($i) [lindex $line $i]
#puts $l1($i) 
}
gets $f line
gets $f line
#puts " Level2 sector based info "
#puts "=========================="
for { set i 0} { $i < 6 } { incr i } {
set j [ expr $i+1 ]
set l2($i) [lindex $line $j]
#puts  " $l2($i)"
}
}
}
close $f
for { set i 0} { $i < 6 } { incr i } {
if { $runstat != "GO"} {
set gl2($i) 0
set gl1($i) 0
set gl1gen($i) 0
} else {
set gl2($i) [ expr $l2($i) * $clock ]
set gl1($i) [ expr $l1($i) * $clock ]
set gl1gen($i) [ expr $l1gen($i) * $clock ]
}
}
for { set i 0} { $i < 6 } { incr i } {
if { $gl1gen($i) != 0 && $runstat == "GO"} {
set l1al1g($i) [ expr $gl1($i)/$gl1gen($i)*1.0 ] 
} else {
set l1al1g($i) 0
}
}

for { set i 0} { $i < 6 } { incr i } {
if { $l1($i) == 0 || $runstat != "GO"} {
set l2dl1($i) 0
} else { 
set l2dl1($i) [ expr $l2($i)/$l1($i)*1.0 ] 
#puts " ========  $l2dl1($i) $l2($i) $l1($i) "

}
}

if { $pass == 0 || $runstat != "GO"} { 
set pdf 0 
} else { 
set pdf [ expr ( $fail*1.0 )/( $pass*1.0 ) ] 
}
}
#puts " ============== $pdf  $fail $pass "
#----------- updating the word_counts ------------------------
catch { set f [open ${clonparms}/status/evstatmon.txt] } ercatch

set ress [ string first "couldn't open" $ercatch ]
if { $ress == 0 } {

puts " Error opening file evtstatmon.txt "
} else {

set tot4dc 0
for { set i 0} { $i < 6 } { incr i } {
set grvl($i) 0.0
set grvm($i) 0.0
set grvn($i) 0.0
}
while {[gets $f line] >=0 } {
update
set type [lindex $line 0]
if { $type == "*TIME*"} {
update
gets $f line
set unixtime [lindex $line 0]
#puts $unixtime
}
if { $type == "*BOCCUPS*"} {
update
gets $f line
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set boc_dc($i) [lindex $line 0]
set boc_ec($i) [lindex $line 1]
set boc_sc($i) [lindex $line 2]
set boc_cc($i) [lindex $line 3]
set boc_ec1($i) [lindex $line 4]
}
}
if { $type == "*EMEANS*" } {
update
gets $f line
gets $f line
for { set i 0} { $i < 6 } { incr i } {
gets $f line
set e_dc($i) [lindex $line 0]
set e_ec($i) [lindex $line 1]
set e_sc($i) [lindex $line 2]
set e_cc($i) [lindex $line 3]
set e_ec1($i) [lindex $line 4]
}
}
#if { $type == "*MSEC*" } {
#update
#gets $f line
#gets $f line
#gets $f line
#set msec1 [lindex $line 0]
#set msec2 [lindex $line 1]
#set msec3 [lindex $line 2]
#set msec4 [lindex $line 3]
#set msec5 [lindex $line 4]
#set msec6 [lindex $line 5]
#}
}
close $f
}
for { set i 0} { $i < 6 } { incr i } {
set tot4dc [ expr $e_dc($i) + $e_ec($i) + $e_sc($i) +$e_cc($i) +$e_ec1($i) ] 
 if { $tot4dc > 0 } {
set grvl($i) [ expr $e_dc($i)/$tot4dc ] 
set grvm($i) [ expr $e_ec($i)/$tot4dc ] 
set grvn($i) [ expr $e_sc($i)/$tot4dc ] 
#puts $tot4dc
}
}

#----------- drawing -------------------------------
if { $unixtime == $old_unixtime } {
for { set i 0} { $i < 6 } { incr i } {
set e_dc($i) 0
set e_ec($i) 0
set e_sc($i) 0
set e_cc($i) 0
set e_ec1($i) 0
}
}
set old_unixtime $unixtime
for { set i 0} { $i < 6 } { incr i } {
update
set vedro $e_dc($i)
if { $boc_dc($i) < $lolimit } {
	$graphbar11 element configure s${i} -fg blue
	} else { $graphbar11 element configure s${i} -fg green}
	$graphbar11 element configure s${i} -data { ${i} ${vedro} }

update
set vedro $e_ec($i)
if { $boc_ec($i) < $lolimit } {
	$graphbar12 element configure s${i} -fg blue
	} elseif { $boc_ec($i) > $uplimit } {
	$graphbar12 element configure s${i} -fg red
	} else { $graphbar12 element configure s${i} -fg green }
	$graphbar12 element configure s${i} -data { ${i} ${vedro} }

update
set vedro $e_sc($i)
if { $boc_sc($i) < $lolimit } {
	$graphbar13 element configure s${i} -fg blue
	} elseif { $boc_sc($i) > 1.0 } {
	$graphbar13 element configure s${i} -fg red
	} else { $graphbar13 element configure s${i} -fg green }
	$graphbar13 element configure s${i} -data { ${i} ${vedro} }

update
set vedro $e_cc($i)
if { $boc_cc($i) < $lolimit } {
	$graphbar14 element configure s${i} -fg blue
	} elseif { $boc_cc($i) > $uplimit } {
	$graphbar14 element configure s${i} -fg red
	} else { $graphbar14 element configure s${i} -fg green }
	$graphbar14 element configure s${i} -data { ${i} ${vedro} }

update
set vedro $e_ec1($i)
if { $boc_ec1($i) < $lolimit } {
	$graphbar15 element configure s${i} -fg blue
	} elseif { $boc_ec1($i) > $uplimit } {
	$graphbar15 element configure s${i} -fg red
	} else { $graphbar15 element configure s${i} -fg green }
	$graphbar15 element configure s${i} -data { ${i} ${vedro} }
}


#puts " $e_dc_max(1) $e_dc_min(1)"
#puts " AMMMMMMMMAN $grvl1 $grvl2 $grvl3 $grvl4 $grvl5 $grvl6 "


if { $runstat == "GO"} {

set l1audio 0
set l2audio 0
set l1l1audio 0
set l1l2audio 0
set genl1audio 0
set e_ec_audio 0
set e_dc_audio 0
set e_sc_audio 0
set grvl_audio 0
set grvm_audio 0
set grvn_audio 0


#-------- check the limits for level1 ---------------------------
for { set i 0} { $i < 6 } { incr i } {
if { $gl1($i) > $l1_max($i) || $gl1($i) < $l1_min($i) } { 
#puts " $gl1($i) $l1_max($i) $l1_max($i) "
$l2graph3 configure -bg red 
incr l1audio
set alarm(1) 1
set flash_trg(1) 1
} else { 
$l2graph3 configure -bg lightgray
set l1audio [ expr $l1audio - 1 ] 
set alarm(1) 0
set flash_trg(1) 0
}
}


#-------- check the limits for level2 pass/fail ---------------------------
if { $pdf > $pf_max || $pdf < $pf_min } { 
$l2graph4 configure -bg red 
set alarm(2) 1
set flash_trg(2) 1
} else { 
$l2graph4 configure -bg lightgray 
set alarm(2) 0
set flash_trg(2) 0
}

#-------- check the limits for level2 ---------------------------
for { set i 0} { $i < 6 } { incr i } {
if { $gl2($i) > $l2_max($i) || $gl2($i) < $l2_min($i) } { 
$l2graph1 configure -bg red 
incr l2audio
set alarm(3) 1
set flash_trg(3) 1
} else { 
$l2graph1 configure -bg lightgray 
set l2audio [ expr $l2audio -1 ]
set alarm(3) 0
set flash_trg(3) 0
}
}

#-------- check the limits for level2 ratio---------------------------
for { set i 0} { $i < 6 } { incr i } {
if { $l2dl1($i) > $l2l1_max($i) || $l2dl1($i) < $l2l1_min($i) } { 
$l2graph2 configure -bg red 
incr l1l2audio
set alarm(4) 1
set flash_trg(4) 1
} else { 
$l2graph2 configure -bg lightgray 
set l1l2audio [ expr $l1l2audio -1 ]
set alarm(4) 0
set flash_trg(4) 0
}
}

#-------- check the limits for generated level1 ---------------------------
for { set i 0} { $i < 6 } { incr i } {
if { $gl1gen($i) > $l1g_max($i) || $gl1gen($i) < $l1g_min($i) } { 
#puts " $gl1($i) $l1_max($i) $l1_max($i) "
$l2graph5 configure -bg red 
incr genl1audio
set alarm(5) 1
set flash_trg(5) 1
} else { 
$l2graph5 configure -bg lightgray 
set genl1audio [ expr $genl1audio - 1 ]
set alarm(5) 0
set flash_trg(5) 0
}
}

#-------- check the limits for accepted/generated level1 ---------------------------
for { set i 0} { $i < 6 } { incr i } {
if { $l1al1g($i) > $l1ag_max($i) || $l1al1g($i) < $l1ag_min($i) } { 
#puts ============== " $gl1($i) $l1_max($i) $l1_max($i) "
$l2graph6 configure -bg red 
incr l1l1audio
set alarm(6) 1
set flash_trg(6) 1
} else { 
$l2graph6 configure -bg lightgray 
set l1l1audio [ expr $l1l1audio -1 ]
set alarm(6) 0
set flash_trg(6) 0
}
}

#------------- check word count ------------------------
for { set i 0} { $i < 6 } { incr i } {
if { $e_dc($i) > $e_dc_max($i)  || $e_dc($i) < $e_dc_min($i) } { 
$graph configure -bg red
incr e_dc_audio 
set alarm(7) 1
set flash_wc(1) 1
} else { 
$graph configure -bg lightgray 
set e_dc_audio [ expr $e_dc_audio -1 ] 
set alarm(7) 0
set flash_wc(1) 0
}
}

for { set i 0} { $i < 6 } { incr i } {
if { $grvl($i) > $e_dc_clas_max($i) || $grvl($i) < $e_dc_clas_min($i) } {
 $graphDC configure -bg red 
incr grvl_audio
set alarm(8) 1
set flash_wc(2) 1
} else {
$graphDC configure -bg lightgray 
set grvl_audio [ expr $grvl_audio -1 ]
set alarm(8) 0
set flash_wc(2) 0
}
}

for { set i 0} { $i < 6 } { incr i } {
if { $e_ec($i) > $e_ec_max($i) || $e_ec($i) < $e_ec_min($i) } { 
$graph1 configure -bg red 
incr e_ec_audio
set alarm(9) 1
set flash_wc(3) 1
} else {
$graph1 configure -bg lightgray 
set e_ec_audio [ expr $e_ec_audio -1 ]
set alarm(9) 0
set flash_wc(3) 0
}
}

for { set i 0} { $i < 6 } { incr i } {
if { $grvm($i) > $e_ec_clas_max($i) || $grvm($i) < $e_ec_clas_min($i) } {
 $graph2 configure -bg red 
incr grvm_audio
set alarm(10) 1
set flash_wc(4) 1
} else { 
$graph2 configure -bg lightgray 
set grvm_audio [ expr $grvm_audio -1 ]
set alarm(10) 0
set flash_wc(4) 0
}
}

for { set i 0} { $i < 6 } { incr i } {
if { $e_sc($i) > $e_sc_max($i) || $e_sc($i) < $e_sc_min($i) } {
 $wgraph1 configure -bg red 
incr e_sc_audio
set alarm(11) 1
set flash_wc(5) 1
} else { 
$wgraph1 configure -bg lightgray 
set  e_sc_audio [ expr $e_sc_audio -1 ]
set alarm(11) 0
set flash_wc(5) 0
}
}

for { set i 0} { $i < 6 } { incr i } {
if { $grvn($i) > $e_sc_clas_max($i) || $grvn($i) < $e_sc_clas_min($i) } {
 $wgraph2 configure -bg red 
incr grvn_audio
set alarm(12) 1
set flash_wc(6) 1
} else {
 $wgraph2 configure -bg lightgray 
set  grvn_audio [ expr $grvn_audio -1 ]
set alarm(12) 0
set flash_wc(6) 0
}
}

#-------- flah alarm -------------------
set flashbut 0
for { set i 1} { $i < 7 } { incr i } {
if { $flash_trg($i) == 1 } { set flashbut 1}
}  
if { $flashbut == 1 } {
${m}run.l2 flash
${m}run.l2 configure -bg red
} else {
${m}run.l2 configure -bg lightgray
}


set flashbut 0
for { set i 1} { $i < 7 } { incr i } {
if { $flash_wc($i) == 1 } { set flashbut 1}  
}
if { $flashbut == 1 } {
${m}run.wc flash
${m}run.wc configure -bg red
} else {
${m}run.wc configure -bg lightgray
}


#---------- audio alarm ----------------
set sound 0

#for { set i 1} { $i < 13 } { incr i } {
#if { $alarm($i) == 1 } { set sound 1 }
#}
puts "==========================================="
puts $secalarm
puts " $l1audio $l2audio $l1l2audio $genl1audio $l1l1audio"
puts " $e_ec_audio $e_dc_audio $e_sc_audio  $grvl_audio  $grvm_audio  $grvn_audio"   
if { $l1audio > 0 && $l1audio < $secalarm } { set sound 1}
if { $l2audio > 0 && $l2audio < $secalarm } { set sound 1}
#if { $l1l2audio > 0 && $l1l2audio < $secalarm } { set sound 1}
if { $genl1audio > 0 && $genl1audio < $secalarm } { set sound 1}
#if { $l1l1audio > 0 && $l1l1audio < $secalarm } { set sound 1}
if { $e_ec_audio > 0 && $e_ec_audio < $secalarm } { set sound 1}
if { $e_dc_audio > 0 && $e_dc_audio < $secalarm } { set sound 1}
if { $e_sc_audio > 0 && $e_sc_audio < $secalarm } { set sound 1}
#if { $grvl_audio > 0 && $grvl_audio < $secalarm } { set sound 1}
#if { $grvm_audio > 0 && $grvm_audio < $secalarm } { set sound 1}
#if { $grvn_audio > 0 && $grvn_audio < $secalarm } { set sound 1}

puts "Sound = $sound"
if { $muffler <= 0 && $sound ==1 } {
puts "Audio Alarm"
#catch { exec door_bell } ercatch
set muffler 0
} else { set muffler [ expr $muffler -1 ] 
puts $muffler
}


} else {
$l2graph1 configure -bg lightgray  
$l2graph2 configure -bg lightgray  
$l2graph3 configure -bg lightgray  
$l2graph4 configure -bg lightgray  
$l2graph5 configure -bg lightgray  
$l2graph6 configure -bg lightgray  
$graph configure -bg lightgray  
$graphDC configure -bg lightgray  
$graph1 configure -bg lightgray  
$graph2 configure -bg lightgray  
$wgraph1 configure -bg lightgray 
$wgraph2 configure -bg lightgray 
}

tgraph $l2graph3 0 $ltime $gl1(0) 
tgraph $l2graph3 1 $ltime $gl1(1) 
tgraph $l2graph3 2 $ltime $gl1(2)  
tgraph $l2graph3 3 $ltime $gl1(3) 
tgraph $l2graph3 4 $ltime $gl1(4) 
tgraph $l2graph3 5 $ltime $gl1(5) 

tgraph $l2graph1 0 $ltime $gl2(0) 
tgraph $l2graph1 1 $ltime $gl2(1) 
tgraph $l2graph1 2 $ltime $gl2(2)  
tgraph $l2graph1 3 $ltime $gl2(3) 
tgraph $l2graph1 4 $ltime $gl2(4) 
tgraph $l2graph1 5 $ltime $gl2(5) 

tgraph $l2graph2 0 $ltime $l2dl1(0) 
tgraph $l2graph2 1 $ltime $l2dl1(1) 
tgraph $l2graph2 2 $ltime $l2dl1(2)  
tgraph $l2graph2 3 $ltime $l2dl1(3) 
tgraph $l2graph2 4 $ltime $l2dl1(4) 
tgraph $l2graph2 5 $ltime $l2dl1(5) 

tgraph $l2graph4 0 $ltime $pdf 

tgraph $l2graph5 0 $ltime $gl1gen(0) 
tgraph $l2graph5 1 $ltime $gl1gen(1) 
tgraph $l2graph5 2 $ltime $gl1gen(2)  
tgraph $l2graph5 3 $ltime $gl1gen(3) 
tgraph $l2graph5 4 $ltime $gl1gen(4) 
tgraph $l2graph5 5 $ltime $gl1gen(5) 

tgraph $l2graph6 0 $ltime $l1al1g(0) 
tgraph $l2graph6 1 $ltime $l1al1g(1) 
tgraph $l2graph6 2 $ltime $l1al1g(2)  
tgraph $l2graph6 3 $ltime $l1al1g(3) 
tgraph $l2graph6 4 $ltime $l1al1g(4) 
tgraph $l2graph6 5 $ltime $l1al1g(5) 


tgraph $graph 0 $ltime $e_dc(0) 
tgraph $graph 1 $ltime $e_dc(1) 
tgraph $graph 2 $ltime $e_dc(2)  
tgraph $graph 3 $ltime $e_dc(3) 
tgraph $graph 4 $ltime $e_dc(4) 
tgraph $graph 5 $ltime $e_dc(5) 

tgraph $graphDC 0 $ltime $grvl(0) 
tgraph $graphDC 1 $ltime $grvl(1) 
tgraph $graphDC 2 $ltime $grvl(2) 
tgraph $graphDC 3 $ltime $grvl(3) 
tgraph $graphDC 4 $ltime $grvl(4) 
tgraph $graphDC 5 $ltime $grvl(5) 

tgraph $graph1 0 $ltime $e_ec(0) 
tgraph $graph1 1 $ltime $e_ec(1) 
tgraph $graph1 2 $ltime $e_ec(2)  
tgraph $graph1 3 $ltime $e_ec(3) 
tgraph $graph1 4 $ltime $e_ec(4) 
tgraph $graph1 5 $ltime $e_ec(5) 

tgraph $graph2 0 $ltime $grvm(0) 
tgraph $graph2 1 $ltime $grvm(1) 
tgraph $graph2 2 $ltime $grvm(2) 
tgraph $graph2 3 $ltime $grvm(3) 
tgraph $graph2 4 $ltime $grvm(4) 
tgraph $graph2 5 $ltime $grvm(5) 

tgraph $wgraph1 0 $ltime $e_sc(0) 
tgraph $wgraph1 1 $ltime $e_sc(1) 
tgraph $wgraph1 2 $ltime $e_sc(2)  
tgraph $wgraph1 3 $ltime $e_sc(3) 
tgraph $wgraph1 4 $ltime $e_sc(4) 
tgraph $wgraph1 5 $ltime $e_sc(5) 

tgraph $wgraph2 0 $ltime $grvn(0) 
tgraph $wgraph2 1 $ltime $grvn(1) 
tgraph $wgraph2 2 $ltime $grvn(2) 
tgraph $wgraph2 3 $ltime $grvn(3) 
tgraph $wgraph2 4 $ltime $grvn(4) 
tgraph $wgraph2 5 $ltime $grvn(5) 
update

#-------------------------------------------------------------

#--------------end of the MAIN_LOOP --------------------------
for {set i 1} { $i<=100} { incr i} {
after 100
update
}
}
#========================== End of file ============================#








