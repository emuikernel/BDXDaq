C======================================================================
      SUBROUTINE sda_helix(stepp, vect, vout, F)
C----------------------------------------------------------------------
C-
C-   Purpose and Methods : Performes tracking of one step in a magnetic
C-                         field. The trajectory is assumed to be helix
C-                         in a constant field taken at the mid point of
C-                         the step. Units are kgauss,centimeters,gev/c.
C-
C-   Inputs  : vect -input vector {position,direction,p,m,Q}
C-
C-   Outputs : vout -same as vect after completion of the step
C-             F    -magnetic field of the step (mid step)
C-   Controls:
C-
C-   Library belongs: libsda.a
C-
C-   Calls: sda_snake, sda_torus
C-
C-   Author  : M.Hansroul
C-   Modified: S.Egli, S.V. Levonian & V. Perevoztichkov
C-             B. Niczyporuk on JUL 9,1993 (version GEANT315) 
C-
C-    Called by sda_swim
C-
C----------------------------------------------------------------------
      IMPLICIT NONE
C----------------------------------------------------------------------
C
      SAVE
C mgtyp, zmagn, ztarg
#include "sdakeys.inc"
C
      REAL stepp, vect(9), vout(9), F(3), Fpt(3)
C
C Local parameters
      INTEGER i, ix,iy,iz, ipx,ipy,ipz,ipp,im,iq, ifirst
      REAL xyz(3),H(4),HXP(3), sixth, econ, a1,a2,a3,a4,a5,a6
      REAL temx,FX,FY,H2XY,HP,RHO,TET,SINT,SINTT,TSINT,COS1T, ch
      REAL Cmax_t, Scale_t 
C
      PARAMETER (ix=1,iy=2,iz=3,ipx=4,ipy=5,ipz=6,ipp=7,im=8,iq=9)
      PARAMETER (sixth = 1./6.)
      PARAMETER (econ  = 2.9979251E-4)
      PARAMETER (Cmax_t = 3860.0)
C
      DATA ifirst/1/ 
      
C
C Rescale the Big Torus Field
      IF(ifirst.EQ.1) THEN
        ifirst= 0
        IF(mgtyp.EQ.1) Scale_t = zmagn(2)/Cmax_t
      ENDIF
C
C If neutral particle or no magnetic field trajectory is a straight line.
      ch = vect(9)
      IF(ch.EQ.0.) GO TO 10
C
C Get Magnetic Field (SNAKE or TORUS or UNIFORM or NONE)
C
C Find a mid point on the step for magnetic field retrieving.
      xyz(1) = vect(ix) + 0.5*stepp*vect(ipx)
      xyz(2) = vect(iy) + 0.5*stepp*vect(ipy)
      xyz(3) = vect(iz) + 0.5*stepp*vect(ipz)
C Go to DST coordinate system
      temx   = xyz(1)
      xyz(1) = xyz(2)
      xyz(2) = xyz(3)
      xyz(3) = temx
C
      IF(mgtyp.EQ.0) THEN
C Read Table generated by TORUS
        CALL sda_snake(xyz,F)
        IF(ABS(zmagn(4)).GT.0.) THEN
          xyz(1) = xyz(1) + 0.0
          xyz(2) = xyz(2) + 0.0
          xyz(3) = xyz(3) - ztarg(3)
          CALL sda_snake_pt(xyz,Fpt)
          xyz(3) = xyz(3) + ztarg(3)
**      if(xyz(3).LT.0.) Fpt(2) = 0.
c      write(*,123) xyz,F,Fpt
 123  format(9F7.3)
          F(1) = F(1) + Fpt(1)
          F(2) = F(2) + Fpt(2)
          F(3) = F(3) + Fpt(3)
        else
c      write(*,123) xyz,F,Fpt
        ENDIF
      ELSE IF(mgtyp.EQ.4) THEN
C Uniform magnetic field (simple test option)
        F(1) =  0.
        F(2) = -3.
        F(3) =  0.
      ELSE IF (mgtyp.EQ.5) THEN
C No magnetic field
        F(1) = 0.
        F(2) = 0.
        F(3) = 0.
      ELSE
C Calculate magnetic field (mgtyp = 1  i.e. Torus only)
        CALL sda_torus(xyz,F,mgtyp)
        F(1) = F(1)*Scale_t
        F(2) = F(2)*Scale_t
        F(3) = F(3)*Scale_t
      ENDIF
C
C Return Mag. Field in SDA Coordinate System
      FX   = F(1)
      FY   = F(2)
      F(1) = F(3)
      F(2) = FX
      F(3) = FY
C
C Trajectory propagation in a magnetic field
C
      H2XY = F(1)*F(1) + F(2)*F(2)
      H(4) = F(3)*F(3) + H2XY
      IF (H(4) .LE. 1.E-12) GO TO 10
      H(4) = SQRT(H(4))
      H(1) = F(1)/H(4)
      H(2) = F(2)/H(4)
      H(3) = F(3)/H(4)
      H(4) = H(4)*econ
C
      HXP(1) = H(2)*vect(ipz) - H(3)*vect(ipy)
      HXP(2) = H(3)*vect(ipx) - H(1)*vect(ipz)
      HXP(3) = H(1)*vect(ipy) - H(2)*vect(ipx)
C 
      HP = H(1)*vect(ipx) + H(2)*vect(ipy) + H(3)*vect(ipz)
      RHO = -ch*H(4)/vect(ipp)
      TET = RHO*stepp
      IF(ABS(TET).GT.0.15) THEN
         SINT  = SIN(TET)
         SINTT = (SINT/TET)
         TSINT = (TET-SINT)/TET
         COS1T = 2.*(SIN(0.5*TET))**2/TET
      ELSE
         TSINT = sixth*TET**2
         SINTT = (1. - TSINT)
         SINT  = TET*SINTT
         COS1T = 0.5*TET
      ENDIF
C
      a1 = stepp*SINTT
      a2 = stepp*COS1T
      a3 = stepp*TSINT*HP
      a4 =-TET*COS1T
      a5 = SINT
      a6 = TET*COS1T*HP
C 
      vout(ix)  = vect(ix)  + (a1*vect(ipx) + a2*HXP(1) + a3*H(1))
      vout(iy)  = vect(iy)  + (a1*vect(ipy) + a2*HXP(2) + a3*H(2))
      vout(iz)  = vect(iz)  + (a1*vect(ipz) + a2*HXP(3) + a3*H(3)) 
      vout(ipx) = vect(ipx) + (a4*vect(ipx) + a5*HXP(1) + a6*H(1))
      vout(ipy) = vect(ipy) + (a4*vect(ipy) + a5*HXP(2) + a6*H(2))
      vout(ipz) = vect(ipz) + (a4*vect(ipz) + a5*HXP(3) + a6*H(3)) 
      vout(ipp) = vect(ipp)
      vout(im ) = vect(im )
      vout(iq ) = vect(iq )
      GO TO 999
C
C Trajectory is a straight line ( no magnetic field or neutral particle)
C 
   10 CONTINUE
      vout(ipp) = vect(ipp)
      vout(im ) = vect(im )
      vout(iq ) = vect(iq )
      DO 20 i = 1,3
        vout(i)   = vect(i) + stepp*vect(i+3)
        vout(i+3) = vect(i+3)
   20 CONTINUE
C
  999 RETURN
      END
