#######################################################################
# Sample configuration file for the info_server.
#
# Demonstrates all the features of the info_server input/output
# stream handling.
#
# Comments in this file begin with a # and continue until the 
# end of the line.  They can appear anywhere in the file.
#
# The file is split into sections for input messages and output
# messages.  They do not need to be in any particular order.
# The format for input/output message descriptions is:
#
#  input <name>
#      <list of fields>
#  end
#
# output <name>
#      <list of fields>
# end
#
# where <name> is a character string containing no punctuation
# except "_" and "-" and no whitespace.
#
# <list of fields> is the list of descriptions of individual fields
# in the message, along with some control flags.  These will
# be discussed later.
#
# end is required keyword and marks the end of the current in/out
# message description.
######################################################################



#--------------------------------------------------
# Input stream with tagged input arrays.
#
# Use this kind of input when you have multiple arrays (and only
# arrays) in the input stream.  Each array must be preceded by an
# ascii tag which is the name following the "tagged" keyword.  The
# info_server will look for that tag in the input message and extract
# the corresponding data.  
#
# This is useful if you have large messages (i.e. the scaler event
# with all of the status banks) but you're only interested in 
# some of them.
# 
# Limitations:  If you use one tagged array in an input event, then
# you can *only* have tagged arrays in the input stream.  No 
# mix-and-match allowed.
#
# Format of the line:
#  tagged <tagname> <type>
# where:
# tagged - is the keyword
# <tagname> is the ascii string to search for in the input event.
#           (this is not case-sensitive)
# <type> - is either integer or floating, depending if the array
#          is integers or floats.
#-----------------------------------------------------
input dd2scaler
	tagged ECS_00 integer
	tagged SCS_00 integer
	tagged CCS_00 integer
	tagged TGS_00 integer
	tagged TRGS00 integer
	tagged S1ST00 integer
end


#-----------------------------------------------------
# A mixed input message.  Contains some single integers
# some single floats and an array of floating point
# numbers.
#
# By default, the input is assumed to arrive on the data group
# /info_server/in/door1
# unless you specify otherwise with the "datagroup" keyword.
#
# The parameters field1 and field2 are single integers.
# The parameter the_float is a single floating point number
# The parameter DataArray is an array of floats.
# The parameter SomeString is a character string.
#
# All of these fields will have the name of the input stream
# (door1) appended to the name of the field to uniquely identify
# it.  You must refer to the complete name in the output
# messages - e.g. to include field1 in an output message you would
# write "door1::field1"
#----------------------------------------------------
input door1
	integer field1
	integer field2
	floating the_float
	array DataArray floating
	string SomeString
end


#----------------------------------------------------
# This input message demonstrates the way to redirect
# the input from a different smartsockets data group.
#
# If we don't specify, the info_server will assume that
# the input message is arriving on the data group
# /info_server/in/wronganswer
# but if it is really arriving on the data group
# /some/where/else
# we need to specify this as:
# datagroup /some/where/else
#
# Whatever is specified on the datagroup line is taken
# literally.
#---------------------------------------------------
input wronganswer
	datagroup /some/where/else
	string the_string
	floating first_float
	floating second_float
	array int_array integer
end



#--------------------------------------------------
# This is what a scaler event should look like.
# There are several features here.  First, the scaler
# display expects to get it's information on the\
# datagroup scaler, so that's where we send it.
#
# Second, the first field in an output message should
# be an ascii string identifying the type of message
# (in this case "scaler").  The "literal" command
# inserts the string following it into the data stream
# verbatim.
#
# Finally, we refer to various fields of the dd2scaler
# input message to place them in the output.  Since
# we want all of them to be present, there are no
# other tricks needed.
#--------------------------------------------------
output scaler
	datagroup scaler
	literal "scaler"
	dd2scaler::ECS_00
	dd2scaler::SCS_00
	dd2scaler::CCS_00
	dd2scaler::TGS_00
	dd2scaler::TRGS00
	dd2scaler::S1ST00
end


#------------------------------------------------------
# This data stream is supposed to be built every 30 
# seconds.  Since the name of the output message is
# the same as the "info_server message type" we can simply
# use the "name" command instead of "literal timed" to
# put the name in as the first field of the message.
#
# We put the timeout x line in to specify how often
# the message should be built.
#------------------------------------------------------
output timed
	timeout 30
	name
	literal "Here We Are"
	door1::field1
	wronganswer::second_float

	# the next two lines insert the timestamps for
	# input streams "door1" and "wronganswer" at this
	# point in the message.
	timestamp door1
	timestamp wronganswer
end
 
#-------------------------------------------------
# This output message demonstrates the way to set
# fields to be ignored when determining if an output
# message needs to be built.  Normally, the output message
# will not be built unless all of the input fields have been
# updated *since* the last time this output message has been
# sent.
#
# Sometimes, you want to specify that the construction of
# the output message should not wait for a particular input
# field.  This can be done with the "ignore" keyword...
#-------------------------------------------------
output number2
	name
	literal "Another waste of bandwidth"
	wronganswer::int_array
	door1::DataArray

	# this line causes the door1::DataArray to be
	# ignored when determining if the message should
	# be built.
	ignore door1::DataArray
	literal "Thats all folks"
end
