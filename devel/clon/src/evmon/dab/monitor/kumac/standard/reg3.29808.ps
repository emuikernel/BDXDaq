%!PS-Adobe-2.0
%%Title: reg3.29808.ps (Portrait A 4)
%%Pages: (atend)
%%Creator: HIGZ Version 1.25/05
%%CreationDate: 2002/03/20   15.24
%%EndComments
%%BeginProlog
/s {stroke} def /l {lineto} def /m {moveto} def /t {translate} def
/sw {stringwidth} def /r {rotate} def /rl {roll}  def /R {repeat} def
/d {rlineto} def /rm {rmoveto} def /gr {grestore} def /f {eofill} def
/c {setrgbcolor} def /lw {setlinewidth} def /sd {setdash} def
/cl {closepath} def /sf {scalefont setfont} def /black {0 setgray} def
/box {m dup 0 exch d exch 0 d 0 exch neg d cl} def
/NC{systemdict begin initclip end}def/C{NC box clip newpath}def
/bl {box s} def /bf {box f} def /Y { 0 exch d} def /X { 0 d} def 
/mp {newpath /y exch def /x exch def} def
/side {[w .77 mul w .23 mul] .385 w mul sd w 0 l currentpoint t -144 r} def
/mr {mp x y w2 0 360 arc} def /m24 {mr s} def /m20 {mr f} def
/mb {mp x y w2 add m w2 neg 0 d 0 w neg d w 0 d 0 w d cl} def
/mt {mp x y w2 add m w2 neg w neg d w 0 d cl} def
/m21 {mb f} def /m25 {mb s} def /m22 {mt f} def /m26 {mt s} def
/m23 {mp x y w2 sub m w2 w d w neg 0 d cl f} def
/m27 {mp x y w2 add m w3 neg w2 neg d w3 w2 neg d w3  w2 d cl s} def
/m28 {mp x w2 sub y w2 sub w3 add m w3 0 d 0 w3 neg d w3 0 d 0 w3 d w3 0 d
 0 w3 d w3 neg 0 d 0 w3 d w3 neg 0 d
 0 w3 neg d w3 neg 0 d cl s } def
/m29 {mp gsave x w2 sub y w2 add w3 sub m currentpoint t
 4 {side} repeat cl fill gr} def
/m30 {mp gsave x w2 sub y w2 add w3 sub m currentpoint t
 5 {side} repeat s gr} def
/m31 {mp x y w2 sub m 0 w d x w2 sub y m w 0 d
 x w2 sub y w2 add m w w neg d x w2 sub y w2
 sub m w w d s} def
/m2 {mp x y w2 sub m 0 w d x w2 sub y m w 0 d s} def
/m5 {mp x w2 sub y w2 sub m w w d x w2 sub y w2 add m w w neg d s} def
/DP {/PT exch def gsave 47.2 47.2 scale PT 1  eq { 16 16 1 [ 16 0 0 16 neg 0 16
] { < AA AA 55 55 AA AA 55 55 AA AA 55 55 AA AA 55 55 AA AA 55 55 AA AA 55 55
AA AA 55 55 AA AA 55 55 > } image } if PT 2 eq { 16 16 1 [ 16 0 0 16 neg 0 16
] { < BB BB EE EE BB BB EE EE BB BB EE EE BB BB EE EE BB BB EE EE BB BB EE EE
BB BB EE EE BB BB EE EE > } image } if PT 3 eq { 16 16 1 [ 16 0 0 16 neg 0 16
] { < FF FF BB BB FF FF EE EE FF FF BB BB FF FF EE EE FF FF BB BB FF FF EE EE
FF FF BB BB FF FF EE EE > } image } if PT 4 eq { 16 16 1 [ 16 0 0 16 neg 0 16
] { < DF DF BF BF 7F 7F FE FE FD FD FB FB F7 F7 EF EF DF DF BF BF 7F 7F FE FE
FD FD FB FB F7 F7 EF EF > } image } if PT 5 eq { 16 16 1 [ 16 0 0 16 neg 0 16
] { < 7F 7F BF B F DF DF EF EF F7 F7 FB FB FD FD FE FE 7F 7F BF BF DF DF EF
EF F7 F7 FB FB FD FD FE FE > } image } if PT 6 eq { 16 16 1 [ 16 0 0 16 neg 0
16 ] { < BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB
BB BB BB BB BB BB BB BB BB > } image } if PT 7 eq { 16 16 1 [ 16 0 0 16 neg 0
16 ] { < FF FF FF FF FF FF 00 00 FF FF FF FF FF FF 00 00 FF FF FF FF FF FF 00
00 FF FF FF FF FF FF 00 00 > } image } if PT 8 eq { 16 16 1 [ 16 0 0 16 neg 0
16 ] { < EE EE 47 47 83 83 C5 C5 EE EE 5C 5C 38 38 74 74 EE EE 47 47 83 83 C5
C5 EE EE 5C 5C 38 38 74 74 > } image } if PT 9 eq { 16 16 1 [ 16 0 0 16 neg 0
16 ] { < EF EF EF EF D7 D7 38 38 FE FE FE FE 7D 7D 83 83 EF EF EF EF D7 D7 38
38  FE FE FE FE 7D 7D 83 83 > } image } if PT 10 eq { 16 16 1 [ 16 0 0 16 neg
0 16 ] { <  EF EF EF EF EF EF 00 00 FE FE FE FE FE FE 00 00 EF EF EF EF EF EF
00 00 FE FE FE FE FE FE 00 00 > } image } if PT 11 eq { 16 16 1 [ 16 0 0 16
neg 0 16 ] { < F7 F7 B6 B6 D5 D5 E3 E3 D5 D5 B6 B6 F7 F7 FF FF 7F 7F 6B 6B 5D
5D 3E 3E 5D 5D 6B 6B 7F 7F FF FF > } image } if PT 12 eq { 16 16 1 [ 16 0 0
16 neg 0 16 ] { < E3 E3 DD DD BE BE BE BE BE BE DD DD E3 E3 FF FF 3E 3E DD DD
EB EB EB EB EB EB DD DD 3E 3E FF FF > } image } if PT 13 eq { 16 16 1 [ 16 0
0 16 neg 0 16 ] { <  FE FE 7D 7D BB BB D7 D7 EF EF D7 D7 BB BB 7D 7D FE FE 7D
7D BB BB D7 D7 EF EF D7 D7 BB BB 7D 7D > } image } if PT 14 eq { 16 16 1 [ 16
0 0 16 neg 0 16 ] { < 00 00 EE EF EE EF EE EF 0E E0 EE EE EE EE EE EE 00 EE
FE EE FE EE FE EE 00 00 FE EF FE EF FE EF > } image } if PT 15 eq { 16 16 1 [
16 0 0 16 neg 0 16 ] { < DD DD AA AA DD DD FF FF 77 77 AA AA 77 77 FF FF DD
DD AA AA DD DD FF FF 77 77 AA AA 77 77 FF FF > } image } if PT 16 eq { 16 16
1 [ 16 0 0 16 neg 0 16 ] { <  F1 F1 EE EE 1F 1F FF FF F1 F1 EE EE 1F 1F FF FF
F1 F1 EE EE 1F 1F FF FF F1 F1 EE EE 1F 1F FF FF > } image } if PT 17 eq { 16
16 1 [ 16 0 0 16 neg 0 16 ] { <  EE EE DD DD BB BB FF FF EE EE DD DD BB BB FF
 FF EE EE DD DD BB BB FF FF EE EE DD DD BB BB FF FF > } image } if PT 18 eq {
16 16 1 [ 16 0 0 16 neg 0 16 ] { <  BB BB DD DD EE EE FF FF BB BB DD DD EE EE
FF FF BB BB DD DD EE EE FF FF BB BB DD DD EE EE FF FF > } image } if PT 19 eq
{ 16 16 1 [ 16 0 0 16 neg 0 16 ] { < 1F FC 67 F3 7B EF BD DE BD DE DE BD E6
B3 F8 0F E6 B3 DE BD BD DE BD DE 7B EF 67 F3 1F FC 7F FF > } image } if PT
20 eq { 16 16 1 [ 16 0 0 16 neg 0 16 ] { < DD DD EE EE EE EE EE EE DD DD BB
BB BB BB BB BB DD DD EE EE EE EE EE EE DD DD BB BB BB BB BB BB > } image }
if PT 21 eq { 16 16 1 [ 16 0 0 16 neg 0 16 ] { < 0E 0E EF EF EF EF EF EF E0
E0 FE FE FE FE FE FE 0E 0E EF EF EF EF EF EF E0 E0 FE FE FE FE FE FE > }
image }  if PT 22 eq { 16 16 1 [ 16 0 0 16 neg 0 16 ] { < 70 70 F7 F7 F7 F7 F7
F7 07 07 7F 7F 7F 7F 7F 7F 70 70 F7 F7 F7 F7 F7 F7 07 07 7F 7F 7F 7F 7F 7F >
} image } if PT 23 eq  { 16 16 1 [ 16 0 0 16 neg 0 16 ] { < AA AA 55 55 A9 A9
D1 D1 E1 E1 D1 D1 A9 A9 55 55 AA AA 55 55 A9 A9 D1 D1 E1 E1 D1 D1 A9 A9 55 55
> } image } if PT 24 eq { 16 16 1 [ 16 0 0 16 neg 0 16 ] { < FF FE FF FC EA
A8 D5 54 EA A8 D5 54 E8 28 D4 54 E8 E8 D4 D4 E8 EA 54 D5 A8 EA 54 D5 00 C0 00
80 > } image } if PT 25 eq {  16 16 1 [ 16 0 0 16 neg 0 16 ] { < FF FE FF FC
FF F8 FF F0 F0 00 F0 00 F0 20 F0 60 F0 E0 F1 E0 F3 E0 F0 00 E0 00 C0 00 80 00
00 00 > } image } if gr } def /FA { /PT exch def gsave clip 0 0 translate 1 1
74 { 1 sub 47.2 mul /Xcurr exch def 1 1 74 { 1 sub 47.2 mul /Ycurr exch def
gsave Xcurr Ycurr translate PT DP gr } for } for gr newpath } def
/reencdict 24 dict def /ReEncode {reencdict begin /nco&na exch def
/nfnam exch def /basefontname exch def /basefontdict basefontname findfont def
/newfont basefontdict maxlength dict def basefontdict {exch dup /FID ne
{dup /Encoding eq {exch dup length array copy newfont 3 1 roll put} {exch
newfont 3 1 roll put} ifelse} {pop pop} ifelse } forall newfont
/FontName nfnam put nco&na aload pop nco&na length 2 idiv {newfont
/Encoding get 3 1 roll put} repeat nfnam newfont definefont pop end } def
/accvec [ 176 /agrave 181 /Agrave 190 /acircumflex 192 /Acircumflex
201 /adieresis 204 /Adieresis 209 /ccedilla 210 /Ccedilla 211 /eacute
212 /Eacute 213 /egrave 214 /Egrave 215 /ecircumflex 216 /Ecircumflex
217 /edieresis 218 /Edieresis 219 /icircumflex 220 /Icircumflex
221 /idieresis 222 /Idieresis 223 /ntilde 224 /Ntilde 226 /ocircumflex
228 /Ocircumflex 229 /odieresis 230 /Odieresis 231 /ucircumflex 236 /Ucircumflex
237 /udieresis 238 /Udieresis 239 /aring 242 /Aring 243 /ydieresis
244 /Ydieresis 246 /aacute 247 /Aacute 252 /ugrave 253 /Ugrave] def
/Times-Roman /Times-Roman accvec ReEncode
/Times-Italic /Times-Italic accvec ReEncode
/Times-Bold /Times-Bold accvec ReEncode
/Times-BoldItalic /Times-BoldItalic accvec ReEncode
/Helvetica /Helvetica accvec ReEncode
/Helvetica-Oblique /Helvetica-Oblique accvec ReEncode
/Helvetica-Bold /Helvetica-Bold accvec ReEncode
/Helvetica-BoldOblique /Helvetica-BoldOblique  accvec ReEncode
/Courier /Courier accvec ReEncode
/Courier-Oblique /Courier-Oblique accvec ReEncode
/Courier-Bold /Courier-Bold accvec ReEncode
/Courier-BoldOblique /Courier-BoldOblique accvec ReEncode
/oshow {gsave [] 0 sd true charpath stroke gr} def
/stwn { /fs exch def /fn exch def /text exch def fn findfont fs sf
 text sw pop xs add /xs exch def} def
/stwb { /fs exch def /fn exch def /nbas exch def /textf exch def
textf length /tlen exch def nbas tlen gt {/nbas tlen def} if
fn findfont fs sf textf dup length nbas sub nbas getinterval sw
pop neg xs add /xs exch def} def
/accspe [ 65 /plusminus 66 /bar 67 /existential 68 /universal
69 /exclam 70 /numbersign 71 /greater 72 /question 73 /integral
74 /colon 75 /semicolon 76 /less 77 /bracketleft 78 /bracketright
79 /greaterequal 80 /braceleft 81 /braceright 82 /radical
83 /spade 84 /heart 85 /diamond 86 /club 87 /lessequal
88 /multiply 89 /percent 90 /infinity 48 /circlemultiply 49 /circleplus
50 /emptyset 51 /lozenge 52 /bullet 53 /arrowright 54 /arrowup
55 /arrowleft 56 /arrowdown 57 /arrowboth 48 /degree 44 /comma 43 /plus
 45 /angle 42 /angleleft 47 /divide 61 /notequal 40 /equivalence 41 /second
 97 /approxequal 98 /congruent 99 /perpendicular 100 /partialdiff 101 /florin
 102 /intersection 103 /union 104 /propersuperset 105 /reflexsuperset
 106 /notsubset 107 /propersubset 108 /reflexsubset 109 /element 110 /notelement
 111 /gradient 112 /logicaland 113 /logicalor 114 /arrowdblboth
 115 /arrowdblleft 116 /arrowdblup 117 /arrowdblright 118 /arrowdbldown
 119 /ampersand 120 /omega1 121 /similar 122 /aleph ] def
/Symbol /Special accspe ReEncode
/Zone {/iy exch def /ix exch def  ix 1 sub  2224 mul  1 iy sub  3144
 mul t} def
%%EndProlog
 gsave  20 28 t .25 .25 scale  gsave 
%%Page: number 1
 gr 
showpage
 gr 
%%Trailer
%%Pages: 1
%%EOF
