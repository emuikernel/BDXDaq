/*
	A basic extension of the java.awt.Frame class
 */

package clonjava;

import java.awt.*;
import java.util.Vector;
import symantec.itools.awt.BorderPanel;
public class Systems extends Frame
{   private MyItemListener myItemListener = new MyItemListener();
    private Alarm alarm;
    public Checkbox[] cb = null; 
    private int numCheckboxItems;
    
	public Systems(Alarm parent)
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(new GridLayout(1,1,0,0));
		setVisible(false);
		setSize(429,270);
		setFont(new Font("Serif", Font.BOLD, 14));
		setBackground(new Color(12632256));
		borderPanel1 = new symantec.itools.awt.BorderPanel();
		try {
			borderPanel1.setBevelStyle(symantec.itools.awt.BorderPanel.BEVEL_LOWERED);
		}
		catch(java.beans.PropertyVetoException e) { }
		borderPanel1.setLayout(new GridLayout(10,1,0,0));
		borderPanel1.setBounds(0,0,429,270);
		add(borderPanel1);
		setTitle("Systems");
		alarm = parent;
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		
		
		
		//}}
	}
    public void addNewCheckbox(String name, int i){
    Checkbox temp = new Checkbox(name);
    temp.setState(true);
    temp.addItemListener(myItemListener);
    borderPanel1.add(temp);
    cb[i] = temp;
    numCheckboxItems ++;
    
    }
	
	

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	symantec.itools.awt.BorderPanel borderPanel1;
	//}}

	//{{DECLARE_MENUS
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == Systems.this)
				Frame1_WindowClosing(event);
		}
	}
	
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}

class MyItemListener implements java.awt.event.ItemListener
	{
            		
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{   
		  
		   java.awt.Checkbox x = (java.awt.Checkbox)event.getSource();
           
           System.out.println(x.getLabel());
           System.out.println(x.getState());
           System.out.println("Action");
           alarm.setQuery();
           alarm.isDefaultMode();
        }
        
    }
}