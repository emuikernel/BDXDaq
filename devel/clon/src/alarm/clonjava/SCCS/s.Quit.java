h16393
s 00000/00000/00000
d R 1.2 03/10/03 15:30:50 Codemgr 2 1
c SunPro Code Manager data about conflicts, renames, etc...
c Name history : 1 0 alarm_browser/s/Quit.java
e
s 00134/00000/00000
d D 1.1 03/10/03 15:30:49 wolin 1 0
c date and time created 03/10/03 15:30:49 by wolin
e
u
U
f e 0
t
T
I 1
/*
	A basic extension of the java.awt.Frame class
 */

import java.awt.*;

public class Quit extends Frame
{   private Alarm alarm;
	public Quit()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(287,107);
		setFont(new Font("Serif", Font.BOLD, 14));
		setBackground(new Color(16711680));
		label1 = new java.awt.Label("Quit the Alarm Browser?",Label.CENTER);
		label1.setBounds(29,12,228,36);
		add(label1);
		yes = new java.awt.Button();
		yes.setLabel("Yes");
		yes.setBounds(60,60,78,24);
		yes.setBackground(new Color(12632256));
		add(yes);
		no = new java.awt.Button();
		no.setLabel("No");
		no.setBounds(156,60,78,24);
		no.setBackground(new Color(12632256));
		add(no);
		setTitle("Quit?");
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		yes.addActionListener(lSymAction);
		no.addActionListener(lSymAction);
		//}}
	}

	public Quit(Alarm parent)
	{
		this();
		alarm = parent;
		
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new Quit()).setVisible(true);
	}
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Label label1;
	java.awt.Button yes;
	java.awt.Button no;
	//}}

	//{{DECLARE_MENUS
	//}}
    class SymAction implements java.awt.event.ActionListener{
	 public void actionPerformed(java.awt.event.ActionEvent e){
	    
	    Object object = e.getSource();
	    if (object == yes){
	        alarm.dispose();
	    }else if (object == no){
	        dispose();
	    }
	 }
	}
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == Quit.this)
				Frame1_WindowClosing(event);
		}
	}
	
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}
}
E 1
