/* HelpTextWindow.java */

package clonjava;

import java.awt.*;

import symantec.itools.awt.WrappingLabel;

public class HelpTextWindow extends Frame
{   private Alarm parent;
	public HelpTextWindow()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(451,287);
		setFont(new Font("Serif", Font.BOLD, 14));
		setBackground(new Color(-2293831));
		helpText = new symantec.itools.awt.WrappingLabel();
		try {
			helpText.setText("To display a particular alarm by state (Error,Warning,OK) or by system (online,epics...etc) click the \"Display\" menu item then select from \"Alarms\" or \"Systems\". To return to default mode selesct Display->Set Defaults.");
		}
		catch(java.beans.PropertyVetoException e) { }
		helpText.setBounds(12,156,428,84);
		add(helpText);
		dismiss = new java.awt.Button();
		dismiss.setLabel("OK");
		dismiss.setBounds(144,252,156,26);
		dismiss.setBackground(new Color(12632256));
		add(dismiss);
		wrappingLabel1 = new symantec.itools.awt.WrappingLabel();
		try {
			wrappingLabel1.setText("The Alarm Browser will beep if there are unacknowledged alarms. To acknowledge an alarm DOUBLE CLICK on the row with the alarm (red). This will bring up the help window. To acknowledge the alarm click on the \"Acknowledge\" button. The acknowledged alarms will appear orange and in lowercase text.");
		}
		catch(java.beans.PropertyVetoException e) { }
		wrappingLabel1.setBounds(12,12,428,120);
		add(wrappingLabel1);
		setTitle("Alarm Help");
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		dismiss.addActionListener(lSymAction);
		//}}
	}
    public synchronized void setHelpText(String s){
       try{ helpText.setText(s);
       }catch(Exception e){System.out.println(e);}
    }
	public HelpTextWindow(Alarm a)
	{
		this();
		parent = a;
		
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new HelpTextWindow()).setVisible(true);
	}
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	symantec.itools.awt.WrappingLabel helpText;
	java.awt.Button dismiss;
	symantec.itools.awt.WrappingLabel wrappingLabel1;
	//}}

	//{{DECLARE_MENUS
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == HelpTextWindow.this)
				Frame1_WindowClosing(event);
		}
	}
	class SymAction implements java.awt.event.ActionListener{
	 public void actionPerformed(java.awt.event.ActionEvent e){
	    
	    Object object = e.getSource();
	    if (object == dismiss){
	        dispose();
	    }
	 }
	}
	
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}
}
