/*
	A basic extension of the java.awt.Frame class
 */

package clonjava;

import java.awt.*;
import java.sql.*;
import jclass.table.JCTableComponent;
import symantec.itools.awt.BorderPanel;
import symantec.itools.awt.StatusBar;
import java.util.Date;
import jclass.table.*;
import java.util.Vector;
import clonjava.clon.ipcutil.*;
import com.smartsockets.*;


public class Alarm extends Frame
{
    public boolean beep;
    public Beeper beeper = new Beeper();
    public boolean activity = false;
	private Connection con;
	private Statement stmt;
	private ResultSet rs;
	private int numRows;
	public Date now = new Date();
        private MyThread myThread = new MyThread(this);             // for beeping
        private TimerThread myTimerThread = new TimerThread(this);  // for resetting defaults
	
	private MyItemListener myItemListener = new MyItemListener();
	private int numCheckboxItems = 0;

	//Vector that holds the errors
	private Vector errorVector = new Vector();
	private Vector warningVector = new Vector();
	private Vector okVector = new Vector();
	Systems systems = new Systems(this);

	public Alarm(String driver,String url,String database,
            String username,String password, boolean b, String project, String uniq_name)
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
System.out.println("Alarm 1");
		setLayout(new GridLayout(1,1,0,0));
		setVisible(false);
		setSize(929,390);
		setFont(new Font("Serif", Font.BOLD, 14));
		setBackground(new Color(12632256));
		panel2 = new java.awt.Panel();
		GridBagLayout gridBagLayout;
		gridBagLayout = new GridBagLayout();
		panel2.setLayout(gridBagLayout);
		//		panel2.setBounds(0,0,929,390);
		panel2.setBounds(30,30,929,390);
		add(panel2);
		alarmTable = new jclass.table.JCTableComponent();
		alarmTable.setAllowCellResize(jclass.table.JCTblEnum.RESIZE_NONE);
		alarmTable.setDisplayClipArrows(false);
		alarmTable.setColumnLabelsList(jclass.util.JCUtilConverter.toStringList("Status,Time,System,Message,Help_ID,ID"));
		alarmTable.setNumRows(0);
		alarmTable.setSelectionPolicy(jclass.table.JCTblEnum.SELECT_SINGLE);
		alarmTable.setRowLabelsList(jclass.util.JCUtilConverter.toStringList(""));
		alarmTable.setCharWidthSeries("(all 10)(0 8)(1 15)(2 10)(3 60)(4 5)");
		alarmTable.setShadowThickness(0);
		alarmTable.setHorizSBAttachment(jclass.table.JCTblEnum.ATTACH_SIDE);
		alarmTable.setFrameShadowThickness(1);
		alarmTable.setEditableSeries("(all all false)");
		alarmTable.setMode(jclass.table.JCTblEnum.MODE_LIST);
		alarmTable.setVertSBAttachment(jclass.table.JCTblEnum.ATTACH_SIDE);
		alarmTable.setTraversableSeries("(all all false)");
		alarmTable.setSelectedForeground(new java.awt.Color(12632256));
		alarmTable.setNumColumns(6);
		alarmTable.setBounds(16,35,913,335);
		GridBagConstraints gbc;
System.out.println("Alarm 2");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(13,16,0,0);
		gbc.ipadx = -631;
		gbc.ipady = 202;
		((GridBagLayout)panel2.getLayout()).setConstraints(alarmTable, gbc);
		panel2.add(alarmTable);
		panel4 = new java.awt.Panel();
		panel4.setLayout(null);
		//		panel4.setBounds(12,370,10,10);
		panel4.setBounds(12,370,888,40);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0,12,0,0);
		((GridBagLayout)panel2.getLayout()).setConstraints(panel4, gbc);
		panel2.add(panel4);
		alarmLabel2 = new java.awt.Label("Alarm State",Label.CENTER);
		alarmLabel2.setBounds(12,12,888,40);
		alarmLabel2.setBackground(new Color(65280));
		panel4.add(alarmLabel2);
		panel1 = new java.awt.Panel();
		panel1.setLayout(null);
		//		panel1.setBounds(12,380,917,10);
		panel1.setBounds(12,380,917,40);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.gridwidth = 3;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0,12,0,0);
		((GridBagLayout)panel2.getLayout()).setConstraints(panel1, gbc);
		panel2.add(panel1);
		statusBar2 = new symantec.itools.awt.StatusBar();
System.out.println("Alarm 3");
		try {
			statusBar2.setBevelStyle(symantec.itools.awt.StatusBar.BEVEL_LOWERED);
		}
		catch(java.beans.PropertyVetoException e) { }
		statusBar2.setBounds(624,6,288,40);
		panel1.add(statusBar2);
		statusBar1 = new symantec.itools.awt.StatusBar();
		try {
			statusBar1.setBevelStyle(symantec.itools.awt.StatusBar.BEVEL_LOWERED);
		}
		catch(java.beans.PropertyVetoException e) { }
		statusBar1.setBounds(12,6,612,40);
		panel1.add(statusBar1);
		okButton = new java.awt.Button();
		okButton.setLabel("button");
		okButton.setVisible(false);
		okButton.setBounds(403,37,14,16);
		okButton.setBackground(new Color(12632256));
		panel1.add(okButton);
		setWarningButton = new java.awt.Button();
		setWarningButton.setLabel("setWarningButton");
		setWarningButton.setVisible(false);
		setWarningButton.setBounds(439,37,14,16);
		setWarningButton.setBackground(new Color(12632256));
		panel1.add(setWarningButton);
		setErrorButton = new java.awt.Button();
		setErrorButton.setLabel("button");
		setErrorButton.setVisible(false);
		setErrorButton.setBounds(463,37,14,16);
		setErrorButton.setBackground(new Color(12632256));
		panel1.add(setErrorButton);
		panel3 = new java.awt.Panel();
		panel3.setLayout(null);
		panel3.setBounds(12,12,888,40);
		//		panel3.setBounds(12,12,10,10);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(12,12,0,0);
		((GridBagLayout)panel2.getLayout()).setConstraints(panel3, gbc);
		panel2.add(panel3);
		alarmLabel1 = new java.awt.Label("Alarm State",Label.CENTER);
		alarmLabel1.setBounds(4,11,896,40);
		alarmLabel1.setBackground(new Color(65280));
		panel3.add(alarmLabel1);
System.out.println("Alarm 4");
		setTitle("Alarm Browser 2.0");
		//}}

		//{{INIT_MENUS
		menuBar1 = new java.awt.MenuBar();
		fileMenu = new java.awt.Menu("File");
		exitMenuItem = new java.awt.MenuItem("Shutdown Alarm Browser");
		fileMenu.add(exitMenuItem);
		menuBar1.add(fileMenu);
		displayMenuItem = new java.awt.Menu("Display");
		alarmMenuItem = new java.awt.Menu("Alarms");
		error = new java.awt.CheckboxMenuItem("Error State");
		error.setState(true);
		alarmMenuItem.add(error);
		warning = new java.awt.CheckboxMenuItem("Warning State");
		warning.setState(true);
		alarmMenuItem.add(warning);
		ok = new java.awt.CheckboxMenuItem("OK State");
		ok.setState(false);
		alarmMenuItem.add(ok);
		displayMenuItem.add(alarmMenuItem);
		systemMenuItem = new java.awt.MenuItem("Systems");
		displayMenuItem.add(systemMenuItem);
		displayMenuItem.addSeparator();
		defaultMenuItem = new java.awt.MenuItem("Set Defaults");
		displayMenuItem.add(defaultMenuItem);
		menuBar1.add(displayMenuItem);
		helpMenu = new java.awt.Menu("Help");
		menuBar1.setHelpMenu(helpMenu);
		helpMenuItem = new java.awt.MenuItem("Alarm Help");
		helpMenu.add(helpMenuItem);
		menuBar1.add(helpMenu);
		audioMenu = new java.awt.Menu("Audio");
		audioMenuItem = new java.awt.MenuItem("Disable Beep (1Hour)");
		audioMenu.add(audioMenuItem);
		menuBar1.add(audioMenu);
		setMenuBar(menuBar1);
		//$$ menuBar1.move(12,12);
		//}}

		//{{REGISTER_LISTENERS
System.out.println("Alarm 5");
		SymWindow aSymWindow = new SymWindow();
		MyMouseAdapter myMouseAdapter = new MyMouseAdapter();
		this.addMouseMotionListener(myMouseAdapter);
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		MyTableListener mtl = new MyTableListener();
		alarmTable.addSelectListener(mtl);
		defaultMenuItem.addActionListener(lSymAction);
		exitMenuItem.addActionListener(lSymAction);
		systemMenuItem.addActionListener(lSymAction);
		audioMenuItem.addActionListener(lSymAction);
		error.addItemListener(myItemListener);
		warning.addItemListener(myItemListener);
		ok.addItemListener(myItemListener);
		helpMenuItem.addActionListener(lSymAction);
		setErrorButton.addActionListener(lSymAction);
		setWarningButton.addActionListener(lSymAction);
		okButton.addActionListener(lSymAction);
		//}}
System.out.println("Alarm 6");


            // for ipc monitoring of alarm browser
	    try {
System.out.println("Alarm 61");
		ipc_init.set_project(project);
System.out.println("Alarm 62");
		ipc_init.set_server_names("clondb1,clondb2,clon10,clon00");
System.out.println("Alarm 63");
System.out.println("uniq_name = " + uniq_name);
		//ipc_init.init(null,"alarm browser");
		ipc_init.init(uniq_name,"alarm browser");
System.out.println("Alarm 64");
	    } catch (Exception e) {
System.out.println("Alarm 65");
	      Tut.exitFailure(e.toString());
System.out.println("Alarm 66");
	    }
System.out.println("Alarm 7");

	    beep = b;

// connect DB
System.out.println("Connecting to DB ..");
	    connectDB(driver,url,database,username,password);

	    loadSystemTypes();
	    loadDefaults();
	    myThread.start();
	    myTimerThread.start();
	    //This sets the selection bar to null in the table
	    alarmTable.setSelectedBackground(null);
	    alarmTable.setSelectedForeground(null);

	}

	//public method for setting statusBar2 text
	public void setStatus2(String s)
	  {
	    try{ statusBar2.setStatusText(s);
	    }catch(Exception e){};

	  }

	//=======================================================
	//public method for setting statusBar2 text
	//=======================================================
	public void setStatus1(String s){
	    try{ statusBar1.setStatusText(s);
	       }catch(Exception e){};
	}

	//=========================================================
	//   This method loads system types on browser start up
	//=========================================================
	public void loadSystemTypes(){
	try{
	    stmt = con.createStatement();
        //find out how many systems there are to init array
        rs = stmt.executeQuery("select count(distinct system) from clonalarm");
        rs.next();
        numCheckboxItems = rs.getInt(1);
        //init array of checkboxes in Systems frame
        systems.cb = new Checkbox[numCheckboxItems];

        //get the systems
        rs = stmt.executeQuery("select DISTINCT system from clonalarm");
        rs.next();
        //load them into the systems frame
        for(int i = 0; i < numCheckboxItems; i++){
             systems.addNewCheckbox(rs.getString(1),i);
             rs.next();
        }
       	  }catch(Exception e){System.out.println(e);}
	}

	//=========================================================
	//   This method loads the help frame
	//   int i is the variable passed from the listener
	//   method. it is the help_id
	//=========================================================

	public synchronized void loadHelp(int i){

	try{ //get the help id from the table
	     String j = (String)alarmTable.getCell(i, 4);
	     Statement s = con.createStatement();
	     //get the help text from database
     	 ResultSet r = s.executeQuery("select help_text from clonalarm_help where help_id =" + j);
	     r.next();
	     if( ((String)alarmTable.getCell(i,0)).equals("ERROR") || ((String)alarmTable.getCell(i,0)).equals("error")){
	          for(int p=0; p<errorVector.size(); p++){
	             if( ((MyErrorClass)errorVector.elementAt(p)).system.equals((String)alarmTable.getCell(i, 2))
	               && (new Integer(((MyErrorClass)errorVector.elementAt(p)).alarmID).toString()).equals((String)alarmTable.getCell(i, 5)) ){
	             ((MyErrorClass)errorVector.elementAt(p)).tableRow = i;
	             (new HelpWindow(this,r.getString("help_text"),(MyErrorClass)errorVector.elementAt(p))).setVisible(true);
	             System.out.println(((MyErrorClass)errorVector.elementAt(p)).tableRow);
	             }
	          }
	     }
	     if( ((String)alarmTable.getCell(i,0)).equals("WARNING")){
	          for(int p=0; p<warningVector.size(); p++){
	             if( ((MyErrorClass)warningVector.elementAt(p)).system.equals((String)alarmTable.getCell(i, 2))
	               && (new Integer(((MyErrorClass)warningVector.elementAt(p)).alarmID).toString()).equals((String)alarmTable.getCell(i, 5)) ){

	             (new HelpWindow(this,r.getString("help_text"),(MyErrorClass)warningVector.elementAt(p))).setVisible(true);

	             }
	          }
	     }
	     if( ((String)alarmTable.getCell(i,0)).equals("OK")){
	          for(int p=0; p<okVector.size(); p++){
	             if( ((MyErrorClass)okVector.elementAt(p)).system.equals((String)alarmTable.getCell(i, 2))
	               && (new Integer(((MyErrorClass)okVector.elementAt(p)).alarmID).toString()).equals((String)alarmTable.getCell(i, 5)) ){

	             (new HelpWindow(this,r.getString("help_text"),(MyErrorClass)okVector.elementAt(p))).setVisible(true);

	             }
	          }
	     }
	     //set the help text
	     //helpWindow.setHelpText(r.getString("help_text"));
    	 /*con.commit();*/
    	 s.close();
	     r.close();
	   }catch(Exception e){System.out.println(e);}

	}
	//=========================================================
	//   This method sets new errors for debug purposes ONLY
	//=========================================================

	private void setNewErrors(String status)
	{try{
	    Statement statement = con.createStatement();
	    statement.executeUpdate("update clonalarm set alarm_status =" + status + " where system ='test'");
	    statement.close();
	    /*con.commit();*/
	}catch (Exception e){System.out.println(e);}
	}

    //=========================================================
	//   This method is ran to establish a connection to ingres
	//=========================================================
public synchronized void connectDB(String driver,String url,String database,String username,String password){
		String param1 = url+database;
        try{
             System.out.println("driver: "+ driver);
             Class.forName(driver);
			
             System.out.println("param1,username,password: " + param1 + " " + username + " " + password);
             con = DriverManager.getConnection(param1,username,password);

             /*works
             String par1 = "jdbc:mysql://clondb1:3306/clasprod";
             String par2 = "clasrun";
             String par3 = "";
			 System.out.println(par1+","+par2+","+par3);
             con = DriverManager.getConnection(par1,par2,par3);
             */

             //works
             //con = DriverManager.getConnection("jdbc:mysql://clondb1:3306/clasprod","clasrun","");

             System.out.println("done");
           }catch(Exception e){System.out.println(e);}
    }


    //=========================================================
	//   This method is ran on every thread, on startup,
	//   and any action. It does the query, loading, and parsing
	//   for the table. It is 90% of the program and is syncronized
	//   because MANY threads will be using it!
    //=========================================================

    public synchronized void setQuery(){
        try{
        // init variables
        String selectString = "select * from clonalarm  ";
        Vector v = new Vector();
        Vector okTemp= new Vector();
        Vector warningTemp = new Vector();
        // booleans for determining query string
        // status is (ERROR,WARNING,OK)
        //Strings for table data
        //these are for JClass LiveTable

        // determines which status table is at 0,1,2
        int statusNum = 0;
        int rowNum = 0;
        // gets the statusNum (0,1,2)

        stmt = con.createStatement();
        rs = stmt.executeQuery("select * from clonalarm");
        statusNum = 0;
        //Find the highest alarm status. That is what will determine
        //the state of the Alarm Browser
        while(rs.next())
        {
//System.out.println("1 " + statusNum);
            if(statusNum < rs.getInt("alarm_status"))
            {
              statusNum = rs.getInt("alarm_status");

//System.out.println("2 " + statusNum);

            }
            else
            {
//System.out.println("3 " + statusNum + " " + rs.getInt("alarm_status"));
            }
        }
//System.out.println("4");
        rs = stmt.executeQuery("select * from clonalarm");
        while(rs.next())
        {
             MyErrorClass error = new MyErrorClass();
             error.helpID = rs.getInt("help_id");
             error.alarmStatus = 2;
             error.timeSet = now;
             error.system= rs.getString("system");
             error.alarmID = rs.getInt("alarm_id");
             error.message = rs.getString("alarm_text");
             error.dateText = rs.getString("alarm_time");
             if(rs.getInt("alarm_status") == 2){

                if(errorVector.size() >= 1){
                  for(int i=0; i<errorVector.size();i++){
                     if((error.system.equals(((MyErrorClass)errorVector.elementAt(i)).system))
                       && (error.alarmID == ((MyErrorClass)errorVector.elementAt(i)).alarmID))
                       {
                        error.errorExisted = true;
                        ((MyErrorClass)errorVector.elementAt(i)).errorExisted=true;
                        v.addElement((MyErrorClass)errorVector.elementAt(i));
                       }
                  }
                }else{
                  error.errorExisted=false;
                }

                if(!error.errorExisted){
                 v.addElement(error);
                }
             }
           if(rs.getInt("alarm_status") == 1){
                error.ack = true;
                if(warningVector.size() >= 1){
                  for(int i=0; i<warningVector.size();i++){
                     if((error.system.equals(((MyErrorClass)warningVector.elementAt(i)).system))
                       && (error.alarmID == ((MyErrorClass)warningVector.elementAt(i)).alarmID))
                       {
                        error.errorExisted = true;
                        ((MyErrorClass)warningVector.elementAt(i)).errorExisted=true;
                        warningTemp.addElement((MyErrorClass)warningVector.elementAt(i));
                       }
                  }
                }else{
                  error.errorExisted=false;
                }

                if(!error.errorExisted){
                 warningTemp.addElement(error);
                }
             }
             if(rs.getInt("alarm_status") == 0){
                error.ack = true;
                if(errorVector.size() >= 1){
                  for(int i=0; i<errorVector.size();i++){
                     if((error.system.equals(((MyErrorClass)okVector.elementAt(i)).system))
                       && (error.alarmID == ((MyErrorClass)okVector.elementAt(i)).alarmID))
                       {
                        error.errorExisted = true;
                        ((MyErrorClass)okVector.elementAt(i)).errorExisted=true;
                        okTemp.addElement((MyErrorClass)okVector.elementAt(i));
                       }
                  }
                }else{
                  error.errorExisted=false;
                }

                if(!error.errorExisted){
                 okTemp.addElement(error);
                }
             }

            //GOOD TO HERE
            rowNum++;
        }
//System.out.println("5");
        //always commit!
        /*con.commit();*/
        stmt.close();
        if(statusNum ==2){
            int ackErrors =0;
            for(int i =0; i< v.size(); i++){
                if( ((MyErrorClass)v.elementAt(i)).ack == true){
                    ackErrors++;
                }
            }
            if(ackErrors == v.size()){
//System.out.println("6");
                alarmLabel1.setForeground(Color.black);
                alarmLabel2.setForeground(Color.black);
                alarmLabel1.setText("All Errors Acknowledged");
                alarmLabel2.setText("All Errors Acknowledged");
//Sergey                alarmLabel1.setVisible(false);
                alarmLabel1.setBackground( Color.orange);
                alarmLabel1.setVisible(true);
//Sergey                alarmLabel2.setVisible(false);
                alarmLabel2.setBackground( Color.orange);
                alarmLabel2.setVisible(true);
            }else{
//System.out.println("7");
                alarmLabel1.setForeground(Color.white);
                alarmLabel2.setForeground(Color.white);
                alarmLabel1.setText("There Are Unacknowledged Errors!");
                alarmLabel2.setText("There Are Unacknowledged Errors!");

//Sergey                alarmLabel1.setVisible(false);
                alarmLabel1.setBackground( Color.red);
                alarmLabel1.setVisible(true);

//Sergey                alarmLabel2.setVisible(false);
                alarmLabel2.setBackground( Color.red);
                alarmLabel2.setVisible(true);
            }

         }else if (statusNum ==  1){
//System.out.println("8");
              alarmLabel1.setForeground(Color.black);
              alarmLabel2.setForeground(Color.black);
              alarmLabel1.setText("There are WARNINGS!");
              alarmLabel2.setText("There are WARNINGS!");
//Sergey              alarmLabel1.setVisible(false);
              alarmLabel1.setBackground( Color.yellow);
              alarmLabel1.setVisible(true);
//Sergey              alarmLabel2.setVisible(false);
              alarmLabel2.setBackground( Color.yellow);
              alarmLabel2.setVisible(true);

        }else if (statusNum == 0){
//System.out.println("9");
              //Set the text forground to black (white for errors)
              alarmLabel1.setForeground(Color.black);
              alarmLabel2.setForeground(Color.black);
              //set the labels to OK
              alarmLabel1.setText("OK");
              alarmLabel2.setText("OK");
              //This is done to stop blinking(drawing,redrawing)
//Sergey               alarmLabel1.setVisible(false);
              alarmLabel1.setBackground(new Color(000150000));
             alarmLabel1.setVisible(true);
             //same for this label
//Sergey              alarmLabel2.setVisible(false);
             alarmLabel2.setBackground(new Color(000150000));
             alarmLabel2.setVisible(true);
        }

       /*
       if (!(systemFields)) {
            row = "( | | | | | )";
            setStatus1("No Systems Selected!");
            alarmTable.setCellValues(row);
            return;
        }

      */
        warningVector = warningTemp;
        okVector = okTemp;
        errorVector = v;
        loadTable();
      }catch(Exception e){System.out.println(e);}

    }

    //=============================================================
	//   This method will load the data from the vectors into the
	//   table
	//=============================================================

        public void loadTable(){
            String row = "";
            int numRows=0;
            String dlm = "|";
            String status ="ERROR";
            String color = "(allcells allcells lightGrey)";
            if((errorVector.size() == 0) && (warningVector.size() > 0)){
                warning.setState(true);
            }
            if(error.getState() && (errorVector.size() > 0)){
              for(int i=0; i<errorVector.size();i++){
                 for(int p =0; p< systems.cb.length; p++){
                   if( (((MyErrorClass)errorVector.elementAt(i)).system).equals(systems.cb[p].getLabel()) ){
                       if(systems.cb[p].getState()){
                         if(((MyErrorClass)errorVector.elementAt(i)).ack){
                           status = "error";
                           alarmTable.setForeground(numRows, 0, Color.black);
                           alarmTable.setBackground(numRows, 0, Color.orange);
                         }else{
                           status = "ERROR";
                           alarmTable.setForeground(numRows, 0, Color.white);
                           alarmTable.setBackground(numRows, 0, Color.red);
                         }

                         row += "(" + status + dlm
                             +  ((MyErrorClass)errorVector.elementAt(i)).dateText + dlm
                             +  ((MyErrorClass)errorVector.elementAt(i)).system + dlm
                             +  delim(((MyErrorClass)errorVector.elementAt(i)).message)  + dlm
                             +  ((MyErrorClass)errorVector.elementAt(i)).helpID + dlm
                             +  ((MyErrorClass)errorVector.elementAt(i)).alarmID+ ")";
                             numRows++;
                       }
                   }
                 }
              }
            }
            if(warning.getState() && (warningVector.size()>0)){
              for(int i=0; i<warningVector.size();i++){
                for(int p =0; p< systems.cb.length; p++){
                   if( (((MyErrorClass)warningVector.elementAt(i)).system).equals(systems.cb[p].getLabel()) ){
                       if(systems.cb[p].getState()){
                          row += "(" + "WARNING" + dlm
                              +  ((MyErrorClass)warningVector.elementAt(i)).dateText + dlm
                              +  ((MyErrorClass)warningVector.elementAt(i)).system + dlm
                              +  delim(((MyErrorClass)warningVector.elementAt(i)).message)  + dlm
                              +  ((MyErrorClass)warningVector.elementAt(i)).helpID + dlm
                              +  ((MyErrorClass)warningVector.elementAt(i)).alarmID+ ")";
                              alarmTable.setForeground(numRows, 0, Color.black);
                              alarmTable.setBackground(numRows, 0, Color.yellow);
                              numRows++;
                       }
                   }
                }
              }
            }
            if(ok.getState() && (okVector.size()>0)){
              for(int i=0; i<okVector.size();i++){
                for(int p =0; p< systems.cb.length; p++){

                   if( (((MyErrorClass)okVector.elementAt(i)).system).equals(systems.cb[p].getLabel()) ){
                       if(systems.cb[p].getState()){
                          row += "(" + "OK" + dlm
                              +  ((MyErrorClass)okVector.elementAt(i)).dateText + dlm
                              +  ((MyErrorClass)okVector.elementAt(i)).system + dlm
                              +  delim(((MyErrorClass)okVector.elementAt(i)).message)  + dlm
                              +  ((MyErrorClass)okVector.elementAt(i)).helpID + dlm
                              +  ((MyErrorClass)okVector.elementAt(i)).alarmID+ ")";
                              alarmTable.setForeground(numRows, 0, Color.black);
                              alarmTable.setBackground(numRows, 0, new Color(000150000));
                              numRows++;
                       }
                   }
                }
              }
            }
            /*if(ok.getState() && (okVector.size() >0)){
              for(int i=0; i<okVector.size();i++){
                row += "(" + "OK" + dlm
                    +  " " + dlm
                    +  ((MyErrorClass)okVector.elementAt(i)).system + dlm
                    +  delim(((MyErrorClass)okVector.elementAt(i)).message)  + dlm
                    +  ((MyErrorClass)okVector.elementAt(i)).helpID + dlm
                    +  ((MyErrorClass)okVector.elementAt(i)).alarmID+ ")";
                    alarmTable.setForeground(numRows, 0, Color.black);
                    alarmTable.setBackground(numRows, 0, new Color(000150000));
                    numRows++;
              }
            }*/

         if (numRows == 0){
             row = "( | | | | | )";
             numRows = 1;
             alarmTable.setBackground(0,0, Color.lightGray);
         }
         alarmTable.setNumRows(numRows);
         //set the cell values
         alarmTable.setCellValues(row);


        }
    //=============================================================
	//   This method will handle the beeping for alarms that are
	//   new
	//        (depricated 12-7-1998)
	//=============================================================

        public synchronized void beepNewAlarms(){
            for(int i=0; i<errorVector.size(); i++){
                if(!((MyErrorClass)errorVector.elementAt(i)).errorExisted){
                   /* System.out.println("Beep, Beep Beep! There are new Errors");
                    (java.awt.Toolkit.getDefaultToolkit()).beep();
                    Thread.sleep(300);
                    (java.awt.Toolkit.getDefaultToolkit()).beep();
                    Thread.sleep(300);
                    (java.awt.Toolkit.getDefaultToolkit()).beep();*/
                    return;
                 }
            }

        }
    //=============================================================
	//   This method will handle the beeping for alarms that have
	//   not been acknowledged. This method is ran from the Timer
	//   thread.
	//=============================================================

       public synchronized void beepAckAlarms(){
        Date timeSet = new Date();

        for(int i=0; i<errorVector.size(); i++){
                if( timeSet.getTime()- (((MyErrorClass)errorVector.elementAt(i)).timeSet.getTime() ) > 3600000){
                    ((MyErrorClass)errorVector.elementAt(i)).ack = false;
                }
                if(!((MyErrorClass)errorVector.elementAt(i)).ack){
                   try{


                        if((beep) && (beeper.beepState)){
                            setStatus1("You need to acknowledge alarms! (Double click on row)");
                            System.out.println("Beep, Beep Beep! You need to Acknowledge Alarms!");
                            (java.awt.Toolkit.getDefaultToolkit()).beep();
                            Thread.sleep(300);
                            (java.awt.Toolkit.getDefaultToolkit()).beep();
                            Thread.sleep(300);
                            (java.awt.Toolkit.getDefaultToolkit()).beep();
                            Thread.sleep(300);
                        }
                        if((timeSet.getTime() - (beeper.beepStopDate).getTime()) > 3600000){
                            beeper.beepState = true;
                            setStatus1("Audio Reset To Default");
                        }
                   }catch(Exception e){System.out.println(e);}
                    return;
                 }
            }

        }
    //=============================================================
	//   This method will set the alarm to an acknowledged state
	//=============================================================

    public void AcknowledgeAlarm(String system, int id,int rowNum){
    int numErrors =0;
    Date timeSet = new Date();
    if(errorVector.size() >= 1){
      for(int i=0; i<errorVector.size(); i++){

                if( (system.equals(((MyErrorClass)errorVector.elementAt(i)).system))
                       && (id == ((MyErrorClass)errorVector.elementAt(i)).alarmID) )
                {
                     ((MyErrorClass)errorVector.elementAt(i)).timeSet = timeSet;
                     ((MyErrorClass)errorVector.elementAt(i)).ack = true;
                    setStatus1("You have acknowledged "
                                +((MyErrorClass)errorVector.elementAt(i)).system);
                    alarmTable.setForeground(rowNum, 0, Color.black);
                    alarmTable.setBackground(rowNum, 0, Color.orange);
                    alarmTable.setCell(rowNum,0,"error");

                 }
            }
        for(int i=0; i<errorVector.size(); i++){
            if(((MyErrorClass)errorVector.elementAt(i)).ack == true){
                numErrors++;
            }
        }
        if(numErrors == errorVector.size()){
            alarmLabel1.setForeground(Color.black);
            alarmLabel2.setForeground(Color.black);

            //set the labels to OK
            alarmLabel1.setText("All Errors Acknowledged");
            alarmLabel2.setText("All Errors Acknowledged");
            //This is done to stop blinking(drawing,redrawing)
//Sergey            alarmLabel1.setVisible(false);
            alarmLabel1.setBackground(Color.orange);
            alarmLabel1.setVisible(true);
            //same for this label
//Sergey            alarmLabel2.setVisible(false);
            alarmLabel2.setBackground(Color.orange);
            alarmLabel2.setVisible(true);
        }


    }
    }
    //=============================================================
	//   This method removes ( and ) that the table will not except
	//=============================================================
    public String delim(String s){
       StringBuffer filter = new StringBuffer(s);
	    int i = 0;

	    for(i=0; i <= filter.length() - 1;i++){
	        if ((filter.charAt(i) == '(' ) || (filter.charAt(i) == ')' ) ){
	            filter.setCharAt(i, '\'');

            i++;
	        }
         }
	    return (filter.toString());
	}
	//=============================================================
	//   This method stops the beeping for 1hour
	//=============================================================
	public void beepStop(){

	    beeper.beepStopDate = now;
	    beeper.beepState = false;
	    setStatus1("Beeping Turned Off for 1 Hour...");
	}

    //=========================================================
	//   This method sets the default states of the checkboxes
	//=========================================================
    public synchronized void loadDefaults(){
        error.setState(true);
        warning.setState(true);
        ok.setState(false);
        for(int i = 0; i < numCheckboxItems; i++){
            systems.cb[i].setState(true);
        }
        setQuery();
        setStatus1("Default Mode...");
        
    }

    //=========================================================
	//   overides the dispose in java.awt.Frame
	//=========================================================
    public synchronized void dispose(){
        myThread.stop();
        super.dispose();
        System.exit(0);
    }
    //=========================================================
	//   Sends the quit frame (yes,no?)
	//=========================================================
    public synchronized void quit(){
      Quit q =new Quit(this);
      q.setVisible(true);
      q.setLocation(400,400);

    }
    //=========================================================
	//   determines if the frame is in default mode
	//=========================================================
    public void isDefaultMode(){
        for(int i =0; i < numCheckboxItems; i++){
            if(!(systems.cb[i].getState())){
              setStatus1("Not in Default Mode! Browser will reset in 5 minutes if idle.");
            }
        }
    }
    //=========================================================
	//   gets the help for this table NOT for alarms
	//=========================================================
    public void getHelp(){
      HelpTextWindow h = new HelpTextWindow(this);
      h.setVisible(true);
      h.setLocation(400,400);
    }
	//=========================================================
	//   constructor
	//=========================================================


    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
		  setLocation(100,100);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{

	}

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Panel panel2;
	jclass.table.JCTableComponent alarmTable;
	java.awt.Panel panel4;
	java.awt.Label alarmLabel2;
	java.awt.Panel panel1;
	symantec.itools.awt.StatusBar statusBar2;
	symantec.itools.awt.StatusBar statusBar1;
	java.awt.Button okButton;
	java.awt.Button setWarningButton;
	java.awt.Button setErrorButton;
	java.awt.Panel panel3;
	java.awt.Label alarmLabel1;
	//}}

	//{{DECLARE_MENUS
	java.awt.MenuBar menuBar1;
	java.awt.Menu fileMenu;
	java.awt.MenuItem exitMenuItem;
	java.awt.Menu displayMenuItem;
	java.awt.Menu alarmMenuItem;
	java.awt.CheckboxMenuItem error;
	java.awt.CheckboxMenuItem warning;
	java.awt.CheckboxMenuItem ok;
	java.awt.MenuItem systemMenuItem;
	java.awt.MenuItem defaultMenuItem;
	java.awt.Menu helpMenu;
	java.awt.MenuItem helpMenuItem;
	java.awt.Menu audioMenu;
	java.awt.MenuItem audioMenuItem;
	//}}

    //=========================================================
	//   These are all my listeners!!
	//=========================================================
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{   now = new Date();
			Object object = event.getSource();
			if (object == Alarm.this)
				Frame1_WindowClosing(event);

		}
	}

	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		dispose();		 // hide the Frame
	}

class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
		    now = new Date();
			Object object = event.getSource();
			 if (object == defaultMenuItem){
			    loadDefaults();
			 }else if (object == exitMenuItem)
			   quit();
			 else if (object == helpMenuItem)
			  getHelp();
			  else if(object == systemMenuItem)
			  systems.setVisible(true);
			  else if(object == audioMenuItem)
			  beepStop();
			  else if(object == setErrorButton)
			  setNewErrors("2");
			  else if(object == setWarningButton)
			  setNewErrors("1");
			  else if(object == okButton)
			  setNewErrors("0");

        }
	}

	class MyTableListener implements JCSelectListener{

        public void selectEnd(JCSelectEvent e){
           now = new Date();
           alarmTable.setSelectedBackground(null);
	       alarmTable.setSelectedForeground(null);
           if (e.getEvent().clickCount  >1){
            loadHelp(e.getRow());
           }
        }
        public void selectBegin(JCSelectEvent e){
         alarmTable.setSelectedBackground(Color.black);
	    alarmTable.setSelectedForeground(Color.white);
        }
    }

class MyItemListener implements java.awt.event.ItemListener
	{

		public void itemStateChanged(java.awt.event.ItemEvent event)
		{

		    now = new Date();
		    isDefaultMode();
		    setQuery();

        }
    }
class MyMouseAdapter extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent e){

        }
        public void mouseDragged(java.awt.event.MouseEvent e){
        now = new Date();
        }
    }

}
