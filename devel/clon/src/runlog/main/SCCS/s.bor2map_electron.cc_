h64066
s 00009/00009/00208
d D 1.11 00/12/05 17:30:17 wolin 13 12
c New CC
e
s 00000/00000/00217
d D 1.10 00/12/05 16:55:46 wolin 12 11
i 10
c Accepted child's version in workspace "/usr/local/clas/devel/source".
c 
e
s 00001/00001/00216
d D 1.9 00/12/05 15:14:18 wolin 11 9
c torus_current
e
s 00001/00001/00216
d D 1.8.1.1 00/12/05 15:11:18 wolin 10 9
c torus_current
e
s 00006/00006/00211
d D 1.8 00/09/08 13:16:45 wolin 9 8
c New clon_root
e
s 00002/00002/00215
d D 1.7 99/11/02 10:19:41 wolin 8 7
c Rename
e
s 00008/00009/00209
d D 1.6 99/11/01 16:46:30 wolin 7 6
c Added pair_spec
e
s 00001/00001/00217
d D 1.5 98/05/07 17:14:40 clasrun 6 5
c Epics name typo
c 
e
s 00001/00001/00217
d D 1.4 98/03/30 17:23:33 wolin 5 4
c Switched from set to readback
c 
e
s 00001/00001/00217
d D 1.3 98/02/13 12:45:32 wolin 4 3
c Typo in map file name
c 
e
s 00006/00002/00212
d D 1.2 98/02/11 17:27:54 wolin 3 1
c Added debug output
c 
e
s 00000/00000/00000
d R 1.2 98/02/11 17:25:32 Codemgr 2 1
c SunPro Code Manager data about conflicts, renames, etc...
c Name history : 1 0 run_log/s/bor2map_electron.cc
e
s 00214/00000/00000
d D 1.1 98/02/11 17:25:31 wolin 1 0
c 
e
u
U
f e 0
t
T
I 1
//
D 8
//  bor2map
E 8
I 8
//  bor2map_electron
E 8
//
D 8
//  collects and inserts bor scaler info into map
E 8
I 8
//  collects and inserts bor scaler info into map for electron run
E 8
//
//  ejw, 11-feb-98


// for posix
#define _POSIX_SOURCE_ 1
#define __EXTENSIONS__


// system stuff
#include <iostream.h>
#include <fstream.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>


// for cdev
#include <cdev.h>
#include <cdevData.h>
#include <cdevDevice.h>
#include <cdevRequestObject.h>
#include <cdevSystem.h>


// file names
D 4
static char *mapmgr_file_name = "/usr/local/clas/parms/Maps/RUN_CONTROL.map";
E 4
I 4
D 9
static char *mapmgr_file_name = "parms/Maps/RUN_CONTROL.map";
E 9
I 9
D 13
static char *mapmgr_file_name = "Maps/RUN_CONTROL.map";
E 13
I 13
static char *mapmgr_file_name = (char*)"Maps/RUN_CONTROL.map";
E 13
E 9
E 4


// misc
int run           	      = 0;
static char *session          = getenv("DD_NAME");
D 13
static char *msql_database    = "clasrun";
E 13
I 13
static char *msql_database    = (char*)"clasrun";
E 13
int debug         	      = 0;        
static int cdev_pend_time     = 3;   
static char line[500];


D 7
static char *db_name[] = {
  "beam_energy", "torus_current", "mini_current", "tagger_current",
};
E 7
D 13
static char *epics_chan[] = {
E 13
I 13
static const char *epics_chan[] = {
E 13
D 5
  "MBSY2C_energy", "hallb_sf_xy560_0_5", "MTSETI", "TMSETI",
E 5
I 5
D 6
  "MBSY2C_energy", "hallb_sf_xy560_0_5", "MTIRDBK", "TMIRDBK",
E 6
I 6
D 10
D 11
  "MBSY2C_energy", "hallb_sf_xy560_0_5", "MTIRBCK", "TMIRBCK",
E 10
I 10
  "MBSY2C_energy", "torus_current", "MTIRBCK", "TMIRBCK",
E 10
E 11
I 11
  "MBSY2C_energy", "torus_current", "MTIRBCK", "TMIRBCK",
E 11
E 6
E 5
};
static float epics_val[sizeof(epics_chan)/sizeof(char *)];
static int ncallback = 0;
static int nepics    = sizeof(epics_chan)/sizeof(char *);
cdevRequestObject *obj[sizeof(epics_chan)/sizeof(char *)];
cdevCallback *cb[sizeof(epics_chan)/sizeof(char *)];


// prototypes
void decode_command_line(int argc, char **argv);
void get_epics_data(void);
void epics_callback_func(int status, void *userarg, cdevRequestObject &epics_req_obj,
			    cdevData& result);
D 13
char *env_name(char *env, char *name);
E 13
I 13
char *env_name(const char *env, const char *name);
E 13
extern "C" {
D 13
int get_run_number(char *msql_database, char *session);
E 13
I 13
int get_run_number(const char *msql_database, const char *session);
E 13
int map_put_float(const char filename[], const char subsystemname[],
		  const char itemname[], int arraylength,
		  const float farray[], int firsttime);
}


// ref to cdev system object
cdevSystem &cdevsys = cdevSystem::defaultSystem ();


//---------------------------------------------------------------------------


main(int argc,char **argv){


  // decode command line
  decode_command_line(argc,argv);


  // check session
D 13
  if(session==NULL)session="clasprod";
E 13
I 13
  if(session==NULL)session=(char*)"clasprod";
E 13


  // get run number
  run=get_run_number(msql_database,session);


  // only print cdev error messages
  cdevsys.setThreshold(CDEV_SEVERITY_ERROR);


  // create epics callbacks and wait for data cdev_pend_time seconds
  get_epics_data();


D 3


E 3
I 3
  // insert into map
E 3
  if(debug==0){
D 7
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"beam"    ,"energy"   ,1,&epics_val[0], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","torus"    ,1,&epics_val[1], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","minitorus",1,&epics_val[2], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","tagger"   ,1,&epics_val[3], run);
E 7
I 7
    float zero=0.0;
D 9
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"beam"    ,"energy"   , 1,&epics_val[0], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","torus"    , 1,&epics_val[1], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","minitorus", 1,&epics_val[2], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","pair_spec", 1,&zero        , run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","tagger"   , 1,&epics_val[3], run);
E 9
I 9
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"beam"    ,"energy"   , 1,&epics_val[0], run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","torus"    , 1,&epics_val[1], run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","minitorus", 1,&epics_val[2], run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","pair_spec", 1,&zero        , run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","tagger"   , 1,&epics_val[3], run);
E 9
E 7
I 3
  } else {
D 7
    cout << "\n\nbeam,torus,mini,tagger are: " << epics_val[0] << " " << epics_val[1] << " "
	 << epics_val[2] << " " << epics_val[3] << endl << endl;
E 7
I 7
    cout << "\n\nbeam,torus,mini,pair_spec,tagger are: " << epics_val[0] << " " << epics_val[1] << " "
	 << epics_val[2] << " " << 0.0 << " " << epics_val[3] << endl << endl;
E 7
E 3
  }

I 3

  // done
E 3
  exit(EXIT_SUCCESS);
}


//---------------------------------------------------------------------------


void get_epics_data(){

  cdevGroup group;
  int i;


  // count number of callbacks received
  ncallback=0;


  // create request objects and callbacks
  for(i=0; i<nepics; i++){
    epics_val[i]=-1.0;
D 13
    obj[i] = cdevRequestObject::attachPtr(epics_chan[i],"get");
E 13
I 13
    obj[i] = cdevRequestObject::attachPtr((char*)epics_chan[i],(char*)"get");
E 13
    cb[i] = new cdevCallback(epics_callback_func,(void*)i);
  }


  // get results in one group
  group.start();
  for(i=0; i<nepics; i++){
    if(obj[i]!=NULL)obj[i]->sendCallback(NULL,*cb[i]);
  }


  // process group of callbacks
  group.pend((double)cdev_pend_time);

  
  // check if all callbacks received
  if(ncallback<nepics){
    cerr << "?only received " << ncallback << " callbacks" << " out of " << nepics << endl;
  }

  return;
}


//---------------------------------------------------------------------------


void epics_callback_func(int status, void *userarg, cdevRequestObject &epics_req_obj,
			    cdevData& result){

  ncallback++;
  epics_val[(int)userarg] = (float) result;

  return;
}


//---------------------------------------------------------------------------


void decode_command_line(int argc, char **argv) {

D 13
  char *help="\nusage:\n\n  bor2map [-c cdev_pend_time] [-debug]\n\n\n";
E 13
I 13
  const char *help="\nusage:\n\n  bor2map [-c cdev_pend_time] [-debug]\n\n\n";
E 13
  int i = 1;


  while(i<argc) {
    
    if(strncasecmp(argv[i],"-h",2)==0){
      printf(help);
      exit(EXIT_SUCCESS);
    }
    else if (strncasecmp(argv[i],"-debug",6)==0){
      debug=1;
      i=i+1;
    }
    else if (strncasecmp(argv[i],"-c",2)==0){
      cdev_pend_time=atoi(argv[i+1]);
      i=i+2;
    }
  }
}


//-------------------------------------------------------------------------


D 13
char *env_name(char *env, char *name) {
E 13
I 13
char *env_name(const char *env, const char *name) {
E 13

  static char bigname[200];
  char *e=getenv(env);

  if(e!=NULL) {
    strcpy(bigname,e);
    strcat(bigname,"/");
    strcat(bigname,name);
  } else {
    strcpy(bigname,name);
  }
  
  return(bigname);
}


//---------------------------------------------------------------------
E 1
