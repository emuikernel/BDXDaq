h23792
s 00001/00001/00216
d D 1.9 00/12/05 17:32:07 wolin 11 10
c New CC
e
s 00008/00008/00209
d D 1.8 00/12/05 17:31:12 wolin 10 9
c New CC
e
s 00000/00000/00217
d D 1.7 00/12/05 16:55:48 wolin 9 7
i 8
c Accepted child's version in workspace "/usr/local/clas/devel/source".
c 
e
s 00001/00001/00216
d D 1.5.1.1 00/12/05 15:11:11 wolin 8 6
c torus_current
e
s 00001/00001/00216
d D 1.6 00/12/05 15:14:39 wolin 7 6
c torus_current
e
s 00006/00006/00211
d D 1.5 00/09/08 13:17:08 wolin 6 5
c New clon_root
e
s 00004/00002/00213
d D 1.4 99/11/01 16:46:12 wolin 5 4
c Added minitorus
e
s 00001/00001/00214
d D 1.3 99/11/01 16:03:30 wolin 4 3
c Typo
e
s 00004/00004/00211
d D 1.2 99/11/01 16:00:42 wolin 3 1
c pair_spec is correct name
e
s 00000/00000/00000
d R 1.2 99/11/01 15:33:17 Codemgr 2 1
c SunPro Code Manager data about conflicts, renames, etc...
c Name history : 1 0 run_log/s/bor2map_photon.cc
e
s 00215/00000/00000
d D 1.1 99/11/01 15:33:16 wolin 1 0
c 
e
u
U
f e 0
t
T
I 1
//
//  bor2map_photon
//
//  collects and inserts bor scaler info into map for photon runs
//
//  ejw, 1-nov-99


// for posix
#define _POSIX_SOURCE_ 1
#define __EXTENSIONS__


// system stuff
#include <iostream.h>
#include <fstream.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>


// for cdev
#include <cdev.h>
#include <cdevData.h>
#include <cdevDevice.h>
#include <cdevRequestObject.h>
#include <cdevSystem.h>


// file names
D 6
static char *mapmgr_file_name = "parms/Maps/RUN_CONTROL.map";
E 6
I 6
D 10
static char *mapmgr_file_name = "Maps/RUN_CONTROL.map";
E 10
I 10
static char *mapmgr_file_name = (char*)"Maps/RUN_CONTROL.map";
E 10
E 6


// misc
int run           	      = 0;
static char *session          = getenv("DD_NAME");
D 10
static char *msql_database    = "clasrun";
E 10
I 10
static char *msql_database    = (char*)"clasrun";
E 10
int debug         	      = 0;        
static int cdev_pend_time     = 3;   
static char line[500];


D 10
static char *epics_chan[] = {
E 10
I 10
static const char *epics_chan[] = {
E 10
D 7
D 8
  "MBSY2C_energy", "hallb_sf_xy560_0_5", "MTIRBCK", "TMIRBCK",
E 7
I 7
  "MBSY2C_energy", "torus_current", "MTIRBCK", "TMIRBCK",
E 7
E 8
I 8
  "MBSY2C_energy", "torus_current", "MTIRBCK", "TMIRBCK",
E 8
};
static float epics_val[sizeof(epics_chan)/sizeof(char *)];
static int ncallback = 0;
static int nepics    = sizeof(epics_chan)/sizeof(char *);
cdevRequestObject *obj[sizeof(epics_chan)/sizeof(char *)];
cdevCallback *cb[sizeof(epics_chan)/sizeof(char *)];


// prototypes
void decode_command_line(int argc, char **argv);
void get_epics_data(void);
void epics_callback_func(int status, void *userarg, cdevRequestObject &epics_req_obj,
			    cdevData& result);
D 10
char *env_name(char *env, char *name);
E 10
I 10
char *env_name(const char *env, const char *name);
E 10
extern "C" {
int get_run_number(char *msql_database, char *session);
int map_put_float(const char filename[], const char subsystemname[],
		  const char itemname[], int arraylength,
		  const float farray[], int firsttime);
}


// ref to cdev system object
cdevSystem &cdevsys = cdevSystem::defaultSystem ();


//---------------------------------------------------------------------------


main(int argc,char **argv){


  // decode command line
  decode_command_line(argc,argv);


  // check session
D 10
  if(session==NULL)session="clasprod";
E 10
I 10
  if(session==NULL)session=(char*)"clasprod";
E 10


  // get run number
  run=get_run_number(msql_database,session);


  // only print cdev error messages
  cdevsys.setThreshold(CDEV_SEVERITY_ERROR);


  // create epics callbacks and wait for data cdev_pend_time seconds
  get_epics_data();


  // insert into map
  if(debug==0){
I 5
    float zero=0.0;
E 5
D 3
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"beam"    ,"energy"   ,1,&epics_val[0], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","torus"    ,1,&epics_val[1], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","ps"       ,1,&epics_val[2], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","tagger"   ,1,&epics_val[3], run);
E 3
I 3
D 6
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"beam"    ,"energy"   	,1,&epics_val[0], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","torus"    	,1,&epics_val[1], run);
I 5
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","minitorus"	,1,&zero        , run);
E 5
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","pair_spec"	,1,&epics_val[2], run);
    map_put_float(env_name("CLON_ROOT",mapmgr_file_name),"currents","tagger"   	,1,&epics_val[3], run);
E 6
I 6
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"beam"    ,"energy"   	,1,&epics_val[0], run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","torus"    	,1,&epics_val[1], run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","minitorus"	,1,&zero        , run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","pair_spec"	,1,&epics_val[2], run);
    map_put_float(env_name("CLON_PARMS",mapmgr_file_name),"currents","tagger"   	,1,&epics_val[3], run);
E 6
E 3
  } else {
D 4
    cout << "\n\nbeam,torus,mini,tagger are: " << epics_val[0] << " " << epics_val[1] << " "
E 4
I 4
D 5
    cout << "\n\nbeam,torus,pair_spec,tagger are: " << epics_val[0] << " " << epics_val[1] << " "
E 4
	 << epics_val[2] << " " << epics_val[3] << endl << endl;
E 5
I 5
    cout << "\n\nbeam,torus,mini,pair_spec,tagger are: " << epics_val[0] << " " << epics_val[1] << " "
	 << 0.0 << " " << epics_val[2] << " " << epics_val[3] << endl << endl;
E 5
  }


  // done
  exit(EXIT_SUCCESS);
}


//---------------------------------------------------------------------------


void get_epics_data(){

  cdevGroup group;
  int i;


  // count number of callbacks received
  ncallback=0;


  // create request objects and callbacks
  for(i=0; i<nepics; i++){
    epics_val[i]=-1.0;
D 10
    obj[i] = cdevRequestObject::attachPtr(epics_chan[i],"get");
E 10
I 10
D 11
    obj[i] = cdevRequestObject::attachPtr(epics_chan[i],(char*)"get");
E 11
I 11
    obj[i] = cdevRequestObject::attachPtr((char*)epics_chan[i],(char*)"get");
E 11
E 10
    cb[i] = new cdevCallback(epics_callback_func,(void*)i);
  }


  // get results in one group
  group.start();
  for(i=0; i<nepics; i++){
    if(obj[i]!=NULL)obj[i]->sendCallback(NULL,*cb[i]);
  }


  // process group of callbacks
  group.pend((double)cdev_pend_time);

  
  // check if all callbacks received
  if(ncallback<nepics){
    cerr << "?only received " << ncallback << " callbacks" << " out of " << nepics << endl;
  }

  return;
}


//---------------------------------------------------------------------------


void epics_callback_func(int status, void *userarg, cdevRequestObject &epics_req_obj,
			    cdevData& result){

  ncallback++;
  epics_val[(int)userarg] = (float) result;

  return;
}


//---------------------------------------------------------------------------


void decode_command_line(int argc, char **argv) {

D 10
  char *help="\nusage:\n\n  bor2map [-c cdev_pend_time] [-debug]\n\n\n";
E 10
I 10
  const char *help="\nusage:\n\n  bor2map [-c cdev_pend_time] [-debug]\n\n\n";
E 10
  int i = 1;


  while(i<argc) {
    
    if(strncasecmp(argv[i],"-h",2)==0){
      printf(help);
      exit(EXIT_SUCCESS);
    }
    else if (strncasecmp(argv[i],"-debug",6)==0){
      debug=1;
      i=i+1;
    }
    else if (strncasecmp(argv[i],"-c",2)==0){
      cdev_pend_time=atoi(argv[i+1]);
      i=i+2;
    }
  }
}


//-------------------------------------------------------------------------


D 10
char *env_name(char *env, char *name) {
E 10
I 10
char *env_name(const char *env, const char *name) {
E 10

  static char bigname[200];
  char *e=getenv(env);

  if(e!=NULL) {
    strcpy(bigname,e);
    strcat(bigname,"/");
    strcat(bigname,name);
  } else {
    strcpy(bigname,name);
  }
  
  return(bigname);
}


//---------------------------------------------------------------------
E 1
