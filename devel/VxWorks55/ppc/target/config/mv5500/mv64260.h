/* mv64260.h - Register definitions for Marvell GT-64260A System Controller */

/* Copyright 2003, Motorola Inc. All Rights Reserved */

/*
modification history
-------------------- 
01e,01apr03,scb Add mnemonic to allow testing for PCI master/target abort.
01d,10feb03,scb Correct offset for PCIIF_ACCESS_CTRL_BASE1_LO_PCI1.
01c,19nov02,scb Add registers exclusive to GT-64260B and not in GT-64260A.
01b,14oct02,yyz AuxClock Support.
01a,01oct02,scb Port from hxeb100 base (ver 01e).
*/

/*
This file contains all of the register definitions for the Marvell MV64260A
System Controller.  The registers are divided into subfunctions with a unique
mnemonic preface to identify the subfunction (e.g. CPUIF_ == CPU Interface
registers).  The register definitions are given in the same order as
presented in the GT-64260A specification (rev A).  Naming conventions used 
in the Marvell specification were used subject to abbreviations. 
(e.g. _ATTR_ == Attribute etc.)
*/

#ifndef __INCmv64260h
#define INCmv64260h

#ifdef __cplusplus
   extern "C" {
#endif

/* CPU Interface */

/* CPU Interface - Address Decode Registers */

#define CPUIF_SCS0_LO_DECODE_ADDR				0x008
#define CPUIF_SCS0_HI_DECODE_ADDR				0x010
#define CPUIF_SCS1_LO_DECODE_ADDR				0x208
#define CPUIF_SCS1_HI_DECODE_ADDR				0x210
#define CPUIF_SCS2_LO_DECODE_ADDR				0x018
#define CPUIF_SCS2_HI_DECODE_ADDR				0x020
#define CPUIF_SCS3_LO_DECODE_ADDR				0x218
#define CPUIF_SCS3_HI_DECODE_ADDR				0x220
#define CPUIF_CS0_LO_DECODE_ADDR				0x028
#define CPUIF_CS0_HI_DECODE_ADDR				0x030
#define CPUIF_CS1_LO_DECODE_ADDR				0x228
#define CPUIF_CS1_HI_DECODE_ADDR				0x230
#define CPUIF_CS2_LO_DECODE_ADDR				0x248
#define CPUIF_CS2_HI_DECODE_ADDR				0x250
#define CPUIF_CS3_LO_DECODE_ADDR				0x038
#define CPUIF_CS3_HI_DECODE_ADDR				0x040
#define CPUIF_BOOTCS_LO_DECODE_ADDR				0x238
#define CPUIF_BOOTCS_HI_DECODE_ADDR				0x240
#define CPUIF_PCI0_IO_LO_DECODE_ADDR				0x048
#define CPUIF_PCI0_IO_HI_DECODE_ADDR				0x050
#define CPUIF_PCI0_MEM0_LO_DECODE_ADDR				0x058
#define CPUIF_PCI0_MEM0_HI_DECODE_ADDR				0x060
#define CPUIF_PCI0_MEM1_LO_DECODE_ADDR				0x080
#define CPUIF_PCI0_MEM1_HI_DECODE_ADDR				0x088
#define CPUIF_PCI0_MEM2_LO_DECODE_ADDR				0x258
#define CPUIF_PCI0_MEM2_HI_DECODE_ADDR				0x260
#define CPUIF_PCI0_MEM3_LO_DECODE_ADDR				0x280
#define CPUIF_PCI0_MEM3_HI_DECODE_ADDR				0x288
#define CPUIF_PCI1_IO_LO_DECODE_ADDR				0x090
#define CPUIF_PCI1_IO_HI_DECODE_ADDR				0x098
#define CPUIF_PCI1_MEM0_LO_DECODE_ADDR				0x0A0
#define CPUIF_PCI1_MEM0_HI_DECODE_ADDR				0x0A8
#define CPUIF_PCI1_MEM1_LO_DECODE_ADDR				0x0B0
#define CPUIF_PCI1_MEM1_HI_DECODE_ADDR				0x0B8
#define CPUIF_PCI1_MEM2_LO_DECODE_ADDR				0x2A0
#define CPUIF_PCI1_MEM2_HI_DECODE_ADDR				0x2A8
#define CPUIF_PCI1_MEM3_LO_DECODE_ADDR				0x2B0
#define CPUIF_PCI1_MEM3_HI_DECODE_ADDR				0x2B8
#define CPUIF_INTRNL_SPACE_DECODE_ADDR				0x068
#define CPUIF_CPU0_LO_DECODE_ADDR				0x290
#define CPUIF_CPU0_HI_DECODE_ADDR				0x298
#define CPUIF_CPU1_LO_DECODE_ADDR				0x2C0
#define CPUIF_CPU1_HI_DECODE_ADDR				0x2C8
#define CPUIF_PCI0_IO_RMAP					0x0F0
#define CPUIF_PCI0_MEM0_LO_RMAP					0x0F8
#define CPUIF_PCI0_MEM0_HI_RMAP					0x320
#define CPUIF_PCI0_MEM1_LO_RMAP					0x100
#define CPUIF_PCI0_MEM1_HI_RMAP					0x328
#define CPUIF_PCI0_MEM2_LO_RMAP					0x2F8
#define CPUIF_PCI0_MEM2_HI_RMAP					0x330
#define CPUIF_PCI0_MEM3_LO_RMAP					0x300
#define CPUIF_PCI0_MEM3_HI_RMAP					0x338
#define CPUIF_PCI1_IO_RMAP					0x108
#define CPUIF_PCI1_MEM0_LO_RMAP					0x110
#define CPUIF_PCI1_MEM0_HI_RMAP					0x340
#define CPUIF_PCI1_MEM1_LO_RMAP					0x118
#define CPUIF_PCI1_MEM1_HI_RMAP					0x348
#define CPUIF_PCI1_MEM2_LO_RMAP					0x310
#define CPUIF_PCI1_MEM2_HI_RMAP					0x350
#define CPUIF_PCI1_MEM3_LO_RMAP					0x318
#define CPUIF_PCI1_MEM3_HI_RMAP					0x358

/* CPU Interface - CPU Control Registers */

#define CPUIF_CPU_CFG						0x000
#define CPUIF_CPU_MODE						0x120
#define CPUIF_CPU_MSTR_CTRL					0x160
#define CPUIF_XBAR_CTRL_LO					0x150
#define CPUIF_XBAR_CTRL_HI					0x158
#define CPUIF_XBAR_TMOUT					0x168
#define CPUIF_READ_RSP_XBAR_CTRL_LO				0x170
#define CPUIF_READ_RSP_XBAR_CTRL_HI				0x178

/* CPU Interface - Sync Barrier Registers */

#define CPUIF_PCI0_SYNC_BARRIER					0x0C0
#define CPUIF_PCI1_SYNC_BARRIER					0x0C8

/* The following (5) are present on the GT-64260B but not on the GT-64260A */

#define CPUIF_CPU0_SYNC_BARRIER_TRGR				0x0D0 
#define CPUIF_CPU1_SYNC_BARRIER_TRGR				0x0D8 
#define CPUIF_DEADLOCK_AND_ORDERING				0x2D0
#define CPUIF_CNTR_AND_SYNC_BARRIER_ATTR			0x2E0
#define CPUIF_WRT_BACK_PRI_AND_BUF_DEPTH			0x2D8	

/* CPU Interface - Access Protection Registers */

#define CPUIF_PTCT0_ADDR_LO					0x180
#define CPUIF_PTCT0_ADDR_HI					0x188
#define CPUIF_PTCT1_ADDR_LO					0x190
#define CPUIF_PTCT1_ADDR_HI					0x198
#define CPUIF_PTCT2_ADDR_LO					0x1A0
#define CPUIF_PTCT2_ADDR_HI					0x1A8
#define CPUIF_PTCT3_ADDR_LO					0x1B0
#define CPUIF_PTCT3_ADDR_HI					0x1B8
#define CPUIF_PTCT4_ADDR_LO					0x1C0
#define CPUIF_PTCT4_ADDR_HI					0x1C8
#define CPUIF_PTCT5_ADDR_LO					0x1D0
#define CPUIF_PTCT5_ADDR_HI					0x1D8
#define CPUIF_PTCT6_ADDR_LO					0x1E0
#define CPUIF_PTCT6_ADDR_HI					0x1E8
#define CPUIF_PTCT7_ADDR_LO					0x1F0
#define CPUIF_PTCT7_ADDR_HI					0x1F8

/* CPU Interface - Snoop Control Registers */

#define CPUIF_SNOOP0_BASE_ADDR					0x380
#define CPUIF_SNOOP0_TOP_ADDR					0x388
#define CPUIF_SNOOP1_BASE_ADDR					0x390
#define CPUIF_SNOOP1_TOP_ADDR					0x398
#define CPUIF_SNOOP2_BASE_ADDR					0x3A0
#define CPUIF_SNOOP2_TOP_ADDR					0x3A8
#define CPUIF_SNOOP3_BASE_ADDR					0x3B0
#define CPUIF_SNOOP3_TOP_ADDR					0x3B8

/* CPU Interface - Error Report Registers */

#define CPUIF_ERR_ADDR_LO					0x070
#define CPUIF_ERR_ADDR_HI					0x078
#define CPUIF_ERR_DATA_LO					0x128
#define CPUIF_ERR_DATA_HI					0x130
#define CPUIF_ERR_PRTY						0x138
#define CPUIF_ERR_CAUSE						0x140
#define CPUIF_ERR_MASK						0x148

/* SDRAM Controller */

/* SDRAM Controller - Configuration Registers */

#define SDRAM_CFG						0x448
#define SDRAM_OPER_MODE						0x474
#define SDRAM_ADDR_CTRL						0x47C
#define SDRAM_TMNG_PARAMS					0x4B4
#define SDRAM_UMA_CTRL						0x4A4
#define SDRAM_IF_XBAR_CTRL_LO					0x4A8
#define SDRAM_IF_XBAR_CTRL_HI					0x4AC
#define SDRAM_IF_XBAR_TMOUT					0x4B0

/* SDRAM Controller - Bank Parameters Registers */

#define SDRAM_BANK0_PARAMS					0x44C
#define SDRAM_BANK1_PARAMS					0x450
#define SDRAM_BANK2_PARAMS					0x454
#define SDRAM_BANK3_PARAMS					0x458

/* SDRAM Controller - Error Report Registers */

#define SDRAM_ERR_DATA_LO					0x484
#define SDRAM_ERR_DATA_HI					0x480
#define SDRAM_ERR_ADDR						0x490
#define SDRAM_RCV_ECC						0x488
#define SDRAM_CALC_ECC						0x48C
#define SDRAM_ECC_CTRL						0x494
#define SDRAM_ECC_ERR_CNTR					0x498

/* Device Controller */

/* Device Controller - Device Control Registers */

#define DEVCTRL_DEV_BANK0_PARAMS				0x45C
#define DEVCTRL_DEV_BANK1_PARAMS				0x460
#define DEVCTRL_DEV_BANK2_PARAMS				0x464
#define DEVCTRL_DEV_BANK3_PARAMS				0x468
#define DEVCTRL_DEV_BOOT_BANK_PARAMS				0x46C
#define DEVCTRL_DEV_IF_CTRL					0x4C0
#define DEVCTRL_DEV_IF_XBAR_CTRL_LO				0x4C8
#define DEVCTRL_DEV_IF_XBAR_CTRL_HI				0x4CC
#define DEVCTRL_DEV_IF_XBAR_TMOUT				0x4C4

/* Device Controller - Device Interrupts Registers */

#define DEVCTRL_DEV_INT_CAUSE	 				0x4D0
#define DEVCTRL_DEV_INT_MASK					0x4D4
#define DEVCTRL_DEV_ERR_ADDR   	                                0x4D8

/* PCI Interface */

/* PCI Interface - PCI Slave Address Decoding Registers */

#define PCIIF_SCS0_BAR_SZ_PCI0					0xC08
#define PCIIF_SCS0_BAR_SZ_PCI1					0xC88
#define PCIIF_SCS1_BAR_SZ_PCI0					0xD08
#define PCIIF_SCS1_BAR_SZ_PCI1					0xD88
#define PCIIF_SCS2_BAR_SZ_PCI0					0xC0C
#define PCIIF_SCS2_BAR_SZ_PCI1					0xC8C
#define PCIIF_SCS3_BAR_SZ_PCI0					0xD0C
#define PCIIF_SCS3_BAR_SZ_PCI1					0xD8C
#define PCIIF_CS0_BAR_SZ_PCI0					0xC10
#define PCIIF_CS0_BAR_SZ_PCI1					0xC90
#define PCIIF_CS1_BAR_SZ_PCI0					0xD10
#define PCIIF_CS1_BAR_SZ_PCI1					0xD90
#define PCIIF_CS2_BAR_SZ_PCI0					0xD18
#define PCIIF_CS2_BAR_SZ_PCI1					0xD98
#define PCIIF_CS3_BAR_SZ_PCI0					0xC14
#define PCIIF_CS3_BAR_SZ_PCI1					0xC94
#define PCIIF_BOOTCS_BAR_SZ_PCI0				0xD14
#define PCIIF_BOOTCS_BAR_SZ_PCI1				0xD94
#define PCIIF_P2P_MEM0_BAR_SZ_PCI0				0xD1C
#define PCIIF_P2P_MEM0_BAR_SZ_PCI1				0xD9C
#define PCIIF_P2P_MEM1_BAR_SZ_PCI0				0xD20
#define PCIIF_P2P_MEM1_BAR_SZ_PCI1				0xDA0
#define PCIIF_P2P_IO_BAR_SZ_PCI0				0xD24
#define PCIIF_P2P_IO_BAR_SZ_PCI1				0xDA4
#define PCIIF_CPU_BAR_SZ_PCI0					0xD28
#define PCIIF_CPU_BAR_SZ_PCI1					0xDA8
#define PCIIF_DAC_SCS0_BAR_SZ_PCI0				0xE00
#define PCIIF_DAC_SCS0_BAR_SZ_PCI1				0xE80
#define PCIIF_DAC_SCS1_BAR_SZ_PCI0				0xE04
#define PCIIF_DAC_SCS1_BAR_SZ_PCI1				0xE84
#define PCIIF_DAC_SCS2_BAR_SZ_PCI0				0xE08
#define PCIIF_DAC_SCS2_BAR_SZ_PCI1				0xE88
#define PCIIF_DAC_SCS3_BAR_SZ_PCI0				0xE0C
#define PCIIF_DAC_SCS3_BAR_SZ_PCI1				0xE8C
#define PCIIF_DAC_CS0_BAR_SZ_PCI0				0xE10
#define PCIIF_DAC_CS0_BAR_SZ_PCI1				0xE90
#define PCIIF_DAC_CS1_BAR_SZ_PCI0				0xE14
#define PCIIF_DAC_CS1_BAR_SZ_PCI1				0xE94
#define PCIIF_DAC_CS2_BAR_SZ_PCI0				0xE18
#define PCIIF_DAC_CS2_BAR_SZ_PCI1				0xE98
#define PCIIF_DAC_CS3_BAR_SZ_PCI0				0xE1C
#define PCIIF_DAC_CS3_BAR_SZ_PCI1				0xE9C
#define PCIIF_DAC_BOOTCS_BAR_SZ_PCI0				0xE20
#define PCIIF_DAC_BOOTCS_BAR_SZ_PCI1				0xEA0
#define PCIIF_DAC_P2P_MEM0_BAR_SZ_PCI0				0xE24
#define PCIIF_DAC_P2P_MEM0_BAR_SZ_PCI1				0xE94
#define PCIIF_DAC_P2P_MEM1_BAR_SZ_PCI0				0xE28
#define PCIIF_DAC_P2P_MEM1_BAR_SZ_PCI1				0xE98
#define PCIIF_DAC_CPU_BAR_SZ_PCI0				0xE2C
#define PCIIF_DAC_CPU_BAR_SZ_PCI1				0xE9C
#define PCIIF_EXP_ROM_BAR_SZ_PCI0				0xD2C
#define PCIIF_EXP_ROM_BAR_SZ_PCI1				0xD9C
#define PCIIF_BASE_ADDR_REG_ENB_PCI0				0xC3C
#define PCIIF_BASE_ADDR_REG_ENB_PCI1				0xCBC
#define PCIIF_SCS0_BASE_ADDR_RMAP_PCI0				0xC48
#define PCIIF_SCS0_BASE_ADDR_RMAP_PCI1				0xCC8
#define PCIIF_SCS1_BASE_ADDR_RMAP_PCI0				0xD48
#define PCIIF_SCS1_BASE_ADDR_RMAP_PCI1				0xDC8
#define PCIIF_SCS2_BASE_ADDR_RMAP_PCI0				0xC4C
#define PCIIF_SCS2_BASE_ADDR_RMAP_PCI1				0xCCC
#define PCIIF_SCS3_BASE_ADDR_RMAP_PCI0				0xD4C
#define PCIIF_SCS3_BASE_ADDR_RMAP_PCI1				0xDCC
#define PCIIF_CS0_BASE_ADDR_RMAP_PCI0				0xC50
#define PCIIF_CS0_BASE_ADDR_RMAP_PCI1				0xCD0
#define PCIIF_CS1_BASE_ADDR_RMAP_PCI0				0xD50
#define PCIIF_CS1_BASE_ADDR_RMAP_PCI1				0xDD0
#define PCIIF_CS2_BASE_ADDR_RMAP_PCI0				0xD58
#define PCIIF_CS2_BASE_ADDR_RMAP_PCI1				0xDD8
#define PCIIF_CS3_BASE_ADDR_RMAP_PCI0				0xC54
#define PCIIF_CS3_BASE_ADDR_RMAP_PCI1				0xCD4
#define PCIIF_BOOTCS_BASE_ADDR_RMAP_PCI0			0xD54
#define PCIIF_BOOTCS_BASE_ADDR_RMAP_PCI1			0xDD4
#define PCIIF_P2P_MEM0_BASE_ADDR_RMAP_LO_PCI0			0xD5C
#define PCIIF_P2P_MEM0_BASE_ADDR_RMAP_LO_PCI1			0xDDC
#define PCIIF_P2P_MEM0_BASE_ADDR_RMAP_HI_PCI0			0xD60
#define PCIIF_P2P_MEM0_BASE_ADDR_RMAP_HI_PCI1			0xDE0
#define PCIIF_P2P_MEM1_BASE_ADDR_RMAP_LO_PCI0			0xD64
#define PCIIF_P2P_MEM1_BASE_ADDR_RMAP_LO_PCI1			0xDE4
#define PCIIF_P2P_MEM1_BASE_ADDR_RMAP_HI_PCI0			0xD68
#define PCIIF_P2P_MEM1_BASE_ADDR_RMAP_HI_PCI1			0xDE8
#define PCIIF_P2P_IO_BASE_ADDR_RMAP_PCI0			0xD6C
#define PCIIF_P2P_IO_BASE_ADDR_RMAP_PCI1			0xDEC
#define PCIIF_CPU_BASE_ADDR_RMAP_PCI0				0xD70
#define PCIIF_CPU_BASE_ADDR_RMAP_PCI1				0xDF0
#define PCIIF_DAC_SCS0_BASE_ADDR_RMAP_PCI0			0xF00
#define PCIIF_DAC_SCS0_BASE_ADDR_RMAP_PCI1			0xF80
#define PCIIF_DAC_SCS1_BASE_ADDR_RMAP_PCI0			0xF04
#define PCIIF_DAC_SCS1_BASE_ADDR_RMAP_PCI1			0xF84
#define PCIIF_DAC_SCS2_BASE_ADDR_RMAP_PCI0			0xF08
#define PCIIF_DAC_SCS2_BASE_ADDR_RMAP_PCI1			0xF88
#define PCIIF_DAC_SCS3_BASE_ADDR_RMAP_PCI0			0xF0C
#define PCIIF_DAC_SCS3_BASE_ADDR_RMAP_PCI1			0xF8C
#define PCIIF_DAC_CS0_BASE_ADDR_RMAP_PCI0			0xF10
#define PCIIF_DAC_CS0_BASE_ADDR_RMAP_PCI1			0xF90
#define PCIIF_DAC_CS1_BASE_ADDR_RMAP_PCI0			0xF14
#define PCIIF_DAC_CS1_BASE_ADDR_RMAP_PCI1			0xF94
#define PCIIF_DAC_CS2_BASE_ADDR_RMAP_PCI0			0xF18
#define PCIIF_DAC_CS2_BASE_ADDR_RMAP_PCI1			0xF98
#define PCIIF_DAC_CS3_BASE_ADDR_RMAP_PCI0			0xF1C
#define PCIIF_DAC_CS3_BASE_ADDR_RMAP_PCI1			0xF9C
#define PCIIF_DAC_BOOTCS_BASE_ADDR_RMAP_PCI0			0xF20
#define PCIIF_DAC_BOOTCS_BASE_ADDR_RMAP_PCI1			0xFA0
#define PCIIF_DAC_P2P_MEM0_BASE_ADDR_RMAP_LO_PCI0		0xF24
#define PCIIF_DAC_P2P_MEM0_BASE_ADDR_RMAP_LO_PCI1		0xFA4
#define PCIIF_DAC_P2P_MEM0_BASE_ADDR_RMAP_HI_PCI0		0xF28
#define PCIIF_DAC_P2P_MEM0_BASE_ADDR_RMAP_HI_PCI1		0xFA8
#define PCIIF_DAC_P2P_MEM1_BASE_ADDR_RMAP_LO_PCI0		0xF2C
#define PCIIF_DAC_P2P_MEM1_BASE_ADDR_RMAP_LO_PCI1		0xFAC
#define PCIIF_DAC_P2P_MEM1_BASE_ADDR_RMAP_HI_PCI0		0xF30
#define PCIIF_DAC_P2P_MEM1_BASE_ADDR_RMAP_HI_PCI1		0xFB0
#define PCIIF_DAC_CPU_BASE_ADDR_RMAP_PCI0			0xF34
#define PCIIF_DAC_CPU_BASE_ADDR_RMAP_PCI1			0xFB4
#define PCIIF_EXP_ROM_BASE_ADDR_RMAP_PCI0			0xF38
#define PCIIF_EXP_ROM_BASE_ADDR_RMAP_PCI1			0xFB8
#define PCIIF_ADDR_DECODE_CTRL_PCI0				0xD3C
#define PCIIF_ADDR_DECODE_CTRL_PCI1				0xDBC

/* PCI Interface - PCI Control Registers */

#define PCIIF_PCI_CMD_PCI0					0xC00
#define PCIIF_PCI_CMD_PCI1					0xC80
#define PCIIF_MODE_PCI0						0xD00
#define PCIIF_MODE_PCI1						0xD80
#define PCIIF_TMOUT_RTRY_PCI0					0xC04
#define PCIIF_TMOUT_RTRY_PCI1					0xC84
#define PCIIF_DISCARD_TMR_PCI0					0xD04
#define PCIIF_DISCARD_TMR_PCI1					0xD84
#define PCIIF_MSI_TRGR_TMR_PCI0					0xC38
#define PCIIF_MSI_TRGR_TMR_PCI1					0xCB8
#define PCIIF_ARB_CTRL_PCI0					0x1D00
#define PCIIF_ARB_CTRL_PCI1					0x1D80
#define PCIIF_IF_XBAR_CTRL_LO_PCI0				0x1D08
#define PCIIF_IF_XBAR_CTRL_LO_PCI1				0x1D88
#define PCIIF_IF_XBAR_CTRL_HI_PCI0				0x1D0C
#define PCIIF_IF_XBAR_CTRL_HI_PCI1				0x1D8C
#define PCIIF_IF_XBAR_TMOUT_PCI0				0x1D04
#define PCIIF_IF_XBAR_TMOUT_PCI1				0x1D84
#define PCIIF_READ_RESP_XBAR_CTRL_LO_PCI0			0x1D18
#define PCIIF_READ_RESP_XBAR_CTRL_LO_PCI1			0x1D98
#define PCIIF_READ_RESP_XBAR_CTRL_HI_PCI0			0x1D1C
#define PCIIF_READ_RESP_XBAR_CTRL_HI_PCI1			0x1D9C
#define PCIIF_SYNC_BARRIER_PCI0					0x1D10
#define PCIIF_SYNC_BARRIER_PCI1					0x1D90
#define PCIIF_P2P_CFG_PCI0					0x1D14
#define PCIIF_P2P_CFG_PCI1					0x1D94
#define PCIIF_P2P_SWAP_CTRL_PCI0				0x1D54
#define PCIIF_P2P_SWAP_CTRL_PCI1				0x1DD4
#define PCIIF_ACCESS_CTRL_BASE0_LO_PCI0				0x1E00
#define PCIIF_ACCESS_CTRL_BASE0_LO_PCI1				0x1E80
#define PCIIF_ACCESS_CTRL_BASE0_HI_PCI0				0x1E04
#define PCIIF_ACCESS_CTRL_BASE0_HI_PCI1				0x1E84
#define PCIIF_ACCESS_CTRL_TOP0_PCI0				0x1E08
#define PCIIF_ACCESS_CTRL_TOP0_PCI1				0x1E88
#define PCIIF_ACCESS_CTRL_BASE1_LO_PCI0				0x1E10
#define PCIIF_ACCESS_CTRL_BASE1_LO_PCI1				0x1E90
#define PCIIF_ACCESS_CTRL_BASE1_HI_PCI0				0x1E14
#define PCIIF_ACCESS_CTRL_BASE1_HI_PCI1				0x1E94
#define PCIIF_ACCESS_CTRL_TOP1_PCI0				0x1E18
#define PCIIF_ACCESS_CTRL_TOP1_PCI1				0x1E98
#define PCIIF_ACCESS_CTRL_BASE2_LO_PCI0				0x1E20
#define PCIIF_ACCESS_CTRL_BASE2_LO_PCI1				0x1EA0
#define PCIIF_ACCESS_CTRL_BASE2_HI_PCI0				0x1E24
#define PCIIF_ACCESS_CTRL_BASE2_HI_PCI1				0x1EA4
#define PCIIF_ACCESS_CTRL_TOP2_PCI0				0x1E28
#define PCIIF_ACCESS_CTRL_TOP2_PCI1				0x1EA8
#define PCIIF_ACCESS_CTRL_BASE3_LO_PCI0				0x1E30
#define PCIIF_ACCESS_CTRL_BASE3_LO_PCI1				0x1EB0
#define PCIIF_ACCESS_CTRL_BASE3_HI_PCI0				0x1E34
#define PCIIF_ACCESS_CTRL_BASE3_HI_PCI1				0x1EB4
#define PCIIF_ACCESS_CTRL_TOP3_PCI0				0x1E38
#define PCIIF_ACCESS_CTRL_TOP3_PCI1				0x1EB8
#define PCIIF_ACCESS_CTRL_BASE4_LO_PCI0				0x1E40
#define PCIIF_ACCESS_CTRL_BASE4_LO_PCI1				0x1EC0
#define PCIIF_ACCESS_CTRL_BASE4_HI_PCI0				0x1E44
#define PCIIF_ACCESS_CTRL_BASE4_HI_PCI1				0x1EC4
#define PCIIF_ACCESS_CTRL_TOP4_PCI0				0x1E48
#define PCIIF_ACCESS_CTRL_TOP4_PCI1				0x1EC8
#define PCIIF_ACCESS_CTRL_BASE5_LO_PCI0				0x1E50
#define PCIIF_ACCESS_CTRL_BASE5_LO_PCI1				0x1ED0
#define PCIIF_ACCESS_CTRL_BASE5_HI_PCI0				0x1E54
#define PCIIF_ACCESS_CTRL_BASE5_HI_PCI1				0x1ED4
#define PCIIF_ACCESS_CTRL_TOP5_PCI0				0x1E58
#define PCIIF_ACCESS_CTRL_TOP5_PCI1				0x1ED8
#define PCIIF_ACCESS_CTRL_BASE6_LO_PCI0				0x1E60
#define PCIIF_ACCESS_CTRL_BASE6_LO_PCI1				0x1EE0
#define PCIIF_ACCESS_CTRL_BASE6_HI_PCI0				0x1E64
#define PCIIF_ACCESS_CTRL_BASE6_HI_PCI1				0x1EE4
#define PCIIF_ACCESS_CTRL_TOP6_PCI0				0x1E68	
#define PCIIF_ACCESS_CTRL_TOP6_PCI1				0x1EE8
#define PCIIF_ACCESS_CTRL_BASE7_LO_PCI0				0x1E70
#define PCIIF_ACCESS_CTRL_BASE7_LO_PCI1				0x1EF0
#define PCIIF_ACCESS_CTRL_BASE7_HI_PCI0				0x1E74
#define PCIIF_ACCESS_CTRL_BASE7_HI_PCI1				0x1EF4
#define PCIIF_ACCESS_CTRL_TOP7_PCI0				0x1E78
#define PCIIF_ACCESS_CTRL_TOP7_PCI1				0x1EF8

/* PCI Interface - PCI Snoop Control Registers */

#define PCIIF_SNOOP_CTRL_BASE0_LO_PCI0				0x1F00
#define PCIIF_SNOOP_CTRL_BASE0_LO_PCI1				0x1F80
#define PCIIF_SNOOP_CTRL_BASE0_HI_PCI0				0x1F04
#define PCIIF_SNOOP_CTRL_BASE0_HI_PCI1				0x1F84
#define PCIIF_SNOOP_CTRL_TOP0_PCI0				0x1F08
#define PCIIF_SNOOP_CTRL_TOP0_PCI1				0x1F88
#define PCIIF_SNOOP_CTRL_BASE1_LO_PCI0				0x1F10
#define PCIIF_SNOOP_CTRL_BASE1_LO_PCI1				0x1F90
#define PCIIF_SNOOP_CTRL_BASE1_HI_PCI0				0x1F14
#define PCIIF_SNOOP_CTRL_BASE1_HI_PCI1				0x1F94
#define PCIIF_SNOOP_CTRL_TOP1_PCI0				0x1F18
#define PCIIF_SNOOP_CTRL_TOP1_PCI1				0x1F98
#define PCIIF_SNOOP_CTRL_BASE2_LO_PCI0				0x1F20
#define PCIIF_SNOOP_CTRL_BASE2_LO_PCI1				0x1FA0
#define PCIIF_SNOOP_CTRL_BASE2_HI_PCI0				0x1F24
#define PCIIF_SNOOP_CTRL_BASE2_HI_PCI1				0x1FA4
#define PCIIF_SNOOP_CTRL_TOP2_PCI0				0x1F28
#define PCIIF_SNOOP_CTRL_TOP2_PCI1				0x1FA8
#define PCIIF_SNOOP_CTRL_BASE3_LO_PCI0				0x1F30
#define PCIIF_SNOOP_CTRL_BASE3_LO_PCI1				0x1FB0
#define PCIIF_SNOOP_CTRL_BASE3_HI_PCI0				0x1F34
#define PCIIF_SNOOP_CTRL_BASE3_HI_PCI1				0x1FB4
#define PCIIF_SNOOP_CTRL_TOP3_PCI0				0x1F38
#define PCIIF_SNOOP_CTRL_TOP3_PCI1				0x1FB8

/* PCI Interface - PCI Configuration Access Registers */

#define PCIIF_CFG_ADDR_PCI0					0xCF8
#define PCIIF_CFG_ADDR_PCI1					0xC78
#define PCIIF_CFG_DATA_PCI0					0xCFC
#define PCIIF_CFG_DATA_PCI1					0xC7C
#define PCIIF_INT_ACK_PCI0					0xC34
#define PCIIF_INT_ACK_PCI1					0xCB4

/* PCI Interface - PCI Error Report Registers */

#define PCIIF_SERR_MASK_PCI0                                    0xC28
#define PCIIF_SERR_MASK_PCI1                                    0xCA8
#define PCIIF_ERR_ADDR_LO_PCI0					0x1D40
#define PCIIF_ERR_ADDR_LO_PCI1					0x1DC0
#define PCIIF_ERR_ADDR_HI_PCI0                                  0x1D44
#define PCIIF_ERR_ADDR_HI_PCI1                                  0x1DC4
#define PCIIF_ERR_DATA_LO_PCI0					0x1D48
#define PCIIF_ERR_DATA_LO_PCI1					0x1DC8
#define PCIIF_ERR_DATA_HI_PCI0					0x1D4C
#define PCIIF_ERR_DATA_HI_PCI1					0x1DCC
#define PCIIF_ERR_CMD_PCI0					0x1D50
#define PCIIF_ERR_CMD_PCI1					0x1DD0
#define PCIIF_ERR_CAUSE_PCI0					0x1D58
#define PCIIF_ERR_CAUSE_PCI1					0x1DD8
#define PCIIF_ERR_MASK_PCI0					0x1D5C
#define PCIIF_ERR_MASK_PCI1					0x1DDC

/*
 * The following registers are in the function 0 - 7 header space of the
 * MV64260 and can be modified via PCI config cycles.  Any register
 * whose mnemonic ends in "PCICFG" or "PCICFG_ALT" represents a
 * register that must be accessed via PCI configuration cycles.  In
 * general the register whose mnemonic ends with "...PCICFG",
 * represents an access on the same PCI bus (e.g. accessing PCI1
 * registers with the PCI1 configuration accesses or accessing PCI0
 * registers with the PCI0 config registers).  If the register mnemonic
 * ends with PCICFG_ALT, the access is to the alternate PCI bus (PCI0
 * accesses of PCI1 registers and vice versa).
 */

/* PCI Interface - Function 0 Registers */

#define PCIIF_FUNC0_DEV_AND_VEND_ID_PCICFG			0x00
#define PCIIF_FUNC0_DEV_AND_VEND_ID_PCICFG_ALT			0x80
#define PCIIF_FUNC0_STATUS_AND_CMD_PCICFG			0x04
#define PCIIF_FUNC0_STATUS_AND_CMD_PCICFG_ALT			0x84
#define PCIIF_FUNC0_CLASS_CODE_AND_REV_ID_PCICFG		0x08
#define PCIIF_FUNC0_CLASS_CODE_AND_REV_ID_PCICFG_ALT		0x88
#define PCIIF_FUNC0_BIST_LAT_CACHE_PCICFG			0x0C
#define PCIIF_FUNC0_BIST_LAT_CACHE_PCICFG_ALT			0x8C
#define PCIIF_FUNC0_SCS0_BASE_ADDR_PCICFG			0x10
#define PCIIF_FUNC0_SCS0_BASE_ADDR_PCICFG_ALT			0x90
#define PCIIF_FUNC0_SCS1_BASE_ADDR_PCICFG			0x14
#define PCIIF_FUNC0_SCS1_BASE_ADDR_PCICFG_ALT			0x94
#define PCIIF_FUNC0_SCS2_BASE_ADDR_PCICFG			0x18
#define PCIIF_FUNC0_SCS2_BASE_ADDR_PCICFG_ALT			0x98
#define PCIIF_FUNC0_SCS3_BASE_ADDR_PCICFG			0x1C
#define PCIIF_FUNC0_SCS3_BASE_ADDR_PCICFG_ALT			0x9C
#define PCIIF_FUNC0_INT_REG_MEM_MAPPED_BASE_ADDR_PCICFG		0x20
#define PCIIF_FUNC0_INT_REG_MEM_MAPPED_BASE_ADDR_PCICFG_ALT	0xA0
#define PCIIF_FUNC0_INT_REG_IO_MAPPED_BASE_ADDR_PCICFG		0x24
#define PCIIF_FUNC0_INT_REG_IO_MAPPED_BASE_ADDR_PCICFG_ALT	0xA4
#define PCIIF_FUNC0_SUBSYS_DEV_AND_VEND_ID_PCICFG		0x2C
#define PCIIF_FUNC0_SUBSYS_DEV_AND_VEND_ID_PCICFG_ALT		0xAC
#define PCIIF_FUNC0_EXP_ROM_BASE_ADDR_PCICFG			0x30
#define PCIIF_FUNC0_EXP_ROM_BASE_ADDR_PCICFG_ALT		0xB0
#define PCIIF_FUNC0_CAPBLTY_LIST_PTR_PCICFG			0x34
#define PCIIF_FUNC0_CAPBLTY_LIST_PTR_PCICFG_ALT			0xB4
#define PCIIF_FUNC0_INT_PIN_AND_LINE_PCICFG			0x3C
#define PCIIF_FUNC0_INT_PIN_AND_LINE_PCICFG_ALT			0xBC
#define PCIIF_FUNC0_PWR_MGMT_CAPBLTY_PCICFG			0x40
#define PCIIF_FUNC0_PWR_MGMT_CAPBLTY_PCICFG_ALT			0xC0
#define PCIIF_FUNC0_PWR_MGMT_STATUS_AND_CTRL_PCICFG		0x44
#define PCIIF_FUNC0_PWR_MGMT_STATUS_AND_CTRL_PCICFG_ALT		0xC4
#define PCIIF_FUNC0_VPD_ADDR_PCICFG				0x48
#define PCIIF_FUNC0_VPD_ADDR_PCICFG_ALT				0xC8
#define PCIIF_FUNC0_VPD_DATA_PCICFG				0x4C
#define PCIIF_FUNC0_VPD_DATA_PCICFG_ALT				0xCC
#define PCIIF_FUNC0_MSI_MSG_CTRL_PCICFG				0x50
#define PCIIF_FUNC0_MSI_MSG_CTRL_PCICFG_ALT			0xD0
#define PCIIF_FUNC0_MSI_MSG_ADDR_PCICFG				0x54
#define PCIIF_FUNC0_MSI_MSG_ADDR_PCICFG_ALT			0xD4
#define PCIIF_FUNC0_MSI_MSG_UPR_ADDR_PCICFG			0x58
#define PCIIF_FUNC0_MSI_MSG_UPR_ADDR_PCICFG_ALT			0xD8
#define PCIIF_FUNC0_MSG_DATA_PCICFG				0x5C
#define PCIIF_FUNC0_MSG_DATA_PCICFG_ALT				0xDC
#define PCIIF_FUNC0_CPCI_HSWAP_CAPBLTY_PCICFG			0x60
#define PCIIF_FUNC0_CPCI_HSWAP_CAPBLTY_PCICFG_ALT		0xE0

/* PCI Interface - Function 1 Registers */
 
#define PCIIF_FUNC1_CS0_BASE_ADDR_PCICFG			0x10
#define PCIIF_FUNC1_CS0_BASE_ADDR_PCICFG_ALT			0x90
#define PCIIF_FUNC1_CS1_BASE_ADDR_PCICFG			0x14
#define PCIIF_FUNC1_CS1_BASE_ADDR_PCICFG_ALT			0x94
#define PCIIF_FUNC1_CS2_BASE_ADDR_PCICFG			0x18
#define PCIIF_FUNC1_CS2_BASE_ADDR_PCICFG_ALT			0x98
#define PCIIF_FUNC1_CS3_BASE_ADDR_PCICFG			0x1C
#define PCIIF_FUNC1_CS3_BASE_ADDR_PCICFG_ALT			0x9C
#define PCIIF_FUNC1_BOOTCS_BASE_ADDR_PCICFG			0x20
#define PCIIF_FUNC1_BOOTCS_BASE_ADDR_PCICFG_ALT			0xA0

/* PCI Interface - Function 2 Registers */

#define PCIIF_FUNC2_P2P_MEM0_BASE_ADDR_PCICFG			0x10
#define PCIIF_FUNC2_P2P_MEM0_BASE_ADDR_PCICFG_ALT		0x90
#define PCIIF_FUNC2_P2P_MEM1_BASE_ADDR_PCICFG			0x14
#define PCIIF_FUNC2_P2P_MEM1_BASE_ADDR_PCICFG_ALT		0x94
#define PCIIF_FUNC2_P2P_IO_BASE_ADDR_PCICFG			0x18
#define PCIIF_FUNC2_P2P_IO_BASE_ADDR_PCICFG_ALT			0x98
#define PCIIF_FUNC2_CPU_BASE_ADDR_PCICFG			0x1C
#define PCIIF_FUNC2_CPU_BASE_ADDR_PCICFG_ALT			0x9C

/* PCI Interface - Function 3 Registers are Reserved (not defined) */

/* PCI Interface - Function 4 Registers */

#define PCIIF_FUNC4_DAC_SCS0_BASE_ADDR_LO_PCICFG		0x10
#define PCIIF_FUNC4_DAC_SCS0_BASE_ADDR_LO_PCICFG_ALT		0x90
#define PCIIF_FUNC4_DAC_SCS0_BASE_ADDR_HI_PCICFG		0x14
#define PCIIF_FUNC4_DAC_SCS0_BASE_ADDR_HI_PCICFG_ALT		0x94
#define PCIIF_FUNC4_DAC_SCS1_BASE_ADDR_LO_PCICFG		0x18
#define PCIIF_FUNC4_DAC_SCS1_BASE_ADDR_LO_PCICFG_ALT		0x98
#define PCIIF_FUNC4_DAC_SCS1_BASE_ADDR_HI_PCICFG		0x1C
#define PCIIF_FUNC4_DAC_SCS1_BASE_ADDR_HI_PCICFG_ALT		0x9C
#define PCIIF_FUNC4_DAC_P2P_MEM0_BASE_ADDR_LO_PCICFG		0x20
#define PCIIF_FUNC4_DAC_P2P_MEM0_BASE_ADDR_LO_PCICFG_ALT	0xA0
#define PCIIF_FUNC4_DAC_P2P_MEM0_BASE_ADDR_HI_PCICFG		0x24
#define PCIIF_FUNC4_DAC_P2P_MEM0_BASE_ADDR_HI_PCICFG_ALT	0xA4

/* PCI Interface - Function 5 Registers */

#define PCIIF_FUNC5_DAC_SCS2_BASE_ADDR_LO_PCICFG		0x10
#define PCIIF_FUNC5_DAC_SCS2_BASE_ADDR_LO_PCICFG_ALT		0x90
#define PCIIF_FUNC5_DAC_SCS2_BASE_ADDR_HI_PCICFG		0x14
#define PCIIF_FUNC5_DAC_SCS2_BASE_ADDR_HI_PCICFG_ALT		0x94
#define PCIIF_FUNC5_DAC_SCS3_BASE_ADDR_LO_PCICFG		0x18
#define PCIIF_FUNC5_DAC_SCS3_BASE_ADDR_LO_PCICFG_ALT		0x98
#define PCIIF_FUNC5_DAC_SCS3_BASE_ADDR_HI_PCICFG		0x1C
#define PCIIF_FUNC5_DAC_SCS3_BASE_ADDR_HI_PCICFG_ALT		0x9C
#define PCIIF_FUNC5_DAC_P2P_MEM1_BASE_ADDR_LO_PCICFG		0x20
#define PCIIF_FUNC5_DAC_P2P_MEM1_BASE_ADDR_LO_PCICFG_ALT	0xA0
#define PCIIF_FUNC5_DAC_P2P_MEM1_BASE_ADDR_HI_PCICFG		0x24
#define PCIIF_FUNC5_DAC_P2P_MEM1_BASE_ADDR_HI_PCICFG_ALT	0xA4

/* PCI Interface - Function 6 Registers */

#define PCIIF_FUNC6_DAC_CS0_BASE_ADDR_LO_PCICFG			0x10
#define PCIIF_FUNC6_DAC_CS0_BASE_ADDR_LO_PCICFG_ALT		0x90
#define PCIIF_FUNC6_DAC_CS0_BASE_ADDR_HI_PCICFG			0x14
#define PCIIF_FUNC6_DAC_CS0_BASE_ADDR_HI_PCICFG_ALT		0x94
#define PCIIF_FUNC6_DAC_CS1_BASE_ADDR_LO_PCICFG			0x18
#define PCIIF_FUNC6_DAC_CS1_BASE_ADDR_LO_PCICFG_ALT		0x98
#define PCIIF_FUNC6_DAC_CS1_BASE_ADDR_HI_PCICFG			0x1C
#define PCIIF_FUNC6_DAC_CS1_BASE_ADDR_HI_PCICFG_ALT		0x9C
#define PCIIF_FUNC6_DAC_CS2_BASE_ADDR_LO_PCICFG			0x20
#define PCIIF_FUNC6_DAC_CS2_BASE_ADDR_LO_PCICFG_ALT		0xA0
#define PCIIF_FUNC6_DAC_CS2_BASE_ADDR_HI_PCICFG			0x24
#define PCIIF_FUNC6_DAC_CS2_BASE_ADDR_HI_PCICFG_ALT		0xA4

/* PCI Interface - Function 7 Registers */

#define PCIIF_FUNC7_DAC_CS3_BASE_ADDR_LO_PCICFG			0x10
#define PCIIF_FUNC7_DAC_CS3_BASE_ADDR_LO_PCICFG_ALT		0x90
#define PCIIF_FUNC7_DAC_CS3_BASE_ADDR_HI_PCICFG			0x14
#define PCIIF_FUNC7_DAC_CS3_BASE_ADDR_HI_PCICFG_ALT		0x94
#define PCIIF_FUNC7_DAC_BOOTCS_BASE_ADDR_LO_PCICFG		0x18
#define PCIIF_FUNC7_DAC_BOOTCS_BASE_ADDR_LO_PCICFG_ALT		0x98
#define PCIIF_FUNC7_DAC_BOOTCS_BASE_ADDR_HI_PCICFG		0x1C
#define PCIIF_FUNC7_DAC_BOOTCS_BASE_ADDR_HI_PCICFG_ALT		0x9C
#define PCIIF_FUNC7_DAC_CPU_BASE_ADDR_LO_PCICFG			0x20
#define PCIIF_FUNC7_DAC_CPU_BASE_ADDR_LO_PCICFG_ALT		0xA0
#define PCIIF_FUNC7_DAC_CPU_BASE_ADDR_HI_PCICFG			0x24
#define PCIIF_FUNC7_DAC_CPU_BASE_ADDR_HI_PCICFG_ALT		0xA4

/* Messaging Unit */

/* Messaging Unit - Messaging Unit Registers */

#define MUIF_INBND_MSG0_PCI0					0x1C10
#define MUIF_INBND_MSG0_PCI1					0x1C90
#define MUIF_INBND_MSG1_PCI0					0x1C14
#define MUIF_INBND_MSG1_PCI1					0x1C94
#define MUIF_OUTBND_MSG0_PCI0					0x1C18
#define MUIF_OUTBND_MSG0_PCI1					0x1C98
#define MUIF_OUTBND_MSG1_PCI0					0x1C1C
#define MUIF_OUTBND_MSG1_PCI1					0x1C9C
#define MUIF_INBND_DBELL_PCI0					0x1C20
#define MUIF_INBND_DBELL_PCI1					0x1CA0
#define MUIF_INBND_INT_CAUSE_PCI0				0x1C24
#define MUIF_INBND_INT_CAUSE_PCI1				0x1CA4
#define MUIF_INBND_INT_MASK_PCI0				0x1C28
#define MUIF_INBND_INT_MASK_PCI1				0x1CA8
#define MUIF_OUTBND_DBELL_PCI0					0x1C2C
#define MUIF_OUTBND_DBELL_PCI1					0x1CAC
#define MUIF_OUTBND_INT_CAUSE_PCI0				0x1C30
#define MUIF_OUTBND_INT_CAUSE_PCI1				0x1CB0
#define MUIF_OUTBND_INT_MASK_PCI0				0x1C34
#define MUIF_OUTBND_INT_MASK_PCI1				0x1CB4
#define MUIF_INBND_Q_PORT_VIRT_PCI0				0x1C40
#define MUIF_INBND_Q_PORT_VIRT_PCI1				0x1CC0
#define MUIF_OUTBND_Q_PORT_VIRT_PCI0				0x1C44
#define MUIF_OUTBND_Q_PORT_VIRT_PCI1				0x1CC4
#define MUIF_Q_CTRL_PCI0					0x1C50
#define MUIF_Q_CTRL_PCI1					0x1CD0
#define MUIF_Q_BASE_ADDR_PCI0					0x1C54
#define MUIF_Q_BASE_ADDR_PCI1					0x1CD4
#define MUIF_INBND_FREE_HEAD_PTR_PCI0				0x1C60
#define MUIF_INBND_FREE_HEAD_PTR_PCI1				0x1CE0
#define MUIF_INBND_FREE_TAIL_PTR_PCI0				0x1C64
#define MUIF_INBND_FREE_TAIL_PTR_PCI1				0x1CE4
#define MUIF_INBND_POST_HEAD_PTR_PCI0				0x1C68
#define MUIF_INBND_POST_HEAD_PTR_PCI1				0x1CE8
#define MUIF_INBND_POST_TAIL_PTR_PCI0				0x1C6C
#define MUIF_INBND_POST_TAIL_PTR_PCI1				0x1CEC
#define MUIF_OUTBND_FREE_HEAD_PTR_PCI0				0x1C70
#define MUIF_OUTBND_FREE_HEAD_PTR_PCI1				0x1CF0
#define MUIF_OUTBND_FREE_TAIL_PTR_PCI0				0x1C74
#define MUIF_OUTBND_FREE_TAIL_PTR_PCI1				0x1CF4
#define MUIF_OUTBND_POST_HEAD_PTR_PCI0				0x1CF8
#define MUIF_OUTBND_POST_HEAD_PTR_PCI1				0x1C78
#define MUIF_OUTBND_POST_TAIL_PTR_PCI0				0x1CFC
#define MUIF_OUTBND_POST_TAIL_PTR_PCI1				0x1C7C

/* IDMA Controller */

/* IDMA Controller - IDMA Descriptor Registers  */

#define IDMA_BYTE_CNT_CHAN0					0x800
#define IDMA_BYTE_CNT_CHAN1					0x804
#define IDMA_BYTE_CNT_CHAN2					0x808
#define IDMA_BYTE_CNT_CHAN3					0x80C
#define IDMA_BYTE_CNT_CHAN4					0x900
#define IDMA_BYTE_CNT_CHAN5					0x904
#define IDMA_BYTE_CNT_CHAN6					0x908
#define IDMA_BYTE_CNT_CHAN7					0x90C
#define IDMA_SRC_ADDR_CHAN0					0x810
#define IDMA_SRC_ADDR_CHAN1					0x814
#define IDMA_SRC_ADDR_CHAN2					0x818
#define IDMA_SRC_ADDR_CHAN3					0x81C
#define IDMA_SRC_ADDR_CHAN4					0x910
#define IDMA_SRC_ADDR_CHAN5					0x914
#define IDMA_SRC_ADDR_CHAN6					0x918
#define IDMA_SRC_ADDR_CHAN7					0x91C
#define IDMA_DEST_ADDR_CHAN0					0x820
#define IDMA_DEST_ADDR_CHAN1					0x824
#define IDMA_DEST_ADDR_CHAN2					0x828
#define IDMA_DEST_ADDR_CHAN3					0x82C
#define IDMA_DEST_ADDR_CHAN4					0x920
#define IDMA_DEST_ADDR_CHAN5					0x924
#define IDMA_DEST_ADDR_CHAN6					0x928
#define IDMA_DEST_ADDR_CHAN7					0x92C
#define IDMA_NXT_DESC_PTR_CHAN0					0x830
#define IDMA_NXT_DESC_PTR_CHAN1					0x834
#define IDMA_NXT_DESC_PTR_CHAN2					0x838
#define IDMA_NXT_DESC_PTR_CHAN3					0x83C
#define IDMA_NXT_DESC_PTR_CHAN4					0x930
#define IDMA_NXT_DESC_PTR_CHAN5					0x934
#define IDMA_NXT_DESC_PTR_CHAN6					0x938
#define IDMA_NXT_DESC_PTR_CHAN7					0x93C
#define IDMA_CURR_DESC_PTR_CHAN0				0x870
#define IDMA_CURR_DESC_PTR_CHAN1				0x874
#define IDMA_CURR_DESC_PTR_CHAN2				0x878
#define IDMA_CURR_DESC_PTR_CHAN3				0x87C
#define IDMA_CURR_DESC_PTR_CHAN4				0x970
#define IDMA_CURR_DESC_PTR_CHAN5				0x974
#define IDMA_CURR_DESC_PTR_CHAN6				0x978
#define IDMA_CURR_DESC_PTR_CHAN7				0x97C
#define IDMA_SRC_HI_PCI_ADDR_CHAN0				0x890
#define IDMA_SRC_HI_PCI_ADDR_CHAN1				0x894
#define IDMA_SRC_HI_PCI_ADDR_CHAN2				0x898
#define IDMA_SRC_HI_PCI_ADDR_CHAN3				0x89C
#define IDMA_SRC_HI_PCI_ADDR_CHAN4				0x990
#define IDMA_SRC_HI_PCI_ADDR_CHAN5				0x994
#define IDMA_SRC_HI_PCI_ADDR_CHAN6				0x998
#define IDMA_SRC_HI_PCI_ADDR_CHAN7				0x99C
#define IDMA_DEST_HI_PCI_ADDR_CHAN0				0x8A0
#define IDMA_DEST_HI_PCI_ADDR_CHAN1				0x8A4
#define IDMA_DEST_HI_PCI_ADDR_CHAN2				0x8A8
#define IDMA_DEST_HI_PCI_ADDR_CHAN3				0x8AC
#define IDMA_DEST_HI_PCI_ADDR_CHAN4				0x9A0
#define IDMA_DEST_HI_PCI_ADDR_CHAN5				0x9A4
#define IDMA_DEST_HI_PCI_ADDR_CHAN6				0x9A8
#define IDMA_DEST_HI_PCI_ADDR_CHAN7				0x9AC
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN0				0x8B0
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN1				0x8B4
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN2				0x8B8
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN3				0x8BC
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN4				0x9B0
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN5				0x9B4
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN6				0x9B8
#define IDMA_NXT_DESC_HI_PCI_ADDR_CHAN7				0x9BC

/* IDMA Controller - IDMA Control Registers */

#define IDMA_CTRL_LO_CHAN0					0x840
#define IDMA_CTRL_HI_CHAN0					0x880
#define IDMA_CTRL_LO_CHAN1					0x844
#define IDMA_CTRL_HI_CHAN1					0x884
#define IDMA_CTRL_LO_CHAN2					0x848
#define IDMA_CTRL_HI_CHAN2					0x888
#define IDMA_CTRL_LO_CHAN3					0x84C
#define IDMA_CTRL_HI_CHAN3					0x88C
#define IDMA_CTRL_LO_CHAN4					0x940
#define IDMA_CTRL_HI_CHAN4					0x980
#define IDMA_CTRL_LO_CHAN5					0x944
#define IDMA_CTRL_HI_CHAN5					0x984
#define IDMA_CTRL_LO_CHAN6					0x948
#define IDMA_CTRL_HI_CHAN6					0x988
#define IDMA_CTRL_LO_CHAN7					0x94C
#define IDMA_CTRL_HI_CHAN7					0x98C
#define IDMA_ARB_CTRL_CHAN0_3					0x860
#define IDMA_ARB_CTRL_CHAN4_7					0x960
#define IDMA_XBAR_TMOUT_CHAN0_3					0x8D0
#define IDMA_XBAR_TMOUT_CHAN4_7					0x9D0

/* IDMA Controller - IDMA Interrupt Registers */

#define IDMA_INT_CAUSE_CHAN0_3					0x8C0
#define IDMA_INT_MASK_CHAN0_3					0x8C4
#define IDMA_ERR_ADDR_CHAN0_3					0x8C8
#define IDMA_ERR_SEL_CHAN0_3					0x8CC
#define IDMA_INT_CAUSE_CHAN4_7					0x9C0
#define IDMA_INT_MASK_CHAN4_7					0x9C4
#define IDMA_ERR_ADDR_CHAN4_7					0x9C8
#define IDMA_ERR_SEL_CHAN4_7					0x9CC

/* Timer/Counters */

/* Timer/Counters - Timer/Counters Registers */

#define TMR_CNTR0						0x850
#define TMR_CNTR1						0x854
#define TMR_CNTR2						0x858
#define TMR_CNTR3						0x85C
#define TMR_CNTR4						0x950
#define TMR_CNTR5						0x954
#define TMR_CNTR6						0x958
#define TMR_CNTR7						0x95C
#define TMR_CNTR_CTRL_0_3					0x864
#define TMR_CNTR_INT_CAUSE_0_3					0x868
#define TMR_CNTR_INT_MASK_0_3					0x86C
#define TMR_CNTR_CTRL_4_7					0x964
#define TMR_CNTR_INT_CAUSE_4_7					0x968
#define TMR_CNTR_INT_MASK_4_7					0x96C

/* Communication Unit */

/* Communication Unit - Communication Unit Registers */

#define CU_ENET0_ADDR_CTRL_LO					0xF200
#define CU_ENET0_ADDR_CTRL_HI					0xF204
#define CU_ENET0_RCV_BUF_PCI_HI_ADDR				0xF208
#define CU_ENET0_XMIT_BUF_PCI_HI_ADDR				0xF20C
#define CU_ENET0_RCV_DESC_PCI_HI_ADDR				0xF210
#define CU_ENET0_XMIT_DESC_PCI_HI_ADDR				0xF214
#define CU_ENET0_HASH_TBL_PCI_HI_ADDR				0xF218
#define CU_ENET1_ADDR_CTRL_LO					0xF220
#define CU_ENET1_ADDR_CTRL_HI					0xF224
#define CU_ENET1_RCV_BUF_PCI_HI_ADDR				0xF228
#define CU_ENET1_XMIT_BUF_PCI_HI_ADDR				0xF22C
#define CU_ENET1_RCV_DESC_PCI_HI_ADDR				0xF230
#define CU_ENET1_XMIT_DESC_PCI_HI_ADDR				0xF234
#define CU_ENET1_HASH_TBL_PCI_HI_ADDR				0xF238
#define CU_ENET2_ADDR_CTRL_LO					0xF240
#define CU_ENET2_ADDR_CTRL_HI					0xF244
#define CU_ENET2_RCV_BUF_PCI_HI_ADDR				0xF248
#define CU_ENET2_XMIT_BUF_PCI_HI_ADDR				0xF24C
#define CU_ENET2_RCV_DESC_PCI_HI_ADDR				0xF250
#define CU_ENET2_XMIT_DESC_PCI_HI_ADDR				0xF254
#define CU_ENET2_HASH_TBL_PCI_HI_ADDR				0xF258
#define CU_MPSC0_ADDR_CTRL_LO					0xF280
#define CU_MPSC0_ADDR_CTRL_HI					0xF284
#define CU_MPSC0_RCV_BUF_PCI_HI_ADDR				0xF288
#define CU_MPSC0_XMIT_BUF_PCI_HI_ADDR				0xF28C
#define CU_MPSC0_RCV_DESC_PCI_HI_ADDR				0xF290
#define CU_MPSC0_XMIT_DESC_PCI_HI_ADDR				0xF294
#define CU_MPSC1_ADDR_CTRL_LO					0xF2C0
#define CU_MPSC1_ADDR_CTRL_HI					0xF2C4
#define CU_MPSC1_RCV_BUF_PCI_HI_ADDR				0xF2C8
#define CU_MPSC1_XMIT_BUF_PCI_HI_ADDR				0xF2CC
#define CU_MPSC1_RCV_DESC_PCI_HI_ADDR				0xF2D0
#define CU_MPSC1_XMIT_DESC_PCI_HI_ADDR				0xF2D4
#define CU_COMM_UNIT_ARB_CTRL					0xF300
#define CU_COMM_UNIT_CFG					0xB40C
#define CU_COMM_UNIT_XBAR_TMOUT					0xF304
#define CU_COMM_UNIT_INT_CAUSE					0xF310
#define CU_COMM_UNIT_INT_MASK					0xF314
#define CU_COMM_UNIT_ERR_ADDR					0xF318

/* Fast (10/100 Mb) Ethernet Unit */

/* Fast Ethernet Unit - Fast Ethernet Unit Registers */

#define FE_ENET_PHY_ADDR					0x2000
#define FE_ENET_SMI						0x2010

/* Fast Ethernet Unit - Ethernet 0 Registers */

#define FE_ENET0_PORT_CFG					0x2400
#define FE_ENET0_PORT_CFG_EXT					0x2408
#define FE_ENET0_PORT_CMD					0x2410
#define FE_ENET0_PORT_STATUS					0x2418
#define FE_ENET0_SERIAL_PARAMS					0x2420
#define FE_ENET0_HASH_TBL_PTR					0x2428
#define FE_ENET0_FLOW_CTRL_SRC_ADDR_LO				0x2430
#define FE_ENET0_FLOW_CTRL_SRC_ADDR_HI				0x2438
#define FE_ENET0_SDMA_CFG					0x2440
#define FE_ENET0_SDMA_CMD					0x2448
#define FE_ENET0_INT_CAUSE					0x2450
#define FE_ENET0_INT_MASK					0x2458
#define FE_ENET0_FIRST_RX_DESC_PTR0				0x2480
#define FE_ENET0_FIRST_RX_DESC_PTR1				0x2484
#define FE_ENET0_FIRST_RX_DESC_PTR2				0x2488
#define FE_ENET0_FIRST_RX_DESC_PTR3				0x248C
#define FE_ENET0_CURR_RX_DESC_PTR0				0x24A0
#define FE_ENET0_CURR_RX_DESC_PTR1				0x24A4
#define FE_ENET0_CURR_RX_DESC_PTR2				0x24A8
#define FE_ENET0_CURR_RX_DESC_PTR3				0x24AC
#define FE_ENET0_CURR_TX_DESC_PTR0				0x24E0
#define FE_ENET0_CURR_TX_DESC_PTR1				0x24E4
#define FE_ENET0_IP_DIFF_SRVC_CODEPNT_TO_PRI0_LO		0x2460
#define FE_ENET0_IP_DIFF_SRVC_CODEPNT_TO_PRI0_HI		0x2464
#define FE_ENET0_IP_DIFF_SRVC_CODEPNT_TO_PRI1_LO		0x2468
#define FE_ENET0_IP_DIFF_SRVC_CODEPNT_TO_PRI1_HI		0x246C
#define FE_ENET0_VLAN_PRI_TAG_TO_PRI				0x2470
#define FE_ENET0_MIB_CNTR0					0x2500
#define FE_ENET0_MIB_CNTR1					0x2504
#define FE_ENET0_MIB_CNTR2					0x2508
#define FE_ENET0_MIB_CNTR3					0x250C
#define FE_ENET0_MIB_CNTR4					0x2510
#define FE_ENET0_MIB_CNTR5					0x2514
#define FE_ENET0_MIB_CNTR6					0x2518
#define FE_ENET0_MIB_CNTR7					0x251C
#define FE_ENET0_MIB_CNTR8					0x2520
#define FE_ENET0_MIB_CNTR9					0x2524
#define FE_ENET0_MIB_CNTR10					0x2528
#define FE_ENET0_MIB_CNTR11					0x252C
#define FE_ENET0_MIB_CNTR12					0x2530
#define FE_ENET0_MIB_CNTR13					0x2534
#define FE_ENET0_MIB_CNTR14					0x2538
#define FE_ENET0_MIB_CNTR15					0x253C
#define FE_ENET0_MIB_CNTR16					0x2540
#define FE_ENET0_MIB_CNTR17					0x2544
#define FE_ENET0_MIB_CNTR18					0x2548
#define FE_ENET0_MIB_CNTR19					0x254C
#define FE_ENET0_MIB_CNTR20					0x2550
#define FE_ENET0_MIB_CNTR21					0x2554
#define FE_ENET0_MIB_CNTR22					0x2558
#define FE_ENET0_MIB_CNTR23					0x255C
#define FE_ENET0_MIB_CNTR24					0x2560

/* Fast Ethernet Unit - Ethernet 1 Registers */

#define FE_ENET1_PORT_CFG					0x2800
#define FE_ENET1_PORT_CFG_EXT					0x2808
#define FE_ENET1_PORT_CMD					0x2810
#define FE_ENET1_PORT_STATUS					0x2818
#define FE_ENET1_SERIAL_PARAMS					0x2820
#define FE_ENET1_HASH_TBL_PTR					0x2828
#define FE_ENET1_FLOW_CTRL_SRC_ADDR_LO				0x2830
#define FE_ENET1_FLOW_CTRL_SRC_ADDR_HI				0x2838
#define FE_ENET1_SDMA_CFG					0x2840
#define FE_ENET1_SDMA_CMD					0x2848
#define FE_ENET1_INT_CAUSE					0x2850
#define FE_ENET1_INT_MASK					0x2858
#define FE_ENET1_FIRST_RX_DESC_PTR0				0x2880
#define FE_ENET1_FIRST_RX_DESC_PTR1				0x2884
#define FE_ENET1_FIRST_RX_DESC_PTR2				0x2888
#define FE_ENET1_FIRST_RX_DESC_PTR3				0x288C
#define FE_ENET1_CURR_RX_DESC_PTR0				0x28A0
#define FE_ENET1_CURR_RX_DESC_PTR1				0x28A4
#define FE_ENET1_CURR_RX_DESC_PTR2				0x28A8
#define FE_ENET1_CURR_RX_DESC_PTR3				0x28AC
#define FE_ENET1_CURR_TX_DESC_PTR0				0x28E0
#define FE_ENET1_CURR_TX_DESC_PTR1				0x28E4
#define FE_ENET1_IP_DIFF_SRVC_CODEPNT_TO_PRI0_LO		0x2860
#define FE_ENET1_IP_DIFF_SRVC_CODEPNT_TO_PRI0_HI		0x2864
#define FE_ENET1_IP_DIFF_SRVC_CODEPNT_TO_PRI1_LO		0x2868
#define FE_ENET1_IP_DIFF_SRVC_CODEPNT_TO_PRI1_HI		0x286C
#define FE_ENET1_VLAN_PRI_TAG_TO_PRI				0x2870
#define FE_ENET1_MIB_CNTR0					0x2900
#define FE_ENET1_MIB_CNTR1					0x2904
#define FE_ENET1_MIB_CNTR2					0x2908
#define FE_ENET1_MIB_CNTR3					0x290C
#define FE_ENET1_MIB_CNTR4					0x2910
#define FE_ENET1_MIB_CNTR5					0x2914
#define FE_ENET1_MIB_CNTR6					0x2918
#define FE_ENET1_MIB_CNTR7					0x291C
#define FE_ENET1_MIB_CNTR8					0x2920
#define FE_ENET1_MIB_CNTR9					0x2924
#define FE_ENET1_MIB_CNTR10					0x2928
#define FE_ENET1_MIB_CNTR11					0x292C
#define FE_ENET1_MIB_CNTR12					0x2930
#define FE_ENET1_MIB_CNTR13					0x2934
#define FE_ENET1_MIB_CNTR14					0x2938
#define FE_ENET1_MIB_CNTR15					0x293C
#define FE_ENET1_MIB_CNTR16					0x2940
#define FE_ENET1_MIB_CNTR17					0x2944
#define FE_ENET1_MIB_CNTR18					0x2948
#define FE_ENET1_MIB_CNTR19					0x294C
#define FE_ENET1_MIB_CNTR20					0x2950
#define FE_ENET1_MIB_CNTR21					0x2954
#define FE_ENET1_MIB_CNTR22					0x2958
#define FE_ENET1_MIB_CNTR23					0x295C
#define FE_ENET1_MIB_CNTR24					0x2960

/* Fast Ethernet Unit - Ethernet 2 Registers */

#define FE_ENET2_PORT_CFG					0x2C00
#define FE_ENET2_PORT_CFG_EXT					0x2C08
#define FE_ENET2_PORT_CMD					0x2C10
#define FE_ENET2_PORT_STATUS					0x2C18
#define FE_ENET2_SERIAL_PARAMS					0x2C20
#define FE_ENET2_HASH_TBL_PTR					0x2C28
#define FE_ENET2_FLOW_CTRL_SRC_ADDR_LO				0x2C30
#define FE_ENET2_FLOW_CTRL_SRC_ADDR_HI				0x2C38
#define FE_ENET2_SDMA_CFG					0x2C40
#define FE_ENET2_SDMA_CMD					0x2C48
#define FE_ENET2_INT_CAUSE					0x2C50
#define FE_ENET2_INT_MASK					0x2C58
#define FE_ENET2_FIRST_RX_DESC_PTR0				0x2C80
#define FE_ENET2_FIRST_RX_DESC_PTR1				0x2C84
#define FE_ENET2_FIRST_RX_DESC_PTR2				0x2C88
#define FE_ENET2_FIRST_RX_DESC_PTR3				0x2C8C
#define FE_ENET2_CURR_RX_DESC_PTR0				0x2CA0
#define FE_ENET2_CURR_RX_DESC_PTR1				0x2CA4
#define FE_ENET2_CURR_RX_DESC_PTR2				0x2CA8
#define FE_ENET2_CURR_RX_DESC_PTR3				0x2CAC
#define FE_ENET2_CURR_TX_DESC_PTR0				0x2CE0
#define FE_ENET2_CURR_TX_DESC_PTR1				0x2CE4
#define FE_ENET2_IP_DIFF_SRVC_CODEPNT_TO_PRI0_LO		0x2C60
#define FE_ENET2_IP_DIFF_SRVC_CODEPNT_TO_PRI0_HI		0x2C64
#define FE_ENET2_IP_DIFF_SRVC_CODEPNT_TO_PRI1_LO		0x2C68
#define FE_ENET2_IP_DIFF_SRVC_CODEPNT_TO_PRI1_HI		0x2C6C
#define FE_ENET2_VLAN_PRI_TAG_TO_PRI				0x2C70
#define FE_ENET2_MIB_CNTR0					0x2C00
#define FE_ENET2_MIB_CNTR1					0x2C04
#define FE_ENET2_MIB_CNTR2					0x2C08
#define FE_ENET2_MIB_CNTR3					0x2C0C
#define FE_ENET2_MIB_CNTR4					0x2C10
#define FE_ENET2_MIB_CNTR5					0x2C14
#define FE_ENET2_MIB_CNTR6					0x2C18
#define FE_ENET2_MIB_CNTR7					0x2C1C
#define FE_ENET2_MIB_CNTR8					0x2C20
#define FE_ENET2_MIB_CNTR9					0x2C24
#define FE_ENET2_MIB_CNTR10					0x2C28
#define FE_ENET2_MIB_CNTR11					0x2C2C
#define FE_ENET2_MIB_CNTR12					0x2C30
#define FE_ENET2_MIB_CNTR13					0x2C34
#define FE_ENET2_MIB_CNTR14					0x2C38
#define FE_ENET2_MIB_CNTR15					0x2C3C
#define FE_ENET2_MIB_CNTR16					0x2C40
#define FE_ENET2_MIB_CNTR17					0x2C44
#define FE_ENET2_MIB_CNTR18					0x2C48
#define FE_ENET2_MIB_CNTR19					0x2C4C
#define FE_ENET2_MIB_CNTR20					0x2C50
#define FE_ENET2_MIB_CNTR21					0x2C54
#define FE_ENET2_MIB_CNTR22					0x2C58
#define FE_ENET2_MIB_CNTR23					0x2C5C
#define FE_ENET2_MIB_CNTR24					0x2C60

/* Multi Protocol Serial Controller */

/* Multi Protocol Serial Controller - MPSC Signals Routing Registers */

#define MPSC_ROUTG						0xB400
#define MPSC_RX_CLK_ROUTG					0xB404
#define MPSC_TX_CLK_ROUTG					0xB408

/* Multi Protocol Serial Controller - MPSCs Interrupt Registers */

#define MPSC_MPSC0_CAUSE					0xB804
#define MPSC_MPSC0_MASK						0xB884
#define MPSC_MPSC1_CAUSE					0xB80C
#define MPSC_MPSC1_MASK						0xB88C

/* Multi Protocol Serial Controller - MPSC 0 Registers */

#define MPSC_MPSC0_MAIN_CFG_LO					0x8000
#define MPSC_MPSC0_MAIN_CFG_HI					0x8004
#define MPSC_MPSC0_PTCL_CFG					0x8008
#define MPSC_MPSC0_CHAN0_REG1					0x800C
#define MPSC_MPSC0_CHAN0_REG2					0x8010
#define MPSC_MPSC0_CHAN0_REG3					0x8014
#define MPSC_MPSC0_CHAN0_REG4					0x8018
#define MPSC_MPSC0_CHAN0_REG5					0x801C
#define MPSC_MPSC0_CHAN0_REG6					0x8020
#define MPSC_MPSC0_CHAN0_REG7					0x8024
#define MPSC_MPSC0_CHAN0_REG8					0x8028
#define MPSC_MPSC0_CHAN0_REG9					0x802C
#define MPSC_MPSC0_CHAN0_REG10					0x8030
#define MPSC_MPSC0_CHAN0_REG11					0x8034

/* Multi Protocol Serial Controller - MPSC 1 Registers */

#define MPSC_MPSC1_MAIN_CFG_LO					0x9000
#define MPSC_MPSC1_MAIN_CFG_HI					0x9004
#define MPSC_MPSC1_PTCL_CFG					0x9008
#define MPSC_MPSC1_CHAN1_REG1					0x900C
#define MPSC_MPSC1_CHAN1_REG2					0x9010
#define MPSC_MPSC1_CHAN1_REG3					0x9014
#define MPSC_MPSC1_CHAN1_REG4					0x9018
#define MPSC_MPSC1_CHAN1_REG5					0x901C
#define MPSC_MPSC1_CHAN1_REG6					0x9020
#define MPSC_MPSC1_CHAN1_REG7					0x9024
#define MPSC_MPSC1_CHAN1_REG8					0x9028
#define MPSC_MPSC1_CHAN1_REG9					0x902C
#define MPSC_MPSC1_CHAN1_REG10					0x9030
#define MPSC_MPSC1_CHAN1_REG11					0x9034

/* Multi Protocol Serial Controller Serial DMAs */

/* Multi Protocol Serial Controller Serial DMAs - SDMA Registers */

#define MPSCSDMA_CHAN0_CFG					0x4000
#define MPSCSDMA_CHAN0_CMD					0x4008
#define MPSCSDMA_CHAN0_CURR_RX_DESC_PTR				0x4810
#define MPSCSDMA_CHAN0_CURR_TX_DESC_PTR				0x4C10
#define MPSCSDMA_CHAN0_FIRST_TX_DESC_PTR			0x4C14
#define MPSCSDMA_CHAN1_CFG					0x6000
#define MPSCSDMA_CHAN1_CMD					0x6008
#define MPSCSDMA_CHAN1_CURR_RX_DESC_PTR				0x6810
#define MPSCSDMA_CHAN1_CURR_TX_DESC_PTR				0x6C10
#define MPSCSDMA_CHAN1_FIRST_TX_DESC_PTR			0x6C14

/* Multi Protocol Serial Controller Serial DMAs - SDMA Interrupts Registers */

#define MPSCSDMA_CAUSE						0xB800
#define MPSCSDMA_MASK						0xB880

/* Baude Rate Generators */

/* Baude Rate Generators - BRG Registers */

#define BRG0_CFG						0xB200
#define BRG0_BAUDE_TUNING					0xB204
#define BRG1_CFG						0xB208
#define BRG1_BAUDE_TUNING					0xB20C
#define BRG_CAUSE						0xB834
#define BRG_MASK						0xB8B4

/* Watchdog Timer */

/* Watchdog Timer - Watchdog Registers */

#define WDOG_CFG						0xB410
#define WDOG_VAL						0xB414

/* General Purpose Port */

/* General Purpose Port - General Purpose Port Registers */

#define GPP_IO_CTRL						0xF100
#define GPP_LVL_CTRL						0xF110
#define GPP_VAL							0xF104
#define GPP_INT_CAUSE						0xF108
#define GPP_INT_MASK						0xF10C

/* Multi Purpose Port */

/* Multi Purpose Port - MPP Interface Registers */

#define MPP_CTRL0						0xF000
#define MPP_CTRL1						0xF004
#define MPP_CTRL2						0xF008
#define MPP_CTRL3						0xF00C
#define MPP_SERIAL_PORT_MPLEX					0xF010

/* I2C Interface */

/* I2C Interface - I2C Interface Registers */

#define I2C_SLV_ADDR						0xC000
#define I2C_EXT_SLV_ADDR					0xC010
#define I2C_DATA						0xC004
#define I2C_CTRL						0xC008
#define I2C_STATUS						0xC00C
#define I2C_BAUDE_RATE						0xC00C
#define I2C_SFT_RST						0xC01C

/* Interrupt Controller */

/* Interrupt Controller - Interrupt Controller Registers */

#define ICI_MAIN_INT_CAUSE_LO					0xC18
#define ICI_MAIN_INT_CAUSE_HI					0xC68
#define ICI_CPU_INT_MASK_LO					0xC1C
#define ICI_CPU_INT_MASK_HI					0xC6C
#define ICI_CPU_SEL_CAUSE					0xC70
#define ICI_PCI0_INT_MASK_LO					0xC24
#define ICI_PCI0_INT_MASK_HI					0xC64
#define ICI_PCI0_SEL_CAUSE					0xC74
#define ICI_PCI1_INT_MASK_LO					0xCA4
#define ICI_PCI1_INT_MASK_HI					0xCE4
#define ICI_PCI1_SEL_CAUSE					0xCF4
#define ICI_CPU_INT0_MASK					0xE60
#define ICI_CPU_INT1_MASK					0xE64
#define ICI_CPU_INT2_MASK					0xE68
#define ICI_CPU_INT3_MASK					0xE6C

/* Reset Configuration */

/* Reset Configuration - Serial ROM Initialization Registers */

#define RC_SERIAL_INIT_PCI_HI_ADDR				0xF320
#define RC_SERIAL_INIT_LAST_DATA				0xF324
#define RC_SERIAL_INIT_CTRL					0xF328
#define RC_SERIAL_INIT_STATUS					0xF32C

/* SDRAM Configuration Register Definitions */

#define SDRAM_CFG_SDTYPE_BIT            17
#define SDRAM_CFG_SDLOAD_BIT            19

/* SDRAM Timing Parameters Register Definitions */

#define SDRAM_TMNG_PARAMS_CL_BIT        0
#define SDRAM_TMNG_PARAMS_TRP_BIT       2
#define SDRAM_TMNG_PARAMS_TRCD_BIT      4
#define SDRAM_TMNG_PARAMS_TRAS_BIT      8
#define SDRAM_TMNG_PARAMS_ECCEN_BIT     13
#define SDRAM_TMNG_PARAMS_RDSAMPLE_BIT	14
#define SDRAM_TMNG_PARAMS_RDDELAY_BIT	12

/* SDRAM Operation Mode Register Definitions */

#define SDRAM_OPER_CMD_NORMAL                   0x00000000
#define SDRAM_OPER_CMD_NOP                      0x00000001
#define SDRAM_OPER_CMD_PRECHARGE                0x00000002
#define SDRAM_OPER_CMD_MODE_REG_CMD_ENB         0x00000003
#define SDRAM_OPER_CMD_CBR_CYCLE_ENB            0x00000004
#define SDRAM_OPER_MODE_ACTIVATE_BIT            31
#define SDRAM_OPER_MODE_ACTIVATE_MASK           (1 << \
                                                 SDRAM_OPER_MODE_ACTIVATE_BIT)

/* SDRAM Bank Parameter Registers Definitions */

#define SDRAM_BANK_PARAMS_SDTYPE_16MBIT         0x1
#define SDRAM_BANK_PARAMS_SDTYPE_64_128MBIT     0x2
#define SDRAM_BANK_PARAMS_SDTYPE_256_512MBIT    0x3
#define SDRAM_BANK_PARAMS_SDTYPE_BIT            14

/* Default Timing Parameters */

#define SDRAM_TRAS_DFLT                 7       /* Tras default - 8 cycles */
#define SDRAM_TRP_DFLT                  2       /* Trp default - 3 cycles */
#define SDRAM_TRCD_DFLT                 2       /* Trcd default - 3 cycles */
#define SDRAM_TCL_DFLT                  2       /* Tcl default - 3 cycles */

/* Default Register Definitions */

#define MV64260_SDRAM_UMA_CTRL_DFLT             0x00000100

/* Definitions for illegal configuration of SDRAM registers */

#define MV64260_SDRAM_CFG_NON_CFG_BITS                  0x03FF3FFF
#define MV64260_SDRAM_ADDR_CTRL_NON_CFG_BITS            0xFFFFFFF0
#define MV64260_SDRAM_IF_XBAR_TMOUT_NON_CFG_BITS        0xFFFEFF00
#define MV64260_SDRAM_BANK_PARAMS_NON_CFG_BITS          0xFFF0FFFF

/* 
 * Following are 'shift' positions for various fields or bits within
 * some of the mv64260 registers.
 */

#define PCIIF_BASE_ADDR_REG_ENB_SCS0_BIT	0
#define PCIIF_BASE_ADDR_REG_ENB_SCS1_BIT	1
#define PCIIF_BASE_ADDR_REG_ENB_SCS2_BIT	2
#define PCIIF_BASE_ADDR_REG_ENB_SCS3_BIT	3

/* Bit definitions for Timer/Counter Registers */

/* Timer/Counter 0-3 Control Register bit and mask for timer 0 */

#define TMR_CNTR_CTRL_TC0EN_BIT         0
#define TMR_CNTR_CTRL_TC0EN_MASK        (1 << TMR_CNTR_CTRL_TC0EN_BIT)

#define TMR_CNTR_CTRL_TC0MOD_BIT        1
#define TMR_CNTR_CTRL_TC0MOD_MASK       (1 << TMR_CNTR_CTRL_TC0MOD_BIT)

/* Timer/Counter 0-3 Interrupt Cause Register bit and mask for timer 0 */

#define TMR_CNTR_INT_CAUSE_TC0_BIT      0
#define TMR_CNTR_INT_CAUSE_TC0_MASK     (1 << TMR_CNTR_INT_CAUSE_TC0_BIT)

/* Timer/Counter 0-3 Interrupt Mask Register shift bit and mask for timer 0 */

#define TMR_CNTR_INT_MASK_TC0_BIT       0
#define TMR_CNTR_INT_MASK_TC0_MASK      (1 << TMR_CNTR_INT_MASK_TC0_BIT)

/* PCI Interrupt cause bits and masks of interest */

#define PCIIF_ERR_CAUSE_PCIx_MMABORT_BIT	8
#define PCIIF_ERR_CAUSE_PCIx_MMABORT_MASK (1 << \
					   PCIIF_ERR_CAUSE_PCIx_MMABORT_BIT)

#define PCIIF_ERR_CAUSE_PCIx_MTABORT_BIT	9
#define PCIIF_ERR_CAUSE_PCIx_MTABORT_MASK (1 << \
					   PCIIF_ERR_CAUSE_PCIx_MTABORT_BIT)


/* 
 * CPU Address Decoding Macros 
 * ---------------------------
 *
 * Reference: "3. Address Space Decoding" and "4. CPU Interface"
 *             GT-64260A System Controller Manual, Rev A
 *
 * The CPU interface address decoding map consists of 22 address
 * windows.  Each window can have a minimum of 1MB of address
 * space, and up to 4GB.  Each window, with the exception of the
 * GT-64260A Internal Registers window, is defined by a Low and
 * High register.  The Low Decode Address register is used to set
 * the lower boundary for a region.  The High Decode Address register
 * is used to set the upper bound for a region.  The CPU address 
 * windows are restricted to a size of 2^n, where n >= 20 (1MB),
 * and the start address must be aligned to the window size.  n must
 * be greater than or equal to 20 since bits [19:0] of the CPU
 * address are not used for address space decoding.  A CPU address 
 * decoding window is disabled by setting the value of the Low Decode
 * register to be higher than the High Decode register.
 * 
 * CPU address decoding is accomplished by comparing the CPU address
 * with the values in the various CPU Low and High Decode registers:
 *
 * (a) Bits [31:20] of the CPU address are compared against bits [11:0] 
 *     in the various Low Decode registers.  The value must be greater 
 *     than or equal to the low decode value.
 *
 *                CPU [31:20] >= Low Decode [11:0]
 *
 * (b) Bits [31:20] of the CPU address are compared against bits [11:0]
 *     in the various High Decode registers.  The value must be less
 *     than or equal to the high decode value.
 *
 *                CPU [31:20] <= High Decode [11:0]
 *
 * (c) If all of the above are true, the target device is selected. 
 *
 * Low Decode Address Macro:
 *
 * The following macro is designed to determine the value to be programmed
 * in a Low Decode Address register based on the start address for the
 * window.  For example, for a window with a start address of 0x20000000
 * you would use the command:
 *
 * MV64260_LO_DECODE_ADDR(0x20000000)
 *
 * This will return the value 0x200, which you would then program in the
 * Low Decode Address register (Low Decode Address = 0x00000200).
 *
 * Low Decode Address Inverse Macro:
 *
 * The following macro is designed to determine the start address for a
 * window based on the value of the Low Decode Address register for that
 * window.  For example, for a Low Decode Address register value of
 * 0x00000200 you would use the command:
 *
 * MV64260_LO_DECODE_ADDR_INV(0x00000200)
 *
 * This will return the value 0x20000000, which is the start(base) address
 * for that window.
 * 
 * High Decode Address Macro:
 *
 * The following macro is designed to determine the value to be programmed
 * in a High Decode Address register based on the start address and size 
 * for the window.  For example, for a window with a start address of
 * 0x20000000 (Low Decode Address = 0x00000200) and a size of 0x10000000
 * (256MB) you would use the command:
 *
 * MV64260_HI_DECODE_ADDR(0x20000000, 0x10000000)
 *
 * This will return the value 0x2FF, which you would then program in the
 * High Decode Address register (High Decode Address = 0x000002FF).  This
 * would give you an address range of 0x20000000 to 0x2FFFFFFF for this
 * window.
 *
 * High Decode Address Inverse Macro:
 *
 * The following macro is designed to determine the end address for a 
 * window based on the value of the High Decode Address register for that
 * window.  For example, for a High Decode Address register value of
 * 0x000002FF you would use the command:
 *
 * MV64260_HI_DECODE_ADDR_INV(0x000002FF)
 *
 * This will return the value 0x30000000, which is the end address for
 * that window.  The address range for this window would consist of 
 * addresses up to, but not including, the end address 0x30000000.
 *  
 * CPU Address Window Size Macro:
 *
 * The following macro is designed to determine the size of a CPU 
 * interface address decoding window based on the values programmed in
 * the Low Decode Address and High Decode Address registers for that
 * window.  For example, for a window with a Low Decode Address value
 * of 0x00000200 and a High Decode Address value of 0x000002FF you 
 * would use the command:
 *
 * MV64260_CPU_ADDR_WNDW_SZ(0x00000200, 0x000002FF)
 *
 * This will return a value of 0x10000000 or 256MB. 
 *
 * CPU Address Remapping to PCI Macro:
 *
 * The following macro is designed to determine the value to be programmed
 * in a CPU to PCI address window remap register based on the start address
 * for the window on the PCI bus.  For example, for a window with a PCI
 * start address of 0x90000000 you would use the command:
 *
 * MV64260_CPU_TO_PCI_ADDR_RMAP(0x90000000)
 *
 * This will return a value of 0x900, which you would then program
 * in the associated Address Remap register.
 */

#define MV64260_LO_DECODE_ADDR(start)		((start) >> 20)
#define MV64260_LO_DECODE_ADDR_INV(regVal)	((regVal) << 20)
#define MV64260_HI_DECODE_ADDR(start, size)	(((((start) + (size)) \
						   >> 20) -1) & 0x00000fff)
#define MV64260_HI_DECODE_ADDR_INV(regVal)	(((regVal) + 1) << 20)
#define MV64260_CPU_ADDR_WNDW_SZ(loReg, hiReg)	\
    ((MV64260_HI_DECODE_ADDR_INV(hiReg)) - (MV64260_LO_DECODE_ADDR_INV(loReg))) 

#define MV64260_CPU_TO_PCI_ADDR_RMAP(pciStart)	((pciStart) >> 20)

/* PCI to SCSx remapping encode is identical with PCI to CPU remap encode */

#define MV64260_PCI_TO_SCS_ADDR_RMAP(scsStart)	((scsStart) >> 20)

/*
 * When we wish to disable an upper an lower decoder, we can program with
 * the following values:
 */

#define MV64260_LO_DECODE_DISABLE	0x00000fff
#define MV64260_HI_DECODE_DISABLE	0x00000000

/* Ditto for remap register values: */

#define MV64260_LO_RMAP_DISABLE	0x00000fff
#define MV64260_HI_RMAP_DISABLE	0x00000000

/* Ditto for PCI low and hi decode disable values */

#define MV64260_PCI_LO_DECODE_DISABLE	0x01001fff
#define MV64260_PCI_HI_DECODE_DISABLE	0x00000000

/* 
 * PCI Address Decoding Macros 
 * ---------------------------
 *
 * Reference: "3. Address Space Decoding" and "8. PCI Interface"
 *             GT-64260A System Controller Manual, Rev A
 *
 * The PCI interface supports 15 regular address windows plus 12 64-bit
 * addressing windows.  Each window, with the exception of the GT-64260A
 * Internal Registers window, is defined by base and size registers,
 * and can decode up to 4GB of space.  The PCI interface also supports
 * address remapping to any of the resources.  The PCI base register for
 * a window is referred to as a BAR (Base Address Register).  A window
 * is disabled via the Base Address Register Enable register.  The BARs
 * are located within various PCI function headers and are accessed via
 * PCI configuration space.  The BAR size registers are located within
 * the GT-64260A's Internal Register space.
 *
 * PCI address decoding is accomplished by comparing the PCI address
 * to the various BAR and size registers:
 *
 * (a) Bits [31:N] of the PCI address are compared against bits [31:N]
 *     in the various BARs.  These values must match exactly.
 * (b) The value of 'N' is set by the least significant bit with a '0'
 *     in the Bank Size registers, starting from bit 31.
 *
 * The BAR Size register must be programmed as a set of 1's (starting
 * from the Least Significant Bit) followed by a set of 0's.  The set
 * of 1's defines the size.  For example, if the size register is set
 * to 0x001FF000 (bits [11:0] will always be 0 since they are reserved
 * and read-only), it defines a size of 2MB.  This is because bit [21] 
 * is the least significant bit with a '0', starting from bit [31] (the 
 * most significant), before a '1' is encountered at bit [20], and
 * 2^21 = 0x00200000 = 2MB.  Since PCI address decoding starts with 
 * bit [12] of the PCI address, each window can have a minimum of 
 * 4Kbyte (0x1000) of address space.
 *
 * PCI BAR Size Macro:
 * 
 * The following macro is designed to determine the value to be programmed
 * in a BAR Size register based on the window size and with a 4Kbyte
 * granularity.  For example, for a window size of 0x02000000 (32MB)
 * you would use the command:
 *
 * MV64260_PCI_BAR_SZ(0x02000000)
 *
 * This will return a value of 0x01FFF000, which you would then program
 * in the BAR Size register.
 *
 * PCI BAR Size Inverse Macro:
 *
 * The following macro is designed to convert the value read from a BAR
 * Size register into the actual size in bytes of the window.  For example,
 * for a BAR Size value of 0x01FFF000 you would use the command:
 *
 * MV64260_PCI_BAR_SZ_INV(0x01FFF000)
 *
 * This will return a value of 0x02000000 or 32MB.
 */

#define MV64260_PCI_BAR_SZ(size)	((((size) >> 12) - 1) << 12)
#define MV64260_PCI_BAR_SZ_INV(barSize)	((((barSize) >> 12) + 1) << 12)
	   
/* Miscellaneous MV64260 Definitions */

#define MV64260_REG_SZ		4		/* size of MV64260 register */
#define MV64260_MAX_BUS         2               /* Max # PCI buses on MV64260 */
#define MV64260_REG_SPACE_SIZE  0x10000         /* 64Kb Internal Reg Space */

/* 
 * Macros for reading from and writing to MV64260 Internal Registers 
 *
 * The MV64260 Internal Registers must be read from and written to
 * with endian swapping.  The CPU bus is big endian and the internal
 * registers are little endian.
 *
 * After we write a 32-bit quantity to an internal register we "confirm"
 * (push out to chip) by reading back from the register.
 */

#define MV64260_READ32(base,reg)  sysInLong(reg + base)

#define MV64260_WRITE32_PUSH(base,reg,val) \
{ \
  sysOutLong((reg + base), val); \
  (void)MV64260_READ32(reg,base); \
}

/* Size of an MV64260 register */

#define MV64260_REG_SIZE        4

/*
 * Many of the registers in the MV64260 are initialized statically via
 * a table-driven procedure.  There are four kinds of possible initialization
 * procedures for a particular register:
 *
 *    1.  Direct register write.
 *    2.  PCI configuration write on primary (bus 0) interface.
 *    3.  PCI configuration write on secondary (alternate or bus 1) interface.
 *    4.  Read to initialide (unlatch).
 *
 * Each of these initialization methods is associated with a unique
 * code.  The initialization procedure will query the table entry for 
 * the initialization code and then handle the initialization in the 
 * prescribed manner.  The following macros assist in the table building.
 *
 * First let's define the table entry discriminators and end marker:
 */

#define MV64260_INTRNL		0 /* Mark register as direct "write" access */
#define MV64260_PCICFG		1 /* Mark register as PCI config type */
#define MV64260_PCICFG_ALT	2 /* Mark register as PCI config alt type */
#define MV64260_READ_INIT	3 /* Mark register as "read" to init */
#define END_INIT_MV64260_REG	0xffffffff	/* End of register list */

/* Now define the essentials for direct register write access: */

#define YES_INIT_MV64260_REG(offset,val)  (MV64260_INTRNL),(offset),(val),
#define MV64260_INTRNL_INIT_SZ	3	/* # of elements in above macro */

/* Now let's define the essentials for the PCI primary config access */

#define YES_CFG_MV64260_REG(pciFunc,offset,val) (MV64260_PCICFG),(pciFunc),\
                                                (offset),(val),

#define MV64260_PCICFG_INIT_SZ  4	/* # of elements in above macro */

/* Now the PCI alternate config access: */

#define YES_CFG_MV64260_REG_ALT(pciFunc,offset,val) (MV64260_PCICFG_ALT), \
						    (pciFunc),\
                                                    (offset),(val),

#define MV64260_PCICFG_ALT_INIT_SZ  4	/* # of elements in above macro */

/* Now the "read to unlatch" macro: */

#define READ_INIT_MV64260_REG(offset) 	(MV64260_READ_INIT),(offset),
#define MV64260_READ_INIT_SZ	2	/* # of elements in above macro */

/* For PCI config register updating from table */

#define CFG_BUS(x)	   0		/* Always access from bus 0 */
#define CFG_DEV(x)	   0		/* Device number is always 0 */
#define CFG_FCN(x)    *(x+1)		/* Function number */
#define CFG_OFFSET(x) *(x+2)		/* Device number */
#define CFG_SZ(x)          4		/* Size in bytes is always 4 */
#define CFG_VAL(x)    *(x+3)		/* Value to program */

#define PCI_FUNC0	0
#define PCI_FUNC1	1
#define PCI_FUNC2	2
#define PCI_FUNC3	3
#define PCI_FUNC4	4
#define PCI_FUNC5	5
#define PCI_FUNC6	6
#define PCI_FUNC7	7

/*
 * Some of these MV64260 registers are not initialized at all via the
 * static table-driven method but we still want to put a place holder
 * in the table which names the register and identifies it as one which
 * is not statically initialized.  The following macro generates no code
 * but allows us to make this place holder table entry.
 */

#define NOT_INIT_MV64260_REG(offset, desc)         /* No code for this macro */
#define NOT_CFG_MV64260_REG(fcn, offset, desc)     /* No code for this macro */
#define NOT_CFG_MV64260_REG_ALT(fcn, offset, desc) /* No code for this macro */

/* Define the "all mask" used by many MV64260 registers (mask bit = 0) */

#define MASK_ALL	0

#ifdef __cplusplus
    }
#endif

#endif /* __INCmv64260h */
