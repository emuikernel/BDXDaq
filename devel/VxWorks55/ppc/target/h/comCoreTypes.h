/* comCoreTypes.h generated by WIDL Version 2.2.1 on 10-Dec-01 at 11:59:07 AM */

#include "comBase.h"

#ifndef __INCcomCoreTypes_h
#define __INCcomCoreTypes_h


#ifdef __cplusplus
extern "C" {
#endif

int include_comCoreTypes (void);

#ifndef __IWindTypes_FWD_DEFINED__
#define __IWindTypes_FWD_DEFINED__
typedef interface IWindTypes IWindTypes;
#endif /* __IWindTypes_FWD_DEFINED__ */

#ifndef __IUnknown_FWD_DEFINED__
#define __IUnknown_FWD_DEFINED__
typedef interface IUnknown IUnknown;
#endif /* __IUnknown_FWD_DEFINED__ */

#ifndef __IClassFactory_FWD_DEFINED__
#define __IClassFactory_FWD_DEFINED__
typedef interface IClassFactory IClassFactory;
#endif /* __IClassFactory_FWD_DEFINED__ */

#ifndef __IMultiQI_FWD_DEFINED__
#define __IMultiQI_FWD_DEFINED__
typedef interface IMultiQI IMultiQI;
#endif /* __IMultiQI_FWD_DEFINED__ */

#ifndef __IRegistry_FWD_DEFINED__
#define __IRegistry_FWD_DEFINED__
typedef interface IRegistry IRegistry;
#endif /* __IRegistry_FWD_DEFINED__ */

#ifndef __IEnumGUID_FWD_DEFINED__
#define __IEnumGUID_FWD_DEFINED__
typedef interface IEnumGUID IEnumGUID;
#endif /* __IEnumGUID_FWD_DEFINED__ */

#ifndef __IEnumString_FWD_DEFINED__
#define __IEnumString_FWD_DEFINED__
typedef interface IEnumString IEnumString;
#endif /* __IEnumString_FWD_DEFINED__ */

#ifndef __IEnumUnknown_FWD_DEFINED__
#define __IEnumUnknown_FWD_DEFINED__
typedef interface IEnumUnknown IEnumUnknown;
#endif /* __IEnumUnknown_FWD_DEFINED__ */

#ifndef __IMalloc_FWD_DEFINED__
#define __IMalloc_FWD_DEFINED__
typedef interface IMalloc IMalloc;
#endif /* __IMalloc_FWD_DEFINED__ */

#if 0
/* These types are defined by the OS (vxWorks.h) */
typedef unsigned char UCHAR;

typedef unsigned short USHORT;

typedef unsigned long ULONG;

typedef int BOOL;

typedef unsigned int UINT;

#endif
#if !(defined (CPU) && defined (SIMNT) && (CPU == SIMNT))
/* These are defined by the SIMNT BSP */
typedef short WORD;

typedef unsigned long DWORD;

#endif
typedef unsigned char BYTE;

typedef char CHAR;

typedef short SHORT;

typedef long LONG;

typedef float FLOAT;

typedef double DOUBLE;

typedef long SCODE;

typedef long HRESULT;

typedef int INT;

typedef unsigned short WCHAR;

typedef unsigned short OLECHAR;

typedef void* PVOID;

typedef void* LPVOID;

typedef OLECHAR* LPOLESTR;

typedef WCHAR* LPWSTR;

typedef const OLECHAR* LPCOLESTR;

typedef const WCHAR* LPCWSTR;

typedef long long LONGLONG;
typedef long unsigned long ULONGLONG;
#if 0
typedef hyper LONGLONG;

typedef unsigned hyper ULONGLONG;

#else
typedef LONGLONG hyper;
typedef ULONGLONG uhyper;
#endif
typedef LONGLONG LARGE_INTEGER;

typedef ULONGLONG ULARGE_INTEGER;

struct _tagCY
{
LONGLONG int64;
};

typedef struct _tagCY CY;

typedef LONGLONG OID;

typedef LONGLONG OXID;

typedef unsigned short PROTSEQ;

/* Basic IDL types */
typedef unsigned char byte;
typedef unsigned char uchar;
typedef unsigned long ulong;
struct _FILETIME
{
DWORD dwLowDateTime;
DWORD dwHighDateTime;
};

typedef struct _FILETIME FILETIME;

typedef struct _FILETIME* PFILETIME;

typedef struct _FILETIME* LPFILETIME;

struct _SYSTEMTIME
{
WORD wYear;
WORD wMonth;
WORD wDayOfWeek;
WORD wDay;
WORD wHour;
WORD wMinute;
WORD wSecond;
WORD wMilliseconds;
};

typedef struct _SYSTEMTIME SYSTEMTIME;

typedef struct _SYSTEMTIME* PSYSTEMTIME;

typedef struct _SYSTEMTIME* LPSYSTEMTIME;

struct _SECURITY_ATTRIBUTES
{
DWORD nLength;
LPVOID lpSecurityDescriptor;
BOOL bInheritHandle;
};

typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;

typedef struct _SECURITY_ATTRIBUTES* PSECURITY_ATTRIBUTES;

typedef struct _SECURITY_ATTRIBUTES* LPSECURITY_ATTRIBUTES;

typedef USHORT SECURITY_DESCRIPTOR_CONTROL;

typedef USHORT* PSECURITY_DESCRIPTOR_CONTROL;

typedef PVOID PSID;

struct _ACL
{
UCHAR AclRevision;
UCHAR Sbz1;
USHORT AclSize;
USHORT AceCount;
USHORT Sbz2;
};

typedef struct _ACL ACL;

typedef ACL* PACL;

struct _SECURITY_DESCRIPTOR
{
UCHAR Revision;
UCHAR Sbz1;
SECURITY_DESCRIPTOR_CONTROL Control;
PSID Owner;
PSID Group;
PACL Sacl;
PACL Dacl;
};

typedef struct _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;

typedef struct _SECURITY_DESCRIPTOR* PISECURITY_DESCRIPTOR;

struct _COAUTHIDENTITY
{
LPWSTR User;
ULONG UserLength;
LPWSTR Domain;
ULONG DomainLength;
LPWSTR Password;
ULONG PasswordLength;
ULONG Flags;
};

typedef struct _COAUTHIDENTITY COAUTHIDENTITY;

struct _COAUTHINFO
{
DWORD dwAuthnSvc;
DWORD dwAuthzSvc;
LPWSTR pwszServerPrincName;
DWORD dwAuthnLevel;
DWORD dwImpersonationLevel;
COAUTHIDENTITY* pAuthIdentityData;
DWORD dwCapabilities;
};

typedef struct _COAUTHINFO COAUTHINFO;

struct _COSERVERINFO
{
DWORD dwReserved1;
LPWSTR pwszName;
COAUTHINFO* pAuthInfo;
DWORD dwReserved2;
};

typedef struct _COSERVERINFO COSERVERINFO;

#ifndef GUID_DEFINED
#define GUID_DEFINED
struct _GUID
{
DWORD Data1;
WORD Data2;
WORD Data3;
BYTE Data4[8];
};

typedef struct _GUID GUID;

typedef struct _GUID* LPGUID;

#endif /* !GUID_DEFINED */
extern const GUID GUID_NULL;
#define IID_NULL GUID_NULL
typedef GUID IID;

typedef IID* LPIID;

#define __IID_DEFINED__
typedef GUID CLSID;

typedef CLSID* LPCLSID;

#define CLSID_NULL GUID_NULL
typedef GUID IPID;

typedef IPID* LPIPID;

typedef GUID CATID;

typedef CATID* LPCATID;

#define CATID_NULL GUID_NULL
typedef const GUID WIDL_CPP_REF  REFGUID;

typedef const IID WIDL_CPP_REF  REFIID;

typedef const CLSID WIDL_CPP_REF  REFCLSID;

typedef const IPID WIDL_CPP_REF  REFIPID;

enum tagCLSCTX
{
CLSCTX_INPROC_SERVER = 1,
CLSCTX_INPROC_HANDLER = 2,
CLSCTX_LOCAL_SERVER = 4,
CLSCTX_INPROC_SERVER16 = 8,
CLSCTX_REMOTE_SERVER = 16,
CLSCTX_INPROC_HANDLER16 = 32,
CLSCTX_INPROC_SERVERX86 = 64,
CLSCTX_INPROC_HANDLERX86 = 128,
};

typedef enum tagCLSCTX CLSCTX;

enum tagMSHLFLAGS
{
MSHLFLAGS_NORMAL = 0,
MSHLFLAGS_TABLESTRONG = 1,
MSHLFLAGS_TABLEWEAK = 2,
MSHLFLAGS_NOPING = 4,
};

typedef enum tagMSHLFLAGS MSHLFLAGS;

enum tagMSHCTX
{
MSHCTX_LOCAL = 0,
MSHCTX_NOSHAREDMEM = 1,
MSHCTX_DIFFERENTMACHINE = 2,
MSHCTX_INPROC = 3,
};

typedef enum tagMSHCTX MSHCTX;

typedef DWORD LCID;

struct _BYTE_BLOB
{
unsigned long clSize;
byte abData[1];
};

typedef struct _BYTE_BLOB BYTE_BLOB;

typedef BYTE_BLOB* UP_BYTE_BLOB;

struct _WORD_BLOB
{
unsigned long clSize;
unsigned short asData[1];
};

typedef struct _WORD_BLOB WORD_BLOB;

typedef WORD_BLOB* UP_WORD_BLOB;

struct _DWORD_BLOB
{
unsigned long clSize;
unsigned long alData[1];
};

typedef struct _DWORD_BLOB DWORD_BLOB;

typedef DWORD_BLOB* UP_DWORD_BLOB;

struct _FLAGGED_BYTE_BLOB
{
unsigned long fFlags;
unsigned long clSize;
byte abData[1];
};

typedef struct _FLAGGED_BYTE_BLOB FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB* UP_FLAGGED_BYTE_BLOB;

struct _FLAGGED_WORD_BLOB
{
unsigned long fFlags;
unsigned long clSize;
unsigned short asData[1];
};

typedef struct _FLAGGED_WORD_BLOB FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB* UP_FLAGGED_WORD_BLOB;

struct _BYTE_SIZEDARR
{
unsigned long clSize;
byte* pData;
};

typedef struct _BYTE_SIZEDARR BYTE_SIZEDARR;

struct _SHORT_SIZEDARR
{
unsigned long clSize;
unsigned short* pData;
};

typedef struct _SHORT_SIZEDARR WORD_SIZEDARR;

struct _LONG_SIZEDARR
{
unsigned long clSize;
unsigned long* pData;
};

typedef struct _LONG_SIZEDARR DWORD_SIZEDARR;

struct _HYPER_SIZEDARR
{
unsigned long clSize;
hyper* pData;
};

typedef struct _HYPER_SIZEDARR HYPER_SIZEDARR;

typedef double DATE;

struct tagDEC
{
USHORT wReserved;
BYTE scale;
BYTE sign;
ULONG Hi32;
ULONGLONG Lo64;
};

typedef struct tagDEC DECIMAL;

typedef OLECHAR* BSTR;

typedef BSTR* LPBSTR;

/* 0 == FALSE, -1 == TRUE */
typedef short VARIANT_BOOL;

typedef BYTE boolean;
#if 0
typedef boolean BOOLEAN;

#endif
#define VARIANT_TRUE ((VARIANT_BOOL)0xffff)
#define VARIANT_FALSE ((VARIANT_BOOL)0)
struct tagBLOB
{
ULONG cbSize;
BYTE* pBlobData;
};

typedef struct tagBLOB BLOB;

typedef struct tagBLOB* LPBLOB;

typedef ULONG PROPID;

typedef IUnknown* LPUNKNOWN;

typedef IClassFactory* LPCLASSFACTORY;

typedef IMultiQI* LPMULTIQI;

struct tagMULTI_QI
{
const IID* pIID;
IUnknown* pItf;
HRESULT hr;
};

typedef struct tagMULTI_QI MULTI_QI;

typedef IEnumGUID* LPENUMGUID;

typedef IEnumString* LPENUMSTRING;

typedef IEnumUnknown* LPENUMUNKNOWN;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_END
    } IWindTypesVtbl;

#ifdef __cplusplus

interface IWindTypes {};

#else

/* C interface definition for IWindTypes */

interface IWindTypes
    {
    const IWindTypesVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IWindTypes;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_END
    } IUnknownVtbl;

#ifdef __cplusplus

interface IUnknown
{
virtual HRESULT QueryInterface (REFIID riid, void** ppvObject) =0;

virtual ULONG AddRef () =0;

virtual ULONG Release () =0;

};

#else

/* C interface definition for IUnknown */

interface IUnknown
    {
    const IUnknownVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IUnknown;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, CreateInstance, (IClassFactory* pThis, IUnknown* pUnkOuter, REFIID riid, void** ppvObject));

#define IClassFactory_CreateInstance(pThis, pUnkOuter, riid, ppvObject) pThis->lpVtbl->CreateInstance(COM_ADJUST_THIS(pThis), pUnkOuter, riid, ppvObject)

    COM_VTBL_ENTRY (HRESULT, LockServer, (IClassFactory* pThis, BOOL fLock));

#define IClassFactory_LockServer(pThis, fLock) pThis->lpVtbl->LockServer(COM_ADJUST_THIS(pThis), fLock)

    COM_VTBL_END
    } IClassFactoryVtbl;

#ifdef __cplusplus

interface IClassFactory : public IUnknown
{
virtual HRESULT CreateInstance (IUnknown* pUnkOuter, REFIID riid, void** ppvObject) =0;

virtual HRESULT LockServer (BOOL fLock) =0;

};

#else

/* C interface definition for IClassFactory */

interface IClassFactory
    {
    const IClassFactoryVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IClassFactory;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, QueryMultipleInterfaces, (IMultiQI* pThis, ULONG cMQIs, MULTI_QI* pMQIs));

#define IMultiQI_QueryMultipleInterfaces(pThis, cMQIs, pMQIs) pThis->lpVtbl->QueryMultipleInterfaces(COM_ADJUST_THIS(pThis), cMQIs, pMQIs)

    COM_VTBL_END
    } IMultiQIVtbl;

#ifdef __cplusplus

interface IMultiQI : public IUnknown
{
virtual HRESULT QueryMultipleInterfaces (ULONG cMQIs, MULTI_QI* pMQIs) =0;

};

#else

/* C interface definition for IMultiQI */

interface IMultiQI
    {
    const IMultiQIVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IMultiQI;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, RegisterClass, (IRegistry* pThis, REFCLSID clsid, void* pfnGetClassObject));

#define IRegistry_RegisterClass(pThis, clsid, pfnGetClassObject) pThis->lpVtbl->RegisterClass(COM_ADJUST_THIS(pThis), clsid, pfnGetClassObject)

    COM_VTBL_ENTRY (HRESULT, IsClassRegistered, (IRegistry* pThis, REFCLSID clsid));

#define IRegistry_IsClassRegistered(pThis, clsid) pThis->lpVtbl->IsClassRegistered(COM_ADJUST_THIS(pThis), clsid)

    COM_VTBL_ENTRY (HRESULT, CreateInstance, (IRegistry* pThis, REFCLSID clsid, IUnknown* pUnkOuter, DWORD dwClsContext, const char* hint, ULONG cMQIs, MULTI_QI* pMQIs));

#define IRegistry_CreateInstance(pThis, clsid, pUnkOuter, dwClsContext, hint, cMQIs, pMQIs) pThis->lpVtbl->CreateInstance(COM_ADJUST_THIS(pThis), clsid, pUnkOuter, dwClsContext, hint, cMQIs, pMQIs)

    COM_VTBL_ENTRY (HRESULT, GetClassObject, (IRegistry* pThis, REFCLSID clsid, REFIID iid, DWORD dwClsContext, const char* hint, IUnknown** ppClsObj));

#define IRegistry_GetClassObject(pThis, clsid, iid, dwClsContext, hint, ppClsObj) pThis->lpVtbl->GetClassObject(COM_ADJUST_THIS(pThis), clsid, iid, dwClsContext, hint, ppClsObj)

    COM_VTBL_ENTRY (HRESULT, GetClassID, (IRegistry* pThis, DWORD dwIndex, LPCLSID pclsid));

#define IRegistry_GetClassID(pThis, dwIndex, pclsid) pThis->lpVtbl->GetClassID(COM_ADJUST_THIS(pThis), dwIndex, pclsid)

    COM_VTBL_END
    } IRegistryVtbl;

#ifdef __cplusplus

interface IRegistry : public IUnknown
{
virtual HRESULT RegisterClass (REFCLSID clsid, void* pfnGetClassObject) =0;

virtual HRESULT IsClassRegistered (REFCLSID clsid) =0;

virtual HRESULT CreateInstance (REFCLSID clsid, IUnknown* pUnkOuter, DWORD dwClsContext, const char* hint, ULONG cMQIs, MULTI_QI* pMQIs) =0;

virtual HRESULT GetClassObject (REFCLSID clsid, REFIID iid, DWORD dwClsContext, const char* hint, IUnknown** ppClsObj) =0;

virtual HRESULT GetClassID (DWORD dwIndex, LPCLSID pclsid) =0;

};

#else

/* C interface definition for IRegistry */

interface IRegistry
    {
    const IRegistryVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IRegistry;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Next, (IEnumGUID* pThis, ULONG celt, GUID* rgelt, ULONG* pceltFetched));

#define IEnumGUID_Next(pThis, celt, rgelt, pceltFetched) pThis->lpVtbl->Next(COM_ADJUST_THIS(pThis), celt, rgelt, pceltFetched)

    COM_VTBL_ENTRY (HRESULT, Skip, (IEnumGUID* pThis, ULONG celt));

#define IEnumGUID_Skip(pThis, celt) pThis->lpVtbl->Skip(COM_ADJUST_THIS(pThis), celt)

    COM_VTBL_ENTRY (HRESULT, Reset, (IEnumGUID* pThis));

#define IEnumGUID_Reset(pThis) pThis->lpVtbl->Reset(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Clone, (IEnumGUID* pThis, IEnumGUID** ppenum));

#define IEnumGUID_Clone(pThis, ppenum) pThis->lpVtbl->Clone(COM_ADJUST_THIS(pThis), ppenum)

    COM_VTBL_END
    } IEnumGUIDVtbl;

#ifdef __cplusplus

interface IEnumGUID : public IUnknown
{
virtual HRESULT Next (ULONG celt, GUID* rgelt, ULONG* pceltFetched) =0;

virtual HRESULT Skip (ULONG celt) =0;

virtual HRESULT Reset () =0;

virtual HRESULT Clone (IEnumGUID** ppenum) =0;

};

#else

/* C interface definition for IEnumGUID */

interface IEnumGUID
    {
    const IEnumGUIDVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IEnumGUID;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Next, (IEnumString* pThis, ULONG celt, LPOLESTR* rgelt, ULONG* pceltFetched));

#define IEnumString_Next(pThis, celt, rgelt, pceltFetched) pThis->lpVtbl->Next(COM_ADJUST_THIS(pThis), celt, rgelt, pceltFetched)

    COM_VTBL_ENTRY (HRESULT, Skip, (IEnumString* pThis, ULONG celt));

#define IEnumString_Skip(pThis, celt) pThis->lpVtbl->Skip(COM_ADJUST_THIS(pThis), celt)

    COM_VTBL_ENTRY (HRESULT, Reset, (IEnumString* pThis));

#define IEnumString_Reset(pThis) pThis->lpVtbl->Reset(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Clone, (IEnumString* pThis, IEnumString** ppenum));

#define IEnumString_Clone(pThis, ppenum) pThis->lpVtbl->Clone(COM_ADJUST_THIS(pThis), ppenum)

    COM_VTBL_END
    } IEnumStringVtbl;

#ifdef __cplusplus

interface IEnumString : public IUnknown
{
virtual HRESULT Next (ULONG celt, LPOLESTR* rgelt, ULONG* pceltFetched) =0;

virtual HRESULT Skip (ULONG celt) =0;

virtual HRESULT Reset () =0;

virtual HRESULT Clone (IEnumString** ppenum) =0;

};

#else

/* C interface definition for IEnumString */

interface IEnumString
    {
    const IEnumStringVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IEnumString;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Next, (IEnumUnknown* pThis, ULONG celt, IUnknown** rgelt, ULONG* pceltFetched));

#define IEnumUnknown_Next(pThis, celt, rgelt, pceltFetched) pThis->lpVtbl->Next(COM_ADJUST_THIS(pThis), celt, rgelt, pceltFetched)

    COM_VTBL_ENTRY (HRESULT, Skip, (IEnumUnknown* pThis, ULONG celt));

#define IEnumUnknown_Skip(pThis, celt) pThis->lpVtbl->Skip(COM_ADJUST_THIS(pThis), celt)

    COM_VTBL_ENTRY (HRESULT, Reset, (IEnumUnknown* pThis));

#define IEnumUnknown_Reset(pThis) pThis->lpVtbl->Reset(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Clone, (IEnumUnknown* pThis, IEnumUnknown** ppenum));

#define IEnumUnknown_Clone(pThis, ppenum) pThis->lpVtbl->Clone(COM_ADJUST_THIS(pThis), ppenum)

    COM_VTBL_END
    } IEnumUnknownVtbl;

#ifdef __cplusplus

interface IEnumUnknown : public IUnknown
{
virtual HRESULT Next (ULONG celt, IUnknown** rgelt, ULONG* pceltFetched) =0;

virtual HRESULT Skip (ULONG celt) =0;

virtual HRESULT Reset () =0;

virtual HRESULT Clone (IEnumUnknown** ppenum) =0;

};

#else

/* C interface definition for IEnumUnknown */

interface IEnumUnknown
    {
    const IEnumUnknownVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IEnumUnknown;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (void*, Alloc, (IMalloc* pThis, ULONG cb));

#define IMalloc_Alloc(pThis, cb) pThis->lpVtbl->Alloc(COM_ADJUST_THIS(pThis), cb)

    COM_VTBL_ENTRY (void*, Realloc, (IMalloc* pThis, void* pv, ULONG cb));

#define IMalloc_Realloc(pThis, pv, cb) pThis->lpVtbl->Realloc(COM_ADJUST_THIS(pThis), pv, cb)

    COM_VTBL_ENTRY (void, Free, (IMalloc* pThis, void* pv));

#define IMalloc_Free(pThis, pv) pThis->lpVtbl->Free(COM_ADJUST_THIS(pThis), pv)

    COM_VTBL_ENTRY (ULONG, GetSize, (IMalloc* pThis, void* pv));

#define IMalloc_GetSize(pThis, pv) pThis->lpVtbl->GetSize(COM_ADJUST_THIS(pThis), pv)

    COM_VTBL_ENTRY (int, DidAlloc, (IMalloc* pThis, void* pv));

#define IMalloc_DidAlloc(pThis, pv) pThis->lpVtbl->DidAlloc(COM_ADJUST_THIS(pThis), pv)

    COM_VTBL_ENTRY (void, HeapMinimize, (IMalloc* pThis));

#define IMalloc_HeapMinimize(pThis) pThis->lpVtbl->HeapMinimize(COM_ADJUST_THIS(pThis))

    COM_VTBL_END
    } IMallocVtbl;

#ifdef __cplusplus

interface IMalloc : public IUnknown
{
virtual void* Alloc (ULONG cb) =0;

virtual void* Realloc (void* pv, ULONG cb) =0;

virtual void Free (void* pv) =0;

virtual ULONG GetSize (void* pv) =0;

virtual int DidAlloc (void* pv) =0;

virtual void HeapMinimize () =0;

};

#else

/* C interface definition for IMalloc */

interface IMalloc
    {
    const IMallocVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IMalloc;

#ifdef __cplusplus
}
#endif



#endif /* __INCcomCoreTypes_h */


