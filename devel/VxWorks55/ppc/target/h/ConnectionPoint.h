/* ConnectionPoint.h generated by WIDL Version 2.2.1 on 06-Dec-01 at 11:42:32 AM */

#include "comBase.h"

#ifndef __INCConnectionPoint_h
#define __INCConnectionPoint_h


#include "comCoreTypes.h"

#ifdef __cplusplus
extern "C" {
#endif

int include_ConnectionPoint (void);

#ifndef __IConnectionPoint_FWD_DEFINED__
#define __IConnectionPoint_FWD_DEFINED__
typedef interface IConnectionPoint IConnectionPoint;
#endif /* __IConnectionPoint_FWD_DEFINED__ */

#ifndef __IConnectionPointContainer_FWD_DEFINED__
#define __IConnectionPointContainer_FWD_DEFINED__
typedef interface IConnectionPointContainer IConnectionPointContainer;
#endif /* __IConnectionPointContainer_FWD_DEFINED__ */

#ifndef __IEnumConnections_FWD_DEFINED__
#define __IEnumConnections_FWD_DEFINED__
typedef interface IEnumConnections IEnumConnections;
#endif /* __IEnumConnections_FWD_DEFINED__ */

#ifndef __IEnumConnectionPoints_FWD_DEFINED__
#define __IEnumConnectionPoints_FWD_DEFINED__
typedef interface IEnumConnectionPoints IEnumConnectionPoints;
#endif /* __IEnumConnectionPoints_FWD_DEFINED__ */

typedef IConnectionPoint* PCONNECTIONPOINT;

typedef IConnectionPoint* LPCONNECTIONPOINT;

typedef IConnectionPointContainer* PCONNECTIONPOINTCONTAINER;

typedef IConnectionPointContainer* LPCONNECTIONPOINTCONTAINER;

typedef IEnumConnections* PENUMCONNECTIONS;

typedef IEnumConnections* LPENUMCONNECTIONS;

struct tagCONNECTDATA
{
IUnknown* pUnk;
DWORD dwCookie;
};

typedef struct tagCONNECTDATA CONNECTDATA;

typedef struct tagCONNECTDATA* PCONNECTDATA;

typedef struct tagCONNECTDATA* LPCONNECTDATA;

typedef IEnumConnectionPoints* PENUMCONNECTIONPOINTS;

typedef IEnumConnectionPoints* LPENUMCONNECTIONPOINTS;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, GetConnectionInterface, (IConnectionPoint* pThis, IID* piid));

#define IConnectionPoint_GetConnectionInterface(pThis, piid) pThis->lpVtbl->GetConnectionInterface(COM_ADJUST_THIS(pThis), piid)

    COM_VTBL_ENTRY (HRESULT, GetConnectionPointContainer, (IConnectionPoint* pThis, IConnectionPointContainer** ppCPC));

#define IConnectionPoint_GetConnectionPointContainer(pThis, ppCPC) pThis->lpVtbl->GetConnectionPointContainer(COM_ADJUST_THIS(pThis), ppCPC)

    COM_VTBL_ENTRY (HRESULT, Advise, (IConnectionPoint* pThis, IUnknown* pUnkSink, DWORD* pdwCookie));

#define IConnectionPoint_Advise(pThis, pUnkSink, pdwCookie) pThis->lpVtbl->Advise(COM_ADJUST_THIS(pThis), pUnkSink, pdwCookie)

    COM_VTBL_ENTRY (HRESULT, Unadvise, (IConnectionPoint* pThis, DWORD dwCookie));

#define IConnectionPoint_Unadvise(pThis, dwCookie) pThis->lpVtbl->Unadvise(COM_ADJUST_THIS(pThis), dwCookie)

    COM_VTBL_ENTRY (HRESULT, EnumConnections, (IConnectionPoint* pThis, IEnumConnections** ppEnum));

#define IConnectionPoint_EnumConnections(pThis, ppEnum) pThis->lpVtbl->EnumConnections(COM_ADJUST_THIS(pThis), ppEnum)

    COM_VTBL_END
    } IConnectionPointVtbl;

#ifdef __cplusplus

interface IConnectionPoint : public IUnknown
{
virtual HRESULT GetConnectionInterface (IID* piid) =0;

virtual HRESULT GetConnectionPointContainer (IConnectionPointContainer** ppCPC) =0;

virtual HRESULT Advise (IUnknown* pUnkSink, DWORD* pdwCookie) =0;

virtual HRESULT Unadvise (DWORD dwCookie) =0;

virtual HRESULT EnumConnections (IEnumConnections** ppEnum) =0;

};

#else

/* C interface definition for IConnectionPoint */

interface IConnectionPoint
    {
    const IConnectionPointVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IConnectionPoint;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, EnumConnectionPoints, (IConnectionPointContainer* pThis, IEnumConnectionPoints** ppEnum));

#define IConnectionPointContainer_EnumConnectionPoints(pThis, ppEnum) pThis->lpVtbl->EnumConnectionPoints(COM_ADJUST_THIS(pThis), ppEnum)

    COM_VTBL_ENTRY (HRESULT, FindConnectionPoint, (IConnectionPointContainer* pThis, REFIID riid, IConnectionPoint** ppCP));

#define IConnectionPointContainer_FindConnectionPoint(pThis, riid, ppCP) pThis->lpVtbl->FindConnectionPoint(COM_ADJUST_THIS(pThis), riid, ppCP)

    COM_VTBL_END
    } IConnectionPointContainerVtbl;

#ifdef __cplusplus

interface IConnectionPointContainer : public IUnknown
{
virtual HRESULT EnumConnectionPoints (IEnumConnectionPoints** ppEnum) =0;

virtual HRESULT FindConnectionPoint (REFIID riid, IConnectionPoint** ppCP) =0;

};

#else

/* C interface definition for IConnectionPointContainer */

interface IConnectionPointContainer
    {
    const IConnectionPointContainerVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IConnectionPointContainer;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Next, (IEnumConnections* pThis, ULONG cConnections, CONNECTDATA* rgcd, ULONG* lpcFetched));

#define IEnumConnections_Next(pThis, cConnections, rgcd, lpcFetched) pThis->lpVtbl->Next(COM_ADJUST_THIS(pThis), cConnections, rgcd, lpcFetched)

    COM_VTBL_ENTRY (HRESULT, Skip, (IEnumConnections* pThis, ULONG cConnections));

#define IEnumConnections_Skip(pThis, cConnections) pThis->lpVtbl->Skip(COM_ADJUST_THIS(pThis), cConnections)

    COM_VTBL_ENTRY (HRESULT, Reset, (IEnumConnections* pThis));

#define IEnumConnections_Reset(pThis) pThis->lpVtbl->Reset(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Clone, (IEnumConnections* pThis, IEnumConnections** ppEnum));

#define IEnumConnections_Clone(pThis, ppEnum) pThis->lpVtbl->Clone(COM_ADJUST_THIS(pThis), ppEnum)

    COM_VTBL_END
    } IEnumConnectionsVtbl;

#ifdef __cplusplus

interface IEnumConnections : public IUnknown
{
virtual HRESULT Next (ULONG cConnections, CONNECTDATA* rgcd, ULONG* lpcFetched) =0;

virtual HRESULT Skip (ULONG cConnections) =0;

virtual HRESULT Reset () =0;

virtual HRESULT Clone (IEnumConnections** ppEnum) =0;

};

#else

/* C interface definition for IEnumConnections */

interface IEnumConnections
    {
    const IEnumConnectionsVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IEnumConnections;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Next, (IEnumConnectionPoints* pThis, ULONG cConnections, IConnectionPoint** rgpcn, ULONG* lpcFetched));

#define IEnumConnectionPoints_Next(pThis, cConnections, rgpcn, lpcFetched) pThis->lpVtbl->Next(COM_ADJUST_THIS(pThis), cConnections, rgpcn, lpcFetched)

    COM_VTBL_ENTRY (HRESULT, Skip, (IEnumConnectionPoints* pThis, ULONG cConnections));

#define IEnumConnectionPoints_Skip(pThis, cConnections) pThis->lpVtbl->Skip(COM_ADJUST_THIS(pThis), cConnections)

    COM_VTBL_ENTRY (HRESULT, Reset, (IEnumConnectionPoints* pThis));

#define IEnumConnectionPoints_Reset(pThis) pThis->lpVtbl->Reset(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Clone, (IEnumConnectionPoints* pThis, IEnumConnectionPoints** ppEnum));

#define IEnumConnectionPoints_Clone(pThis, ppEnum) pThis->lpVtbl->Clone(COM_ADJUST_THIS(pThis), ppEnum)

    COM_VTBL_END
    } IEnumConnectionPointsVtbl;

#ifdef __cplusplus

interface IEnumConnectionPoints : public IUnknown
{
virtual HRESULT Next (ULONG cConnections, IConnectionPoint** rgpcn, ULONG* lpcFetched) =0;

virtual HRESULT Skip (ULONG cConnections) =0;

virtual HRESULT Reset () =0;

virtual HRESULT Clone (IEnumConnectionPoints** ppEnum) =0;

};

#else

/* C interface definition for IEnumConnectionPoints */

interface IEnumConnectionPoints
    {
    const IEnumConnectionPointsVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IEnumConnectionPoints;

#ifdef __cplusplus
}
#endif



#endif /* __INCConnectionPoint_h */


