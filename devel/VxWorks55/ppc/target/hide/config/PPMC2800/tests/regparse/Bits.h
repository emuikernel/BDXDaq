/******************************************************************************
*              (c), Copyright, MOTOROLA  INC - ECC                  *
*                                                                             *
* THIS CODE CONTAINS CONFIDENTIAL INFORMATION OF MOTOROLA  INC - ECC COMPUTERS, INC.        *
* NO RIGHTS ARE GRANTED HEREIN UNDER ANY PATENT, MASK WORK RIGHT OR COPYRIGHT *
* OF MOTOROLA  INC - ECC OR ANY THIRD PARTY. MOTOROLA  INC - ECC RESERVES THE RIGHT AT ITS SOLE DISCRETION*
* TO REQUEST THAT THIS CODE BE IMMEDIATELY RETURNED TO MOTOROLA  INC - ECC COMPUTERS.       *
* THIS CODE IS PROVIDED "AS IS". MOTOROLA  INC - ECC MAKES NO WARRANTIES, EXPRESS,*
* IMPLIED OR OTHERWISE, REGARDING ITS ACCURACY, COMPLETENESS OR PERFORMANCE.  *
*******************************************************************************
*                                                                             *
* Filename:Bits.h                                                             *
*                                                                             *
* DESCRIPTION:	                                                              *
*       This file is generated by Regparse tool.                              *
*                                                                             *
* DEPENDENCIES:	                                                              *
*       None.                                                                 *
*                                                                             *
******************************************************************************/

/* Register Set DCD*/

/* Register BASE: */
/* Bit ADRS ([rd][wr]) */
#define	ADRS                  (0x000fffff)
#define	ADRS_S                0

/* Register SIZE: */
/* Bit ADRS ([rd][wr]) */
/*#define	ADRS                  (0x0000ffff)*//*vijay*/
#define	ADRS_S                0
/* End of Register Set DCD */
/* Register Set PCI_DCD*/

/* Register BASE: */
/* Bit ADRS ([rd][wr]) */
/*#define	ADRS                  (0x000fffff)*//*vijay*/ /* Base address  */
#define	ADRS_S                0         /* Base address  */
/* Bit SWAP ([rd][wr]) */
#define	SWAP                  (0x03000000) /* swapping */
#define	SWAP_S                24        /* swapping */
#define	SWAP_B                (0x00000000)
#define	SWAP_N                (0x01000000)
#define	SWAP_BW               (0x02000000)
#define	SWAP_W                (0x03000000)
/* Bit NS ([rd][wr]) */
#define	NS                    (0x04000000)
/* Bit PCIReq64 ([rd][wr]) */
#define	PCIREQ64              (0x08000000)
/* End of Register Set PCI_DCD */
/* Register Set PCI_REMAP*/

/* Register REMAP: */
/* Bit ADRS ([rd][wr]) */
/*#define	ADRS                  (0x0000ffff)*//*vijay*/
#define	ADRS_S                0
/* End of Register Set PCI_REMAP */
/* Register Set mpsc_cause*/

/* Register x: */
/* Bit rc ([rd][wr]) */
#define	RC                    (0x00000001)
/* Bit rxerr ([rd][wr]) */
#define	RXERR                 (0x00000002)
/* Bit txerr ([rd][wr]) */
#define	TXERR                 (0x00000008)
/* Bit rlsc ([rd][wr]) */
#define	RLSC                  (0x00000010)
/* Bit rhnt ([rd][wr]) */
#define	RHNT                  (0x00000020)
/* Bit rfsc ([rd][wr]) */
#define	RFSC                  (0x00000040)
/* Bit rcsc ([rd][wr]) */
#define	RCSC                  (0x00000080)
/* Bit rovr ([rd][wr]) */
#define	ROVR                  (0x00000100)
/* Bit rcdl ([rd][wr]) */
#define	RCDL                  (0x00000200)
/* Bit rckg ([rd][wr]) */
#define	RCKG                  (0x00000400)
/* Bit bper ([rd][wr]) */
#define	BPER                  (0x00000800)
/* Bit teidl ([rd][wr]) */
#define	TEIDL                 (0x00001000)
/* Bit tudr ([rd][wr]) */
#define	TUDR                  (0x00002000)
/* Bit tctsl ([rd][wr]) */
#define	TCTSL                 (0x00004000)
/* Bit tckg ([rd][wr]) */
#define	TCKG                  (0x00008000)
/* End of Register Set mpsc_cause */
/* Register Set brg*/

/* Register cfg: */
/* Bit cdv ([rd][wr]) */
#define	CDV                   (0x0000ffff)
#define	CDV_S                 0
/* Bit en ([rd][wr]) */
/*#define	EN                    (0x00010000)*//*vijay*/
/* Bit rst ([rd][wr]) */
#define	RST                   (0x00020000)
/* Bit clks ([rd][wr]) */
#define	CLKS                  (0x003c0000) /* vijay changed the range */
#define	CLKS_S                18        /* vijay changed the range */
#define	CLKS_BCLKIN           (0x00000000)
#define	CLKS_SCLK0            (0x00080000)
#define	CLKS_TSCLK0           (0x000c0000)
#define	CLKS_SCLK1            (0x00180000)
#define	CLKS_TSCLK1           (0x001c0000)
#define	CLKS_TCLK             (0x00200000)
/* Bit bten ([rd][wr]) */
#define	BTEN                  (0x02000000) /* vijay added-baudrate tuning enabled */

/* Register tune: */
/* Bit cuv ([rd][wr]) */
#define	CUV                   (0x0000ffff)
#define	CUV_S                 0
/* End of Register Set brg */
/* Register Set mpsc*/

/* Register MAIN_CFG_LOW: */
/* Bit mode ([rd][wr]) */
#define	MODE                  (0x00000007)
#define	MODE_S                0
#define	MODE_HDLC             (0x00000000)
#define	MODE_UART             (0x00000004)
#define	MODE_BISYNC           (0x00000005)
/* Bit ttx ([rd][wr]) */
#define	TTX                   (0x00000008)
/* Bit trx ([rd][wr]) */
#define	TRX                   (0x00000010)
/* Bit et ([rd][wr]) */
#define	ET                    (0x00000040)
/* Bit er ([rd][wr]) */
#define	ER                    (0x00000080)
/* Bit lpbk ([rd][wr]) */
#define	LPBK                  (0x00000300)
#define	LPBK_S                8
#define	LPBK_N                (0x00000000)
#define	LPBK_LPB              (0x00000100)
#define	LPBK_ECHO             (0x00000200)
#define	LPBK_LPB_ECHO         (0x00000300)
/* Bit nlm ([rd][wr]) */
#define	NLM                   (0x00000400)
/* Bit tsyn ([rd][wr]) */
#define	TSYN                  (0x00001000)
/* Bit tsns ([rd][wr]) */
#define	TSNS                  (0x0000c000)
#define	TSNS_S                14
/* Bit tidl ([rd][wr]) */
#define	TIDL                  (0x00010000)
/* Bit rtsm ([rd][wr]) */
#define	RTSM                  (0x00020000)
/* Bit ctss ([rd][wr]) */
#define	CTSS                  (0x00080000)
/* Bit cds ([rd][wr]) */
#define	CDS                   (0x00100000)
/* Bit ctsm ([rd][wr]) */
#define	CTSM                  (0x00200000)
/* Bit cdm ([rd][wr]) */
#define	CDM                   (0x00400000)
/* Bit crcm ([rd][wr]) */
#define	CRCM                  (0x03800000)
#define	CRCM_S                23
#define	CRCM_CRC16_C          (0x00000000)
#define	CRCM_CRC16            (0x00800000)
#define	CRCM_CRC32_C          (0x01000000)
/* Bit trvd ([rd][wr]) */
#define	TRVD                  (0x10000000)
/* Bit rrvd ([rd][wr]) */
#define	RRVD                  (0x20000000)
/* Bit gde ([rd][wr]) */
#define	GDE                   (0x80000000)

/* Register MAIN_CFG_HI: */
/* Bit tci ([rd][wr]) */
#define	TCI                   (0x00000001)
/* Bit tinv ([rd][wr]) */
#define	TINV                  (0x00000002)
/* Bit tpl ([rd][wr]) */
#define	TPL                   (0x0000001c)
#define	TPL_S                 2
/* Bit tppt ([rd][wr]) */
#define	TPPT                  (0x000001e0)
#define	TPPT_S                5
/* Bit tcdv ([rd][wr]) */
#define	TCDV                  (0x00000600)
#define	TCDV_S                9
/* Bit tdec ([rd][wr]) */
#define	TDEC                  (0x00003800)
#define	TDEC_S                11
/* Bit rinv ([rd][wr]) */
#define	RINV                  (0x00010000)
/* Bit gdw ([rd][wr]) */
#define	GDW                   (0x001e0000)
#define	GDW_S                 17
/* Bit rdw ([rd][wr]) */
#define	RDW                   (0x00400000)
/* Bit rsyl ([rd][wr]) */
#define	RSYL                  (0x01800000)
#define	RSYL_S                23
/* Bit rcdv ([rd][wr]) */
#define	RCDV                  (0x06000000)
#define	RCDV_S                25
/* Bit renc ([rd][wr]) */
#define	RENC                  (0x38000000)
#define	RENC_S                27
/* Bit sedg ([rd][wr]) */
#define	SEDG                  (0xc0000000)
#define	SEDG_S                30

/* Register PROTO_CFG: */
/* Bit u_drt ([rd][wr]) */
#define	U_DRT                 (0x00000040)
/* Bit u_iso ([rd][wr]) */
#define	U_ISO                 (0x00000080)
/* Bit u_rs ([rd][wr]) */
#define	U_RS                  (0x00000100)
/* Bit u_frz ([rd][wr]) */
#define	U_FRZ                 (0x00000200)
/* Bit u_um ([rd][wr]) */
#define	U_UM                  (0x00000c00)
#define	U_UM_S                10
#define	U_UM_NORM             (0x00000000)
#define	U_UM_MDM              (0x00000400)
/* Bit u_cl ([rd][wr]) */
#define	U_CL                  (0x00003000)
#define	U_CL_S                12
/* Bit u_sbl ([rd][wr]) */
#define	U_SBL                 (0x00004000)
/* Bit u_flc ([rd][wr]) */
#define	U_FLC                 (0x00008000)

/* Register REG1: */
/* Bit u_tcs ([rd][wr]) */
#define	U_TCS                 (0x000000ff)
#define	U_TCS_S               0
/* Bit u_brk ([rd][wr]) */
#define	U_BRK                 (0x00ff0000)
#define	U_BRK_S               16

/* Register REG2: */
/* Bit u_tev ([rd][wr]) */
#define	U_TEV                 (0x00000002)
/* Bit u_tpm ([rd][wr]) */
#define	U_TPM                 (0x0000000c)
#define	U_TPM_S               2
/* Bit u_ra ([rd][wr]) */
#define	U_RA                  (0x00000080)
/* Bit u_ttcs ([rd][wr]) */
#define	U_TTCS                (0x00000200)
/* Bit u_rev ([rd][wr]) */
#define	U_REV                 (0x00020000)
/* Bit u_rpm ([rd][wr]) */
#define	U_RPM                 (0x000c0000)
#define	U_RPM_S               18
/* Bit u_ta ([rd][wr]) */
#define	U_TA                  (0x00800000)
/* Bit u_crd ([rd][wr]) */
#define	U_CRD                 (0x02000000)
/* Bit u_eh ([rd][wr]) */
#define	U_EH                  (0x80000000)

/* Register REG3: */
/* Bit u_mir ([rd][wr]) */
#define	U_MIR                 (0x0000ffff)
#define	U_MIR_S               0

/* Register REG4: */
/* Bit cfr_bce ([rd][wr]) */
#define	CFR_BCE               (0x000000ff)
#define	CFR_BCE_S             0
/* Bit cfr_z ([rd][wr]) */
#define	CFR_Z                 (0x20000000)

/* Register REG5: */
/* Bit u_chr ([rd][wr]) */
#define	U_CHR                 (0x000000ff)
#define	U_CHR_S               0
/* Bit u_int ([rd][wr]) */
#define	U_INT                 (0x00001000)
/* Bit u_co ([rd][wr]) */
#define	U_CO                  (0x00002000)
/* Bit u_r ([rd][wr]) */
#define	U_R                   (0x00004000)
/* Bit u_v ([rd][wr]) */
#define	U_V                   (0x00008000)

/* Register REG6: */
/* Bit u_chr ([rd][wr]) */
#define	U_CHR                 (0x000000ff)
#define	U_CHR_S               0
/* Bit u_int ([rd][wr]) */
#define	U_INT                 (0x00001000)
/* Bit u_co ([rd][wr]) */
#define	U_CO                  (0x00002000)
/* Bit u_r ([rd][wr]) */
#define	U_R                   (0x00004000)
/* Bit u_v ([rd][wr]) */
#define	U_V                   (0x00008000)

/* Register REG7: */
/* Bit u_chr ([rd][wr]) */
#define	U_CHR                 (0x000000ff)
#define	U_CHR_S               0
/* Bit u_int ([rd][wr]) */
#define	U_INT                 (0x00001000)
/* Bit u_co ([rd][wr]) */
#define	U_CO                  (0x00002000)
/* Bit u_r ([rd][wr]) */
#define	U_R                   (0x00004000)
/* Bit u_v ([rd][wr]) */
#define	U_V                   (0x00008000)

/* Register REG8: */
/* Bit u_chr ([rd][wr]) */
#define	U_CHR                 (0x000000ff)
#define	U_CHR_S               0
/* Bit u_int ([rd][wr]) */
#define	U_INT                 (0x00001000)
/* Bit u_co ([rd][wr]) */
#define	U_CO                  (0x00002000)
/* Bit u_r ([rd][wr]) */
#define	U_R                   (0x00004000)
/* Bit u_v ([rd][wr]) */
#define	U_V                   (0x00008000)

/* Register REG10: */
/* Bit u_cts ([rd][wr]) */
#define	U_CTS                 (0x00000001)
/* Bit u_cd ([rd][wr]) */
#define	U_CD                  (0x00000002)
/* Bit u_tidle ([rd][wr]) */
#define	U_TIDLE               (0x00000008)
/* Bit u_rhs ([rd][wr]) */
#define	U_RHS                 (0x00000020)
/* Bit u_rls ([rd][wr]) */
#define	U_RLS                 (0x00000080)
/* Bit u_rlidl ([rd][wr]) */
#define	U_RLIDL               (0x00000800)
/* Bit u_rcrn ([rd][wr]) */
#define	U_RCRN                (0x00ff0000)
#define	U_RCRN_S              16
/* End of Register Set mpsc */
/* Register Set SDMA_RXBD*/

/* Register cs: */
/* Bit L ([rd][wr]) */
#define	L                     (0x00010000) /* Last of frame */
/* Bit F ([rd][wr]) */
#define	F                     (0x00020000) /* First of frame */
/* Bit EI ([rd][wr]) */
#define	EI                    (0x00800000) /* IRQ enable */
/* Bit AM ([rd][wr]) */
#define	AM                    (0x40000000) /* Auto mode */
/* Bit O ([rd][wr]) */
#define	O                     (0x80000000) /* Owned by GT */
/* End of Register Set SDMA_RXBD */
/* Register Set SDMA_TXBD*/

/* Register cs: */
/* Bit L ([rd][wr]) */
#define	L                     (0x00010000) /* Last of frame */
/* Bit F ([rd][wr]) */
#define	F                     (0x00020000) /* First of frame */
/* Bit EI ([rd][wr]) */
#define	EI                    (0x00800000) /* IRQ enable */
/* Bit AM ([rd][wr]) */
#define	AM                    (0x40000000) /* Auto mode */
/* Bit O ([rd][wr]) */
#define	O                     (0x80000000) /* Owned by GT */
/* End of Register Set SDMA_TXBD */
/* Register Set MV64360*/

/* Register CPU_CONFIGURATION: */
/* Bit nm_cnt ([rd][wr]) dfl=0x0 */
#define	NM_CNT                (0x000000ff) /* No Match Count */
#define	NM_CNT_S              0         /* No Match Count */
/* Bit nm_cnt_en ([rd][wr]) dfl=0x0 */
#define	NM_CNT_EN             (0x00000100) /* No Match Count enable */
/* Bit nm_cnt_ext ([rd][wr]) dfl=0x0 */
#define	NM_CNT_EXT            (0x00000200) /* CPU adrs. miss counter */
/* Bit sigle_cpu ([rd][wr]) */
#define	SIGLE_CPU             (0x00000800)
/* Bit end ([rd][wr]) */
#define	END                   (0x00001000) /* must be 0-for big endian */
/* Bit pipe ([rd][wr]) dfl=0x0 */
#define	PIPE                  (0x00002000) /* pipeline: off: readBW slighly better */
/* Bit stop_retry ([rd][wr]) dfl=0x0 */
#define	STOP_RETRY            (0x00020000)
/* Bit multi_gt_dec ([rd][wr]) dfl=0x0 */
#define	MULTI_GT_DEC          (0x00040000)
/* Bit dp_valid ([rd][wr]) dfl=0x0 */
#define	DP_VALID              (0x00080000)
/* Bit perr_prop ([rd][wr]) dfl=0x0 */
#define	PERR_PROP             (0x00400000)
/* Bit aack_delay2 ([rd][wr]) dfl=0x0 */
#define	AACK_DELAY2           (0x02000000) /* AACK delay 2: no effect */
/* Bit apvalid ([rd][wr]) dfl=0x0 */
#define	APVALID               (0x04000000)
/* Bit remap_wr_dis ([rd][wr]) dfl=0x0 */
#define	REMAP_WR_DIS          (0x08000000)

/* Register PCI0_IO_DECODE: */
/* Bit ADRS ([rd][wr]) */
/*#define	ADRS                  (0x000fffff)*//*vijay*/ /* Base address  */
#define	ADRS_S                0         /* Base address  */
/* Bit SWAP ([rd][wr]) */
#define	SWAP                  (0x03000000) /* swapping */
#define	SWAP_S                24        /* swapping */
#define	SWAP_B                (0x00000000)
#define	SWAP_N                (0x01000000)
#define	SWAP_BW               (0x02000000)
#define	SWAP_W                (0x03000000)

/* Register INTERNAL_SPACE_BASE: */
/* Bit base ([rd][wr]) */
#define	BASE                  (0x000fffff)
#define	BASE_S                0
/* Bit swap ([rd][wr]) */
#define	SWAP                  (0x03000000)
#define	SWAP_S                24

/* Register PCI1_IO_DECODE: */
/* Bit ADRS ([rd][wr]) */
#define	ADRS                  (0x000fffff) /* Base address  */
#define	ADRS_S                0         /* Base address  */
/* Bit SWAP ([rd][wr]) */
#define	SWAP                  (0x03000000) /* swapping */
#define	SWAP_S                24        /* swapping */
#define	SWAP_B                (0x00000000)
#define	SWAP_N                (0x01000000)
#define	SWAP_BW               (0x02000000)
#define	SWAP_W                (0x03000000)

/* Register CPU0_SYNC_BARIER_TRIGGER: */
/* Bit sbtrig ([rd][wr]) */
#define	SBTRIG                (0x0000000f)
#define	SBTRIG_S              0

/* Register CPU_MODE: */
/* Bit multi_gt_id ([rd][wr]) */
#define	MULTI_GT_ID           (0x00000003)
#define	MULTI_GT_ID_S         0
/* Bit multi_gt ([rd][wr]) */
#define	MULTI_GT              (0x00000004)
/* Bit retry_en ([rd][wr]) */
#define	RETRY_EN              (0x00000008)
/* Bit cpu_type ([rd][wr]) */
/*#define	CPU_TYPE              (0x000000f0)*//*vijay*/
#define	CPU_TYPE_S            4

/* Register CPU_PROT_BASE_ADRS_0: */
/* Bit base ([rd][wr]) */
#define	BASE                  (0x000fffff)
#define	BASE_S                0
/* Bit accprot ([rd][wr]) */
#define	ACCPROT               (0x00100000)
/* Bit wrprot ([rd][wr]) */
#define	WRPROT                (0x00200000)
/* Bit cacheprot ([rd][wr]) */
#define	CACHEPROT             (0x00400000)
/* Bit en ([rd][wr]) */
#define	EN                    (0x80000000)

/* Register CPU_PROT_SIZE_0: */
/* Bit size ([rd][wr]) */
#define	SIZE                  (0x0000ffff)
#define	SIZE_S                0

/* Register WHO_AM_I: */
/* Bit id ([rd][wr]) */
#define	ID                    (0x00000003)
#define	ID_S                  0

/* Register CPU_0_DOOR_BELL: */
/* Bit db ([rd][wr]) */
#define	DB                    (0x000000ff)
#define	DB_S                  0

/* Register CPU_0_DOOR_BELL_CLEAR: */
/* Bit clear ([rd][wr]) */
#define	CLEAR                 (0x000000ff)
#define	CLEAR_S               0

/* Register CPU_1_DOOR_BELL: */
/* Bit db ([rd][wr]) */
#define	DB                    (0x000000ff)
#define	DB_S                  0

/* Register CPU_1_DOOR_BELL_CLEAR: */
/* Bit clear ([rd][wr]) */
#define	CLEAR                 (0x000000ff)
#define	CLEAR_S               0

/* Register CPU_0_DOOR_BELL_MASK: */
/* Bit mask ([rd][wr]) */
#define	MASK                  (0x000000ff)
#define	MASK_S                0

/* Register CPU_1_DOOR_BELL_MASK: */
/* Bit mask ([rd][wr]) */
#define	MASK                  (0x000000ff)
#define	MASK_S                0

/* Register SEMAPHORE_0: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register SEMAPHORE_1: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register SEMAPHORE_2: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register SEMAPHORE_3: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register SEMAPHORE_4: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register INTEGRATED_SRAM_BASE: */
/* Bit ADRS ([rd][wr]) */
#define	ADRS                  (0x000fffff)
#define	ADRS_S                0

/* Register SEMAPHORE_5: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register SEMAPHORE_6: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register BASE_ADDR_ENABLE: */
/* Bit en ([rd][wr]) */
/*#define	EN                    (0x001fffff)*//*vijay*/
#define	EN_S                  0

/* Register SEMAPHORE_7: */
/* Bit sem ([rd][wr]) */
#define	SEM                   (0x000000ff)
#define	SEM_S                 0

/* Register SRAM_CFG: */
/* Bit cc_en ([rd][wr]) */
#define	CC_EN                 (0x00000003)
#define	CC_EN_S               0
/* Bit par_en ([rd][wr]) */
#define	PAR_EN                (0x00000010)
/* Bit perr_prop ([rd][wr]) */
/*#define	PERR_PROP             (0x00000020)*//*vijay*/
/* Bit frc_par_en ([rd][wr]) */
#define	FRC_PAR_EN            (0x00000040)
/* Bit park ([rd][wr]) */
#define	PARK                  (0x00000080)
/* Bit frc_par ([rd][wr]) */
#define	FRC_PAR               (0x0000ff00)
#define	FRC_PAR_S             8

/* Register SRAM_ERR_CAUSE: */
/* Bit err ([rd][wr]) */
#define	ERR                   (0x000000ff)
#define	ERR_S                 0

/* Register SRAM_ERR_PARITY: */
/* Bit par ([rd][wr]) */
#define	PAR                   (0x000000ff)
#define	PAR_S                 0

/* Register SRAM_ERR_ADRS_HI: */
/* Bit addr ([rd][wr]) */
#define	ADDR                  (0x0000000f)
#define	ADDR_S                0

/* Register DEVBNK0_PARMS: */
/* Bit turnoff ([rd][wr]) */
#define	TURNOFF               (0x00000007)
#define	TURNOFF_S             0
/* Bit acc2first ([rd][wr]) */
#define	ACC2FIRST             (0x00000078)
#define	ACC2FIRST_S           3
/* Bit acc2next ([rd][wr]) */
#define	ACC2NEXT              (0x00000780)
#define	ACC2NEXT_S            7
/* Bit ale2wr ([rd][wr]) */
#define	ALE2WR                (0x00003800)
#define	ALE2WR_S              11
/* Bit wrlow ([rd][wr]) */
#define	WRLOW                 (0x0001c000)
#define	WRLOW_S               14
/* Bit wrhigh ([rd][wr]) */
#define	WRHIGH                (0x000e0000)
#define	WRHIGH_S              17
/* Bit dev_wdth ([rd][wr]) */
#define	DEV_WDTH              (0x00300000)
#define	DEV_WDTH_S            20
/* Bit turnoffx ([rd][wr]) */
#define	TURNOFFX              (0x00400000)
/* Bit acc2firstx ([rd][wr]) */
#define	ACC2FIRSTX            (0x00800000)
/* Bit acc2nextx ([rd][wr]) */
#define	ACC2NEXTX             (0x01000000)
/* Bit ale2wrx ([rd][wr]) */
#define	ALE2WRX               (0x02000000)
/* Bit wrlowx ([rd][wr]) */
#define	WRLOWX                (0x04000000)
/* Bit wrhighx ([rd][wr]) */
#define	WRHIGHX               (0x08000000)
/* Bit badrskew ([rd][wr]) */
#define	BADRSKEW              (0x30000000)
#define	BADRSKEW_S            28
/* Bit dpen ([rd][wr]) */
#define	DPEN                  (0x40000000)

/* Register SDRAM_CFG: */
/* Bit refint_cnt ([rd][wr]) */
#define	REFINT_CNT            (0x00003fff) /* refresh interval counter */
#define	REFINT_CNT_S          0         /* refresh interval counter */
/* Bit pinter_en ([rd][wr]) */
#define	PINTER_EN             (0x00004000) /* Enable physical banks interleaving enable */
/* Bit vinter_en ([rd][wr]) */
#define	VINTER_EN             (0x00008000) /* Enable virtual bank interleaving */
/* Bit reg_dram ([rd][wr]) */
#define	REG_DRAM              (0x00020000) /* Enable registered DRAM */
/* Bit ecc ([rd][wr]) */
#define	ECC                   (0x00040000) /* Enable ECC */
/* Bit resv ([rd][wr]) */
#define	RESV                  (0x00080000)
#define	RESV_SET              (0x00000000)
/* Bit dqs ([rd][wr]) */
#define	DQS                   (0x00300000) /* Data DQS Pins */
#define	DQS_S                 20        /* Data DQS Pins */
/* Bit rd_buff ([rd][wr]) */
#define	RD_BUFF               (0xfc000000) /* Read buff assignment per each interface. */
#define	RD_BUFF_S             26        /* Read buff assignment per each interface. */

/* Register SDRAM_ADRS_DECODE: */
/* Bit addr_sel ([rd][wr]) */
#define	ADDR_SEL              (0x0000000f)
#define	ADDR_SEL_S            0
/* Bit dcfg ([rd][wr]) */
#define	DCFG                  (0x00000030)
#define	DCFG_S                4

/* Register SDRAM_OPEN_PG_CTRL: */
/* Bit op_en ([rd][wr]) */
#define	OP_EN                 (0x0000ffff)
#define	OP_EN_S               0

/* Register SDRAM_OPERATION_MODE: */
/* Bit cmd ([rd][wr]) */
#define	CMD                   (0x00000007)
#define	CMD_S                 0

/* Register SDRAM_EXT_MODE: */
/* Bit dll ([rd][wr]) */
#define	DLL                   (0x00000001)
/* Bit ds ([rd][wr]) */
#define	DS                    (0x00000002)
/* Bit qfc ([rd][wr]) */
#define	QFC                   (0x00000004)
/* Bit om ([rd][wr]) */
#define	OM                    (0x00003ff8)
#define	OM_S                  3

/* Register MAIN_ROUTING: */
/* Bit mr0 ([rd][wr]) */
#define	MR0                   (0x00000007)
#define	MR0_S                 0
#define	MR0_SP0               (0x00000000)
#define	MR0_UNCN              (0x00000007)
/* Bit set1 ([rd][wr]) */
#define	SET1                  (0x00000038)
#define	SET1_S                3
/* Bit mr1 ([rd][wr]) */
#define	MR1                   (0x000001c0)
#define	MR1_S                 6
#define	MR1_SP1               (0x00000000)
#define	MR1_UNCN              (0x000001c0)
/* Bit set2 ([rd][wr]) */
#define	SET2                  (0xfffffe00)
#define	SET2_S                9

/* Register RX_CLOCK_ROUTING: */
/* Bit CRR0 ([rd][wr]) */
#define	CRR0                  (0x0000000f)
#define	CRR0_S                0
#define	CRR0_BRG0             (0x00000000)
#define	CRR0_BRG1             (0x00000001)
#define	CRR0_SCLK0            (0x00000008)
/* Bit CRR1 ([rd][wr]) */
#define	CRR1                  (0x00000f00)
#define	CRR1_S                8
#define	CRR1_BRG0             (0x00000000)
#define	CRR1_BRG1             (0x00000100)
#define	CRR1_SCLK1            (0x00000800)

/* Register TX_CLOCK_ROUTING: */
/* Bit CRT0 ([rd][wr]) */
#define	CRT0                  (0x0000000f)
#define	CRT0_S                0
#define	CRT0_BRG0             (0x00000000)
#define	CRT0_BRG1             (0x00000001)
#define	CRT0_SCLK0            (0x00000008)
#define	CRT0_TSCLK0           (0x00000009)
/* Bit CRT1 ([rd][wr]) */
#define	CRT1                  (0x00000f00)
#define	CRT1_S                8
#define	CRT1_BRG0             (0x00000000)
#define	CRT1_BRG1             (0x00000100)
#define	CRT1_SCLK1            (0x00000800)
#define	CRT1_TSCLK1           (0x00000900)

/* Register WATCHDOG_CFG: */
/* Bit preset ([rd][wr]) */
#define	PRESET                (0x00ffffff)
#define	PRESET_S              0
/* Bit ctl1 ([rd][wr]) */
#define	CTL1                  (0x03000000)
#define	CTL1_S                24
/* Bit ctl2 ([rd][wr]) */
#define	CTL2                  (0x0c000000)
#define	CTL2_S                26
/* Bit nmi ([rd][wr]) */
#define	NMI                   (0x20000000)
/* Bit wde ([rd][wr]) */
#define	WDE                   (0x40000000)
/* Bit en ([rd][wr]) */
/*#define	EN                    (0x80000000)*//*vijay*/

/* Register WATCHDOG_VALUE: */
/* Bit nmival ([rd][wr]) */
#define	NMIVAL                (0x00ffffff)
#define	NMIVAL_S              0
/* End of Register Set MV64360 */
/* Register Set pcicfg0*/
/* End of Register Set pcicfg0 */
