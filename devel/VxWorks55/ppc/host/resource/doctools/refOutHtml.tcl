# refOutHtml - supporting tables for refgen: Output to HTML
#
# Copyright 1998 Wind River Systems, Inc.
#
# modification history
# --------------------
# 02f,15nov01,wsl  add IDL input format
# 02e,31oct01,wsl  bug fix for show routines
# 02d,29oct01,wsl  make macros bold when at end of a sentence
# 02c,14aug01,wsl  more repairs to making library and file names bold
# 02b,07aug01,wsl  remove italics from routine names
# 02a,07aug01,wsl  fix bold-related bugs, removing \" comments
# 01z,29mar01,wsl  fix bug in making file names bold
# 01z,26mar01,wsl  Merge to fix bug with URLs being mistaken for files
# 01y,01oct00,jdi  removed italics from subroutine names.
# 01x,28sep99,dgp  fix incorrect bolding in protocol files
# 01w,29aug99,dgp  fix handling of tables with multiline cells
# 01v,27jul99,dgp  correct conversion errors: xxxLib at end of sentence
# 01u,16jul99,dgp  correct conversion errors: embedded comments, \tb
# 01t,19may99,fle  Made the bullet list able to have multi line descriptions
# 01s,01mar99,fle  made it able to bold .hpp and .cpp file names
# 01r,26feb99,fle  made it unable to bold already bolded Lib names
# 01q,22feb99,fle  added handling or registered special character
# 01p,28jan99,fle  added notion of new line to OUTfmt
# 01o,18dec98,fle  added Java support
# 01n,17nov98,fle  added a <p> paragraph start markup in the refTitleMkup
#                  procedure
# 01m,09nov98,fle  added unboldization of h1 titles
# 01l,14oct98,fle  added tilde and column characters to OUTfmt for C++
#                  conveniance
# 01k,05oct98,fle  fixed a problem with @ embedded in /@ ... @/ patterns
# 01j,21aug98,fle  reformatted routine NAME output
# 01i,22jul98,fle  put a white background
# 01h,16jul98,rhp  changed refTitleMkup to allow navbar insertion
# 01g,15jul98,rhp  endow refTitleMkup with third arg
# 01f,14jul98,rhp  applied standard auto-formatting to routine title parts;
#                  defined OUTstr(GENPARENT) as generic uplink
# 01e,26jun98,rhp  Improve boundary for automatic bolding of libnames
# 01d,28may98,rhp  Avoid double-formatting constants, and
#                  add pcl entries to OUTlMk array
# 01b,20may98,rhp  Improved word-boundary description for italics;
#                  extended auto-bolding of recognized filenames;
#                  added auto-bolding for constants (all caps and underbars)
# 01a,15may98,rhp  Initial check-in

#
# DESCRIPTION
# supporting tables for refgen: Output to HTML
#
# INTERNAL
# This Tcl source file contains the following procedures:
#
# refNavbarMkup	- emit markup for navigation bar
# refStartMkup	- emit markup for start of output file
# refTitleMkup	- emit markup for output-file title

################################################################################
#
# OUTsuffix - filename suffix for output files
#

set OUTsuffix html

###############################################################################
#
# refStartMkup - emit markup for start of output file
#
# Like the rest of the ref*Mkup proc family, this uses <args> rather
# than the fixed number of arguments desired so that, if the same proc in
# another output format requires additional arguments, this definition 
# need not change.
#
# PARAMETERS
# \ts
# <args> |
# Index    | Meaning
# ---------+----------------------------
# 0        | Name of input file
# 1        | Name of output file
# 2        | Library name without suffix
# \te
#
# RETURNS: markup for start of output file.

proc refStartMkup {args} {

    set inFile [lindex $args 0]
    set outFile [lindex $args 1]
    set libName [lindex $args 2]
    format "<html>\n<head>\n<!-- %s - generated by refgen from %s -->\n\
	    <title> %s </title>\n</head>\n<body bgcolor=\"#FFFFFF\">" \
	    $outFile $inFile $libName
}

###############################################################################
#
# refTitleMkup - emit markup for output-file title
#
# Like the rest of the ref*Mkup proc family, this uses <args> rather
# than the fixed number of arguments desired so that, if the same proc in
# another output format requires additional arguments, this definition 
# need not change.
#
# PARAMETERS
# \ts
# <args> |
# Index    | Meaning
# ---------+----------------------------
# 0        | Name of library, routine, procedure...
# 1        | Description of same
# 2        | hypertext name for same (usually un-decorated version of 0)
# 3        | text (eg navbar) to insert under anchor
# \te
# 
# RETURNS: markup for output-file title

proc refTitleMkup {args} {

    global OUTfmt
    global OUTstr		;# out string definition array

    set ttlName [refFmtString $OUTfmt [lindex $args 0]]
    set ttlDesc [refFmtString $OUTfmt [lindex $args 1]]
    set ttlTag  [lindex $args 2]
    set ttlInsert [lindex $args 3]
    regsub -all "<b>(.*)</b>" $ttlName "\\1" ttlHead

    if {0 != [string length $ttlDesc]} {

	format "<a name=\"%s\"></a>\n%s\n</blockquote><h1>%s</h1>\
		<blockquote></a></blockquote><h4>NAME</h4><blockquote> \
		\n<p><strong>%s</strong> - %s</p>\n" \
		$ttlTag $ttlInsert $ttlHead $ttlHead $ttlDesc
    } else {

	format "<a name=\"%s\"></a>\n%s\n%s<h1>%s</h1>%s\n</a>\n\n" \
		$ttlTag $OUTstr(DEINDENT) $ttlInsert $ttlName $OUTstr(INDENT)
    }
}

###############################################################################
#
# refNavbarMkup - emit markup for navigation bar
#
# Like the rest of the ref*Mkup proc family, this uses <args> rather
# than the fixed number of arguments desired so that, if the same proc in
# another output format requires additional arguments, this definition 
# need not change.
#
# PARAMETERS
# \ts
# <args> |
# Index    | Meaning
# ---------+----------------------------
# 0        | Parent filename
# 1        | Parent label
# \te
#
# RETURNS: markup for navigation bar

proc refNavbarMkup {args} {
    set pName [lindex $args 0]
    set pDesc [lindex $args 1]
    set pContent [lindex $args 2]
    format "<p align=right>\n<a href=\"%s\"><i>%s %s</i></a></p>\n" \
	    $pName $pContent $pDesc
}

###############################################################################
#
# refTblsepMkup - emit markup for separator between table heading and body
#
# Like the rest of the ref*Mkup proc family, this uses <args> rather
# than the fixed number of arguments desired so that, if the same proc in
# another output format requires additional arguments, this definition 
# need not change.
#
# PARAMETERS
# \ts
# <args> |
# Index    | Meaning
# ---------+----------------------------
# 0        | Number of columns in table
# \te
#
# RETURNS: markup for separator between table heading and body

proc refTblsepMkup {args} {
    set nCols [lindex $args 0]
    format "<tr><td colspan=\"%d\"><hr></tr>\n" $nCols
}

################################################################################
#
# OUTstr - output boilerplate table
#
# This table includes only those output boilerplate strings that do not
# require any parameters filled in for any implemented output format.
#
# The proc family ref*Mkup captures parametric boilerplate.

array set OUTstr {

{SEP} {<hr>
}

{INDENT} {<blockquote>
}

{DEINDENT} {</blockquote>
}

{STOP}  {</body>
</html>
}

{NL} {
<br>
}

{PAR} {<p>
}
{ENDPAR} {
</p>}

{CODE} {<pre>}

{ENDCODE} {</pre>
}

{SMCODE} {<font size=-1><pre>}

{ENDSMCODE} {</pre>
</font>}

{SUBHEAD} {</blockquote><h4>}

{FIXEDSP} {\&nbsp;}

{TSTART} {<table>
}

{TEND} {
</table>
}

{TROWS} {<tr valign=top>
}

{TROWE} {</tr>
}

{TCELL} {<td align=left>}

{TCELLE} {</td>}

{THCELL} {<th align=left>}

{THCELLE} {</th>}

{LIST} {<dl>
}

{ENDLIST} {</dl>
}

{PREitem} {<dt>
}

{POSTitem} {
<dd>
}

{MLIST} {<table>
}

{ENDMLIST} {</table>
}

{PREmark} {</tr>
<tr valign=top><td>
}

{POSTmark} {
<td>}

{SYNdelim} {
-----
}

{GENPARENT} {index.html}

{RTNSDESC}	{<hr><h4>}

{RTNSDESCEND}	{</h4><blockquote><p>}

{BLIST}		{<ul>
}
{BLISTEND}	{</ul>
}
{PREbullet}	{<li>}
{POSTbullet}	{</li>
}
}



################################################################################
#
# OUTfmt - automatic decorations for ordinary text
#
# This list contains patterns and subspecs for regsub -all
# Each list element is in turn a triplet:
#   - regexp to find
#   - replacement spec
#   - comment describing what this array value is for (ignored when running).

set OUTfmt {
{
    {
SECTION[^
]*
}
    {
}
    {Obsolete keyword; ignore.}
}

{
    {
NOROUTINES[^
]*
}
    {
}
    {Keyword already processed by the time this is used; remove.}
}

{
    {\\<}
    {\&lt;}
    {Less-than character, escaped to display in HTML.}
}

{
    {\\>}
    {\&gt;}
    {Greater-than character, escaped to display in HTML.}
}

{
    {\\&}
    {\&amp;}
    {Ampersand character, escaped to display in HTML.}
}

{
    {\\reg}
    {\&reg;}
    {registered mark}
}

{
    {\\copy}
    {\&copy;}
    {copyright mark}
}

{
    {<([a-zA-Z0-9\\][^\>]*)>}
    {<i>\1</i>}
    {Italics, for example a text variable (metavar).  Must start at word
     boundaries. (Not end, because then consecutive ones separated by
     newline would be overlapping regexps.
     THIS SUBSTITUTION MUST COME BEFORE ANY INSERTION OF HTML TAGS! }
}

{
    {(^|[^\a-zA-Z0-9])`([^']+)'}
    {\1<b>\2</b>}
    {Bold, using paired quotes. Must start at word boundaries. (Not end, 
     because then consecutive ones separated by newline would be overlapping
     regexps.}
}

{
    {(^|[^\a-zA-Z0-9])'([^']+)'}
    {\1<b>\2</b>}
    {Bold, using repeated apostrophes.  Must start at word boundaries. (Not 
     end, because then consecutive ones separated by newline would be
     overlapping regexps.}
}

{
    {\\`}
    {`}
    {Single quote.  Depends on auto-bolding not allowing \ before quote.}
}

{
    {\\'}
    {'}
    {Single quote.  Depends on auto-bolding not allowing \ before quote.}
}

{
    {^([-A-Z0-9][-A-Z0-9 ,\\(\\)]*)[
:] *}
    {
</blockquote><h4>\1</h4><blockquote><p>
}
    {Heading, when at start of string. May end in newline or colon.  
     Discards whitespace after colon--may be trouble if indents used 
     after head ending w/newline?}
}

{
    {
([-0-9A-Z][-0-9A-Z ,\\(\\)]*)[
:] *}
    {
</blockquote><h4>\1</h4><blockquote><p>
}
    {Heading, other than start position.  Ends with newline or colon.
     Discards whitespace after colon--may be trouble if indents used 
     after head ending w/newline?}
}

{
    {\\sh[ ]+([^
]*)
}
    {</blockQuote><h4>\1</h4><blockQuote>
}
    {small heading}
}

{ 
    {([a-zA-Z_0-9]+Lib)(\.?([^.(/a-zA-Z_0-9]+|$))}
    {<b>\1</b>\2}
    {Library name, but not as part of a filename.}
}

{ 
    {([a-zA-Z0-9]+Show)(\.?([^.(/a-zA-Z_0-9]+|$))}
    {<b>\1</b>\2}
    {Show-library name; not as part of a filename, and distinct from rtn.}
}

{ 
    {([a-zA-Z0-9]+Drv)(\.?([^.(/a-zA-Z_0-9]+|$))}
    {<b>\1</b>\2}
    {Driver-library name; not as part of a filename, and distinct from rtn.}
}

{
    {([a-zA-Z0-9]+Sio)(\.?([^.(/a-zA-Z_0-9]+|$))}
    {<b>\1</b>\2}
    {I/O library name, but not as part of a filename.}
}

{
    {(if_[a-zA-Z0-9]+)(\.?([^.(/a-zA-Z_0-9]+|$))}
    {<b>\1</b>\2}
    {Network library name, but not as part of a filename.}
}

{
    {(<[^\n]*)\.(html|gif)([^a-zA-Z0-9][^\n]*>)}
    {\1Aa_Aa.\2Zz_Zz\3}
    {Guard against trying to bold filenames within HTML tags.}
}

{
    {(^|[^:_\./a-zA-Z0-9])([_\./a-zA-Z0-9]+\.([aocCsShH]|tcl|cc|html|gif|cpp|hpp|txt|java))(\.?[^\._/a-zA-Z0-9]|$)}
    {\1<b>\2</b>\4}
    {Make filename bold; recognized by suffix, be careful of URLs.}
}

{
    {Aa_Aa\.([a-zA-Z0-9]+)Zz_Zz([^a-zA-Z0-9])}
    {.\1\2}
    {Undo effect of guard above.}
}

{
    {((operator )?)([_a-zA-Z0-9\~:\.;]+)\(\)} 
    {<b>\1\3(\&nbsp;)</b>}
}

{
    {(^|[^\._A-Za-z0-9>])([_A-Za-z0-9]+_[_A-Za-z0-9]*)([^\.<_A-Za-z0-9]|\.[^A-Za-z0-9]|\.?$)} 
    {\1<b>\2</b>\3}
    {Bold constant name, recognized as all-caps name containing underbars.
     Exclusion of > < at boundaries avoids double-formatting if another
     rule already applied.}
}

{
    {(^|[^\._A-Za-z0-9>])([_A-Za-z0-9]+_[_A-Za-z0-9]*)([^\.<_A-Za-z0-9]|\.[^A-Za-z0-9]|\.?$)} 
    {\1<b>\2</b>\3}
    {Bold constant name. This must be done twice due to odd-even effect
     in lists.}
}

{
    {\$\{<b>WIND_BASE</b>\}}
    {<b>${WIND_BASE}</b>}
    {Correct problem of overlapping bold on ${WIND_BASE}.}
}

{
    {
[ 	]*
}
    {
<p>
}
    {Paragraph breaks in source are simply consecutive newlines.
     NOTE! Trailing \n in replacement text is required for interaction 
     with indent-at-start-of-line.}
}

{
    {\\tb ([^
]*)}
    {<i>\1</i>}
    {Title markup, italisize}
}

{
    {\\its}
    {<blockquote>}
    {indentation}
}

{
    {\\ite}
    {</blockquote>}
    {deindentation}
}

{
    {\\rl}
    {<hr>}
    {separation line}
}

{
    {\\ste}
    {<hr><h4>}
    {library routines description header}
}

{
    {\\sts}
    {</h4>}
    {end of library routines description header}
}

{
    {\\nl
}
    {<br>
}
    {new line mark}
}

{
    {
([ 	]+)}
    {<br>
\1}
    {Indent at start of line means to preserve linebreak.
     NOTE!  Trailing \n required for interaction with proc refSpacePreserve.}
}

{
    "\\\\\"\[^\n\]*\n"
    {}
    {In-doc comment, extends to end of line; remove from output.}
}

{
    {<p><br>}
    {<p>}
    {CLEANUP: if auto-formatting generated linebreak at start of para,
    start of para alone is enough.}
}

{
    {<p>
</tr>}
    {
</tr>}
    {CLEANUP: paragraph marks at end of a table row are meaningless.
     Kill them.}
}

{
    {<table>
</tr>}
    {<table>
}
    {CLEANUP: mark-list processing generates row-end at start of table.
     Kill it.}
}

{
    {<ul> *
</li>}
    {<ul>}
    {CLEANUP : remove the first bullet list element close markup}
}

{
    {<b><b>}
    {<b>}
    {CLEANUP : remove double bolded elements}
}

{
    {</b></b>}
    {</b>}
    {CLEANUP : remove double bolded elements end}
}
 
{
    {
<p>
</li>
}
    {</li>
}
    {CLEANUP : remove empty paragraphs at bullet list element end}
}

{
    {<p>
</ul>
}
    {</ul>
}
    {CLEANUP : remove empty paragraphs at bullet list end}
}

{
    {<li>[ \t]*
<p>}
    {<li>}
    {CLEANUP : remove bullet list first paragraph mark (needless) }
}
{
    {(\\\\)|\\/}
    {\\}
    {Backslash character, escape escaped.
    MUST BE LAST BACKSLASH SEQUENCE IN LIST.}
}

{
    "http://\(\[^ ',;<>\)\"\n\t\]+\)"
    {<a href="http://\1">http://\1</a>}
    {Replace an http address with its hyperlink}
}

}



################################################################################
#
# OUTfmtCode - automatic decorations for code
#
# This list contains patterns and subspecs for regsub -all
# Each list element is in turn a triplet:
#   - regexp to find
#   - replacement spec
#   - comment describing what this array value is for (ignored when running).

set OutCAt {
    {
	{(/@ [^@/]*)([@][ ])([^@/]*[@/])}
	{\1* \3}
	{Substitute C continuation-comment sequence for examples.
	 Comes first so that start and end embedded comment not yet
	 substituted.}
    }

    {
	{/@}
	{/*}
	{Substitute C start-comment sequence for examples.}
    }

    {
	{@/}
	{*/}
	{Substitute C end-comment sequence for examples.}
    }
}

set OUTfmtCode [concat $OutCAt {
    {
	{\\<}
	{\&lt;}
	{Less-than character, escaped to display in HTML.}
    }

    {
	{\\>}
	{\&gt;}
	{Greater-than character, escaped to display in HTML.}
    }

    {
	{\\&}
	{\&amp;}
	{Ampersand character, escaped to display in HTML.}
    }

    {
	{<([_a-zA-Z0-9]+)>}
	{<i>\1</i>}
	{Text variable (metavar).  Might as well allow in code.
         THIS SUBSTITUTION MUST PRECEDE ANY INSERTION OF HTML TAGS!}
    }

    {
	{(^|[^\a-zA-Z0-9])`([^']+)'}
	{\1<b>\2</b>}
	{Bold, using paired quotes. Must start at word boundaries. (Not end, 
	because then consecutive ones separated by newline would be overlapping
	regexps.}
    }

    {
	{(^|[^\a-zA-Z0-9])'([^']+)'}
	{\1<b>\2</b>}
	{Bold, using repeated apostrophes.  Must start at word boundaries. (Not 
	end, because then consecutive ones separated by newline would be
	overlapping regexps.}
    }

    {
	{\\`}
	{`}
	{Single quote.  Depends on auto-bolding not allowing \ before quote.}
    }

    {
	{\\'}
	{'}
	{Single quote.  Depends on auto-bolding not allowing \ before quote.}
    }

    {
	{(\\\\)|\\/}
	{\\}
	{Backslash character, escape escaped.
	MUST BE LAST BACKSLASH SEQUENCE IN LIST.}
    }

}]


################################################################################
#
# OUTfmtDis - replacements to disable all output formatting in a string
#
# This list contains patterns and subspecs for regsub -all
# Each list element is in turn a triplet:
#   - regexp to find
#   - replacement spec
#   - comment describing what this array value is for (ignored when running).

set OUTfmtDis {
    {
	{&}
	{\&amp;}
	{Ampersand character, escaped to display in HTML.
         NOTE! This replacement MUST come before those that insert "&"!}
    }

    {
	{<}
	{\&lt;}
	{Less-than character, escaped to display in HTML.}
    }

    {
	{>}
	{\&gt;}
	{Greater-than character, escaped to display in HTML.}
    }

}


################################################################################
#
# OUTlMk - markup related to establishing links
# 
# The array elements are simple strings, not regexps.
#
# The `*NmSt'/`*NmEn' pairs are used to recognize boundaries of linkable
# names, <not> to format those names in the first place.  Their prefixes
# permit recognizing language-specific formatting.
#
# The remaining elements are used to insert links.  `lnSt' marks the start
# of a link; `lnLab' marks the start of the label, or visible tag, for 
# the link; and `lnEnd' marks the end of the link.
#
# jdi - modified Asm, C, Cpp, and Java lines to remove italics

array set OUTlMk {
    {AsmSbNmSt} {<b>}
    {AsmSbNmEn} {(\&nbsp;)</b>}
    {CSbNmSt} {<b>}
    {CSbNmEn} {(\&nbsp;)</b>}
    {CppSbNmSt} {<b>}
    {CppSbNmEn} {(\&nbsp;)</b>}
    {IdlSbNmSt} {<b>}
    {IdlSbNmEn} {(\&nbsp;)</b>}
    {JavaSbNmSt} {<b>}
    {JavaSbNmEn} {(\&nbsp;)</b>}
    {PclSbNmSt} {<b>}
    {PclSbNmEn} {</b>}
    {TclSbNmSt} {<b>}
    {TclSbNmEn} {</b>}
    {CTclSbNmSt} {<b>}
    {CTclSbNmEn} {</b>}
    {LibSbNmSt} {<b>}
    {LibSbNmEn} {</b>}

    {AsmRxNmSt} {<b>}
    {AsmRxNmEn} {\(&nbsp;\)</b>}
    {CRxNmSt} {<b>}
    {CRxNmEn} {\(&nbsp;\)</b>}
    {CppRxNmSt} {<b>}
    {CppRxNmEn} {\(&nbsp;\)</b>}
    {IdlRxNmSt} {<b>}
    {IdlRxNmEn} {\(&nbsp;\)</b>}
    {JavaRxNmSt} {<b>}
    {JavaRxNmEn} {\(&nbsp;\)</b>}
    {PclRxNmSt} {<b>}
    {PclRxNmEn} {</b>}
    {TclRxNmSt} {<b>}
    {TclRxNmEn} {</b>}
    {CTclRxNmSt} {<b>}
    {CTclRxNmEn} {</b>}
    {LibRxNmSt} {<b>}
    {LibRxNmEn} {</b>}

    {lnSt}   {<a href="}
    {lnAnch} {#}
    {lnLab}  {">}
    {lnEnd}  {</a>}
}

################################################################################
#
# OUTlSelfLess - regsub arguments to remove self-references 
#
# Self-references inserted by the automatic linking support, in HTML
# output files, are fairly easily recognized: an <a href= ...> 
# separated by exactly one newline from a NAME heading.
#
# These replacements remove them.

set OUTlSelfLess "
    {
	{(\n</blockquote><h4>NAME </h4><blockquote>\n\[^\n]*)<a href=\[^>]*>(\[^\n]*)</a>}
	{\\1\\2}
	{Delete links to self.}
    }
"
