# htmlBook.tcl - html Book Index generator
#
# Copyright 1998 Wind River Systems, Inc.
#
# modification history
# --------------------
# 02b,17apr02,wsl  fix SPR 75646 - build all libIndex.htm files
# 02a,11feb02,wsl  add *.lib and *.rtn files to LIB and RTN files
# 01z,07feb02,wsl  change generated nav file extensions from .html to .htm
# 01y,07aug01,wsl  make banners nondenominational (no version numbers)
# 01x,01dec00,vcm  VxWorks AE --> VxWorks AE 1.0
# 01w,29nov00,vcm  Change title to Tornado 3.0 / VxWorks AE
# 01v,22nov00,vcm  change 3.0 to AE
# 01u,20nov00,vcm  new banner
# 01t,06nov00,vcm  fixes to books.html syntax, titles
# 01s,04oct00,dgp  change logo from t2 to t3 version
# 01r,08jun00,dgp  correct html cross-link markup
# 01q,29feb00,dgp  change ERROR reporting to Error to conform to build scripts,
#		   update screen titles to Tornado 3.0
# 01p,11mar99,wsl  revised file comment header
# 01o,04mar99,fle  made htmlBook able to link to generated indices when there
#                  is no chapter name
# 01n,03mar99,fle  added the -skip option
# 01m,26feb99,fle  doc : added end of list markup
# 01l,26feb99,fle  fixed several behaviour bugs
# 01k,22dec98,fle  fixed a bug with index title generation
# 01j,30nov98,p_m  Updated documentation
# 01i,25nov98,fle  made htmlBook call for windHelpInit to create INDEX and
#                  TREE data bases at installation time
#                  + made it generate the libIndex and rtnIndex html indexes
#                  + removed routines from index files : only keep libraries
# 01h,06nov98,fle  added the doc time update file mechanism
# 01g,16oct98,fle  made it not check if entries are already in entry list when
#                  updating data base
#                  + made it use an array storage as in windHelpTreeBuild
#                  + made it create index files in the entry upper dir
#                  + removed the [<category>] from indexes when only one
#                    category is present in list
# 01f,16oct98,fle  removed call to an absolute path for the image location
# 01e,15oct98,fle  added tornado image inside generated books files
# 01d,12oct98,fle  made htmlBook create the LIB and RTN database instead of
#                  only reading the existing ones
# 01c,06oct98,dbt  doc: fixed documentation.
# 01b,30sep98,fle  changed the way chapters files names are generated
# 01a,17sep98,fle  written
#

#
# DESCRIPTION
# This tool generates the hierarchy of HTML indexes for the HTML manuals
# within a directory tree.  The top-level index is called `books.htm'.
#
# `htmlBook' reads all linkage files generated by `refgen', by
# `htmlLink', or inserted manually, extracts all the book and chapter/section
# names, then creates the proper indexes.
#
# Each book has a single entry in the top-level index, which points to a
# book-level index.  If the book was not created by refgen, then it is possible
# to have this link point directly to the book's table of contents.  If the
# book was created by refgen, then there will be a book index, which will have
# chapter/section entries pointing to chapter/section indexes.  These
# chapter/section indexes then point to the specific entries in the reference
# manual.
#
# SYNOPSIS
#   htmlBook [-h] [-nonav] [-noupdate] [-skip <dirName>] [<dirList>]
#
# OPTIONS
# .iP -h 10 3
# Display a simple description of htmlBook.
# .iP -nonav
# Do not create the alphabetic navigation bar at the top of the
# chapter/section index.
# .iP -noupdate
# Do not generate new LIB.SUB and RTN.SUB files, just uses any existing ones.
# .iP "-skip <dirName>"
# Do not process the subdirectory <dirName>.  Create no links to or from it.
# If several directories are to be skipped, then the
# `-skip' option must be repeated for each of the directories to be skiped.
# .lE
#
# NON-REFERENCE DOCUMENTS
# In order to generate index links to HTML documents not generated by refgen,
# a LIB (linkage) file must be associated with the new document (in the same
# directory as the html index for the document). This file allows
# `htmlBook' to generate the appropriate index entries.
#
# This LIB file should contain a single linkage entry.  A linkage entry
# consists of a Tcl list with eight elements ( enclosed in curly braces)
# defined as follows:
#
# .iP Entry Name 10 3
# This field normally represents the name of library.  If you are creating
# a LIB file for an externally generated HTML document,
# this entry should be the name of the document.
# This field would normally appear in the chapter/section index, and if the
# <Category> field (see below) were not empty, the
# category name (between square brackets) would be appended to the entry name.
# For an externally generated HTML document, however, the <Chapter Name>
# field (see below) should be empty, and then this
# name will only be used internally.  The <Link> field (see below) will
# then be used for the top-level book index.
# .iP "Short Description"
# This is a short description of the entry that will appear in the
# chapter/section index, if present.
# .iP Pattern
# This field is used only by `htmlLink' to specify what pattern
# should be replaced with the text in the <Link> field (next field)
# in all HTML files.
# .iP Link
# This specifies the HTML text to be inserted, after the path is corrected,
# as the link for the entry.
# For an external document, this is usually a link to the table of contents
# of the book.  The path in this link should be relative to the LIB file, and
# should begin with a ./ so that it can
# be corrected for the actual location of the indexes.
# .iP "Book Name"
# For a reference entry, this field specifies the book the library 
# entry belongs to (for example, Tornado Reference or BSP Reference).
# This field would appear in the top-level index.  For an external document,
# this field is only used internally.
# .iP "Chapter/Section Name"
# This field specifies the chapter or section that the entry belongs in.
# In combination with the
# <Book Name> field, this allows two levels of indexes 
# (for example, VxWorks Reference Manual->ANSI Libraries).
# If there is no chapter
# name, the <Link> field will be used (after the path is corrected)
# in the top-level index.
# .iP Category
# This field makes it possible to distinguish help entries that have the
# same name, but
# belong to different libraries (for example, wtxToolAttach for C,
# Java or Tcl APIs).
# .iP File path
# This is used by `htmlLink' to generate the RTN.SUB and LIB.SUB files.
# The relative path of the LIB file containing this entry is stored in
# this field.
# If this field is empty, the LIB file is in the local directory.
# .lE
#
# EXAMPLE
# If the LIB file contains the following line (all on one line) :
# .CS
#   {HTMLWorks} {HTMLWorks user's guide} {<b>HTMLWorks</b>} 
#   {<b><a href="./guide.html">HTMLWorks</a></b>} {Tornado Optional Products}
#   {HTMLWorks} {} {}
# .CE
#
# Then the top-level HTML index (book.html) will contain a link named
# <Tornado Optional Products> to a book HTML index, and this book index
# will contain a link to a section named <HTMLWorks>.  If other LIB files
# have entries with <Tornado Optional Products> as their book name, the
# corresponding section names will be listed along with <HTMLWorks>.
#
# The <HTMLWorks> section index will then have links for all the LIB file
# entries that give <Tornado Optional Products> as their book name, and
# <HTMLWorks> as their section name.
#
# To make a direct link from the top-level index and the table of contents of
# an externally generated HTML document, just provide a LIB file with
# an ampty <chapter name> field. The following example
# will create a <Tornado user's guide> entry in the top-level
# (`book.html') index,
# and the link will go directly to <path>/tug/TUG.html, where :
#
# .iP path 10 2
# is the directory the LIB file is in,
# .iP tug 10 3
# comes from the <Path> field, and
# .iP TUG.html
# is extracted from the <Link> field
# .lE
#
# .CS
#   {Tornado user's guide} {The Tornado user's guide}
#   {<b>Tornado User's Guide</b>}
#   {<b><a href="./TUG.html">Tornado User's Guide</a></b>}
#   {Tornado user's guide} {} {} {tug}
# .CE
#
# Note that the above entry must be on a single line.
#
# FILES
# .iP updateDocTime 10 3
# This is an empty file that fixes the last doc update time. Such a file is
# generated in each directory in <dirList>.
# .iP books.html 
# The top-level HTML index, containing all books that `htmlBook' found.
# All other index file names are drived from the book or chapter/section
# names by replacing any non-alphanumeric characters with an underscore.
# .lE
# 
# RETURNS : N/A
#
# ERRORS: N/A
#
# FILES
#   WIND_BASE/docs/book.html
#
# SEE ALSO
#   `refgen', `windHelpLib', `htmlLink'
#
# NOROUTINES
#

################################################################################
#
# bookIndexGenerate - generate a book Index for the given book names
#
# This procedure takes <bookNameList> and generates an html index from those
# book names. The name of the generated file is the bookIndex.htm
#
# The `parentFile'  parameter (if given) should be composed of 2 elements :
# first is the parent file description (a string) and second, the parent file
# name.
#
# SYNOPSIS
#   bookIndexGenerate <bookNameList> [<inFile>]
#
# PARAMETERS
#   bookNameList : the list of book names to appear in html index
#   bookFileNameList : the list of book file names to link with the book names
#   inFile : the html destination file name (defaulted to bookIndex.htm)
#   bookTitle : specifies the title of the book
#   parentFile : specifies the parent file for quick link to it
#
# RETURNS:
# Returns the execution status. First element is OK or ERROR. And remaining
# elements are the error messages if status is ERROR.
#
# ERRORS:
# File creation error
#
# EXAMPLE
# .CS
#   bookIndexGenerate { {Tornado User's Guide} {Tornado API Guide} } \
#                     { {../TUG.html} {../TAPIG.html} } book.htm
#                     {Wind River help files} { {Master book} {../master.html}}
#   OK
# .CE
#

proc bookIndexGenerate { bookNameList bookFileNameList {inFile "bookIndex.htm"}
			   {bookTitle "Tornado Online Manuals"} 
			   {parentFile {} } } {

    set status {OK}
    set imageDir "images"
    set imageLocation "$imageDir/t2onlineDocBanner.jpg"

    if { [catch "open $inFile w" fileId] } {

	# error trying to open and write file <inFile>

	set status [lreplace $status 0 0 ERROR]
	lappend status $fileId
	return $status
    }

    # first initialize html file

    puts $fileId "<html>"
    puts $fileId "<!-- Tornado HTML doc index generator -->"
    puts $fileId "<head>\n<title>\n$bookTitle\n</title>\n</head>"
    puts $fileId "<body bgcolor=\"#FFFFFF\" text=\"#000000\">"

    # insert image to beautify file

    puts $fileId "<p align=\"left\">"
    puts $fileId "<table>"
    puts $fileId "<tr>"
    puts $fileId "    <td>"
    puts $fileId "\t<img alt=\"Wind River Systems, Inc.\" \
		  src=\"$imageLocation\" width=540 height=286>"
    puts $fileId "    </td>"
    puts $fileId "</tr>"
    puts $fileId "</table>\n</p>\n"
    puts $fileId "<hr>"

    # if the parentFile parameter has been specified, it is used to generate
    # a link to the parent file in a kind of quick navigation bar

    if { $parentFile != {} } {
	puts $fileId "<p align=right><font size=\"4\">"
	puts $fileId "<i><a href=\"[lindex $parentFile 1]\">[lindex \
							    $parentFile 0]\
		      </a><br></i>"
	puts $fileId "</font></p>"
    }

    # put the book content

    puts $fileId "<h1>$bookTitle</h1>"
    puts $fileId "<p></p>\n<p></p>"
    puts $fileId "<blockquote>"

    # create a dynamic link to all the books

    puts $fileId "<font size=\"5\">"
    set bookNum 0

    foreach book $bookNameList {
	set bookFileName [lindex $bookFileNameList $bookNum]
	puts $fileId "<p><i><a href=\"$bookFileName\">$book</a></i></p>"
	incr bookNum
    }
    puts $fileId "</font>"

    # end html file

    puts $fileId "</blockquote>"
    puts $fileId "</body>"
    puts $fileId "</html>"

    close $fileId

    # join the generated file names to the result for the user to know the
    # fileNames to generate chapters in

    return $status
}

################################################################################
#
# bookFileNameGet - gets a book file name according to its name
#
# This routine returns a valid file name according to the book / chapter name
# It is to replace unsupported file names characters by valid ones. For instance
# it replaces all the tabs, line feed, carriage returns and other unsupported
# characters by "_" (underscore) characters.
#
# SYNOPSIS
#   bookFileNameGet <bookName>
#
# PARAMETERS
#   bookName : the name of the book to transform to a file name
#
# RETURNS: The valid file name translation of <bookName>
#
# ERRORS: N/A
#
# EXAMPLE:
# .CS
#   bookFileNameGet {Tornado User's Guide (WINDOWS)}
#   Tornado_User_s_Guide__WINDOWS_
# .CE
#

proc bookFileNameGet { bookName } {

    regsub -all "\[ \t\n\'\";,\\*\\(\\)\]" $bookName "_" bookFileName
    return $bookFileName
}

################################################################################
#
# htmlLocalIndexCreate - creates html indexes to the local directory
#
# This procedure gets all the local directory help entries through the
# local LIB, LIB.SUB, RTN, and RTN.SUB files. It then generates two html
# indexes. One is for the libraries, one for the routines.
#
# <libTitle> is the heading title of the library index. If not provided, the
# book name, and the chapter name of the first element is used
#
# <rtnTitle> specifies the heading title for the routines index file. It takes
# <rtnTitle> and adds " : Routines" to it. If not provided, the chapter name of
# the first element in list, followed by " : Routines" is used.
#
# FILES
# This routine generates the libIndex.htm file from entries got from LIB files,
# and the rtnIndex.htm file from entries got from RTN files.
# 
# SYNOPSIS
#   htmlLocalIndexCreate [<libTitle>] [<rtnTitle>]
#
# PARAMETERS:
#   libTitle : the library index title
#   rtnTitle : the routine index title
#
# ERRORS: N/A
#

proc htmlLocalIndexCreate { {libTitle ""} {rtnTitle ""} } {

    global htmlRoutineIndex
    global htmlLibraryIndex

    set libEntryListIndex {}

    # get the local LIB entries to get the current book and file name for
    # index title

    set libList [glob -nocomplain *.lib LIB]
    if { [llength $libList] > 0} {
	set libEntryList [entryListInFileGet $libList]
    } else {
	set libEntryList [entryListInFileGet "LIB.SUB"]
    }

    # for the libraries / tools indexes, put the name of the book then
    # the name of the chapter as the file title

    set oneEntry [lindex $libEntryList 0]
    set bookName [lindex $oneEntry 4]
    set chapterName [lindex $oneEntry 5]

    if { $libTitle == "" } {
	set libTitle "$bookName : $chapterName"
    } else {
	set libTitle "$libTitle : Libraries"
    }

    # we now have the index title for LIB index. Get the complete list of
    # LIB entries (by getting both LIB and RTN entries)

    set libEntryList [entryListInFileGet [glob -nocomplain *.lib "LIB.SUB" LIB]]

    if { $libEntryList != {} } {
	lappend libEntryListIndex [list $libEntryList $libTitle {} 1]
	htmlIndexCreate $libEntryListIndex  "$htmlLibraryIndex"
    }

    # gather information for routines index

    set rtnEntryListIndex {}

    set rtnList [glob -nocomplain *.rtn RTN]
    if { [llength $rtnList] > 0} {
	set libEntryList [entryListInFileGet $rtnList]
    } else {
	set libEntryList [entryListInFileGet "RTN.SUB"]
    }

    if { $rtnTitle == "" } {
	set rtnTitle "$chapterName : Routines"
    } else {
	set rtnTitle "$rtnTitle : Routines"
    }

    # routines title has been set up, let's gather all the RTN entries now

    set rtnEntryList [entryListInFileGet [glob -nocomplain "RTN.SUB" RTN *.rtn]]

    if { $rtnEntryList != {} } {
	lappend rtnEntryListIndex [list $rtnEntryList $rtnTitle {} 1]
	htmlIndexCreate $rtnEntryListIndex "$htmlRoutineIndex"
    }
}

################################################################################
#
# htmlBook - generates the html indexes
#
# This routine is the htmlBook utility main routine. It gets the help entries
# from all the LIB, RTN files from the sub directories.
#
# For each book of those entries, an index of the chapters is generated, then
# for each chapter, an index of all the routines and libraries it contains
#
# SYNOPSIS
#   htmlBook [<navbar> [<update> [<dirList> [<skipList>]]]]
#
# PARAMETERS
#   navbar : set to one if navbar is to be created in index, 0 else
#   update : do we have to update the data base or just regenerate html files
#   dirList : the list of directroies in which to generate indexes
#   skipList : list of directories to skip
#
# RETURNS: N/A
#
# ERRORS: N/A
#

proc htmlBook { {navbar 1} {update 1} {dirList "."} {skipList {}} } {

    set treeDepth {}

    foreach dirName $dirList {

	cd $dirName			;# go to specified directory

	if { $update } {

	    set depthMax 0			;# doc tree max depth
	    set docTree {}
	    set tmpDocTree [treeGet]		;# get the doc tree

	    # first of all, remove the directories (recursively) specified in
	    # the skipList

	    foreach dirName $tmpDocTree {

		set skipIt 0

		foreach skipDir $skipList {
		    set splitSkipDir [file split $skipDir]
		    set splitDirName [lrange [file split $dirName] 0 \
					     [expr [llength $splitSkipDir] - 1]]

		    if { $splitDirName == $splitSkipDir } {
			set skipIt 1
		    }
		}

		if { (! $skipIt) && ($dirName != {}) } {
		    lappend docTree $dirName
		}
	    }

	    # associate each tree element with its depth in order to be sorted
	    # by tree depth later

	    foreach subDir $docTree {

		set depth [llength [file split $subDir]]
		if { $depth > $depthMax } {
		    set depthMax $depth
		}

		lappend treeDepth "$subDir $depth"
	    }

	    # sort tree in term of depth

	    set treeDepth [lsort -integer -decreasing -index 1 $treeDepth]

	    # now update the entry files for all the directories

	    set baseDir [pwd]

	    foreach dirDesc $treeDepth {
		cd [lindex $dirDesc 0]
		subEntriesFileCreate -add "LIB" ;# includes *.lib files
		subEntriesFileCreate -add "RTN" ;# includes *.rtn files

		# now create the libraries / routines indexes

		htmlLocalIndexCreate
		cd $baseDir
	    }

	    # create all the sub directories ebtry files : take all entries
	    # from the one level sub directories and save them in <fileName>.SUB

	    subEntriesFileCreate -add "LIB" ;# includes *.lib files
	    subEntriesFileCreate -add "RTN" ;# includes *.rtn files
	    htmlLocalIndexCreate {Tornado Online Manuals} \
				 {Tornado Online Manuals}
	}

	set helpEntryList [entryListInFileGet \
		[glob -nocomplain LIB RTN "RTN.SUB" "LIB.SUB" *.lib *.rtn]]

	# all the available help entries are in the helpEntryList list
	# from that list three kinds of index files should be generated
	#   - a book index refering to chapters indexes
	#   - a chapter index refering to elements indexes
	#   - an elements index accessing to elements

	array set bookArray {}		;# array of book names
	array set chapterArray {}	;# array of chapter names
	set bookList {}			;# list of book names
	set bookFileNameList {}		;# list of book file names
	set bookEntryList {}		;# list of entries that contain new book

	# sort entries between books / chapters / entries

	foreach entry $helpEntryList {

	    # get the required values from help entry  : name, book, chapter
	    # category

	    set entryName [lindex $entry 0]
	    set bookName [lindex $entry 4]
	    set chapterName [lindex $entry 5]

	    # check if book is already in list

	    if { [lsearch $bookList $bookName] == -1} {
		lappend bookList $bookName
		lappend bookEntryList $entry
		set bookArray($bookName) {}
	    }

	    # check if chapter is already in book list

	    if { $chapterName != {} } {
		set chapterList [lindex [array get bookArray $bookName] 1]
		if { [lsearch $chapterList $chapterName] == -1 } {
		    lappend bookArray($bookName) $chapterName
		    set chapterArray($chapterName) {}
		}
	    }

	    lappend chapterArray($chapterName) $entry
	}

	# now create the html indexes files according to book and chapters
	# arrays

	set bookList [lsort $bookList]
	set bookTree {}

	# get all LIB entries form LIB and LIB.SUB. This will allow to separate
	# all entries in two list : the list of libaries, and the list of
	# routines.

	set libEntries [entryListInFileGet \
	        [glob -nocomplain LIB "LIB.SUB" *.lib]]

	foreach book $bookList {

	    # initialize local list to be updated in loop

	    set chapterList [lsort [lindex [array get bookArray $book] 1]]
	    set chapterFileNameList {}

	    # get the entry that brought this book back from the bookEntryList

	    foreach bookEntry $bookEntryList {

		if { $book == [lindex $bookEntry 4] } {

		    # OK, this is the help entry that brought this book in the
		    # book list. Let's see if it has a chapter name

		    if { [lindex $bookEntry 5] == {} } {

			# there is no chapter name, this means that the file
			# name specified in the link section of the help entry

			regsub "(.*href\[ \t]*=\[ \t]*\")(\[^\"]*)(\".*)" \
			       [lindex $bookEntry 3] "\\2" bookFileName

			# get rid of eventual anchors

			set bookFileName [lindex [split $bookFileName "#"] 0]

		    } else {

			# there is a chapter name, let's take its name and
			# convert it to a file name

			set bookFileName "[bookFileNameGet $book].htm"
		    }

		    # we now can leave the loop

		    lappend bookFileNameList $bookFileName
		    break
		}
	    }

	    # for each chapter, separate entries from LIB and RTN files. Then
	    # generate the index by calling the htmlIndexCreate procedure

	    foreach chapter $chapterList {

		set chapterEntryList [lsort [lindex [array get chapterArray \
							       $chapter] \
						    1]]

		# separate entries of the RTN files from entries of LIB files

		set chapterLibEntryList {}
		set chapterRtnEntryList {}

		# the chapter index file has to be saved in the upper directory
		# of the entries that belong to that chapter.
		# For example, if the entries are in the docs/tornado-api/wtxtcl
		# then the chapter index file will be in the docs/tornado-api
		# diretory. For that we assume that all entries for a same
		# chapter are in the same directory.

		set entryLocation [lindex [lindex $chapterEntryList 0] end]
		set chapterFileLocation [file dirname $entryLocation]

		# also get the entry upper directory to update help entries
		# according to it

		set chapterFileDir [file tail $entryLocation]
		if { $chapterFileLocation == "." } {
		    set chapterFileDepth 0
		} else {
		    set chapterFileDepth [llength [file split \
							$chapterFileLocation]]
		}

		# set the chapter file name,in the upper directory of the
		# help entry

		set chapterFileName "[bookFileNameGet $chapter].htm"
		set chapterFileName "./$chapterFileLocation/$chapterFileName"
		lappend chapterFileNameList $chapterFileName

		foreach chapterEntry $chapterEntryList {

		    set libEntryNum [lsearch $libEntries $chapterEntry]

		    # as the index file is gonna be placed in the entry upper
		    # directory, the <chapterEntry> link is not right anymore
		    # cause it comes from current directory.
		    # For example, the help for windsh is 
		    # tornado/tools/windsh.html from current directory, but in
		    # the chapter html index, it should be tools/windsh.html
		    # use the entryLinkUpdate facility to solve that

		    set entryLink [lindex $chapterEntry 3]
		    set updatedLink [entryLinkUpdate $entryLink $chapterFileDir]
		    set chapterEntry [lreplace $chapterEntry 3 3 $updatedLink]

		    if { $libEntryNum != -1 } {
			lappend chapterLibEntryList $chapterEntry
		    } else {
			lappend chapterRtnEntryList $chapterEntry
		    }
		}

		# we now have the lib entries in the <chapterLibEntryList> 
		# variable, and the routines entries in the
		# <chapterRtnEntryList> variable. Initialize the parameters we
		# will send to the `htmlIndexCreate' routine

		set libParentBookName $bookFileName
		for {set ix 0} {$ix < $chapterFileDepth} {incr ix} {
		    set libParentBookName "../$libParentBookName"
		}
		set libParentFile [list $book $libParentBookName]

		set chapterObjList {}
		if { $chapterLibEntryList != {} } {
		    lappend chapterObjList [list $chapterLibEntryList \
						 $chapter $libParentFile 1]
		}

		htmlIndexCreate $chapterObjList $chapterFileName
	    }

	    # generate index file for all chapters of current book. The parent
	    # file is the above generated "books.html" file.

	    if { $chapterList != {} } {
		set status [bookIndexGenerate $chapterList $chapterFileNameList\
					      $bookFileName $book \
					      { {Tornado Online Manuals}\
						 books.html}]

		#take care of errors

		if { [lindex $status 0] != "OK" } {
		    puts stdout "*** htmlBook Error ***"
		    puts stdout "In bookIndexGenerate chapterList : "
		    puts stdout "[lrange $status 1 end]"
		}
	    }

	}

	# generate the books.html file from the book list

	set status [bookIndexGenerate $bookList $bookFileNameList books.html \
				      "Tornado Online Manuals" \
				      {} ]

	# take care of possible errors

	if { [lindex $status 0] != "OK" } {
	    puts stdout "*** htmlBook Error ***"
	    puts stdout "[lrange $status 1 end]"
	}

	# now create the update doc time file. We assume that if htmlBook has
	# been run, it means that the doc has been updated.

	windHelpIndexClean
	windHelpTreeClean
	windHelpInit
	set fileId [open updateDocTime w]
	close $fileId
    }
}

################################################################################
#
# htmlBookCommandeParse - parses the htmlBook commande line
#
# This routine just parses the commande line and sets global variables
# according to it.
#
# SYNOPSIS
#   htmlBookCommandeParse <argv> <argc>
#
# PARAMETERS
#   argv : the commande line arguments vector
#   argc : the commande line arguments counter
#
# RETURNS: N/A
#
# ERRORS: N/A
#

proc htmlBookCommandeParse { argv argc } {

    # global variables

    global htmlBookDirList		;# directory name to create indexes in
    global htmlBookNavbar		;# do we create a navbar in index file
    global htmlBookUpdate		;# do we use local LIB / RTN files
    global htmlBookDirSkipList		;# list of directories to skip

    for {set ix 0} {$ix < $argc} {incr ix} {
	switch -- [lindex $argv $ix] {

	    "-h" {
		htmlBookUsage ""
	    }

	    "-nonav" {
		set htmlBookNavbar 0
	    }

	    "-noupdate" {
		set htmlBookUpdate 0
	    }

	    "-skip" {
		incr ix
		lappend htmlBookDirSkipList [lindex $argv $ix]
	    }

	    default {
		set dirName [lindex $argv $ix]
		if { [file isdirectory $dirName] } {
		    lappend htmlBookDirList $dirName
		} else {
		    set errMsg "*** htmlBook Error ***\n"
		    append errMsg "\nUnkown directory or option $dirName"
		    htmlBookUsage $errMsg
		}
	    }
	}
    }
}

################################################################################
#
# htmlBookUsage - displays htmlBook usage message
#
# This procedure display the htmlBook help message
#
# SYNOIPSIS
#   htmlBookUsage <msg>
#
# PARAMETERS:
#   msg : the message to display previously to the help message
#
# ERRORS: N/A
#

proc htmlBookUsage { msg } {

    puts stdout "\n$msg\n"
    puts stdout "\nhtmlBook - html Indexes generator\n"
    puts stdout "\thtmlBook \[-h] \[-nonav] \[-skip <dirName] \[<dirList>]\n"
    puts stdout "where :\n"
    puts stdout "\t-h\t\t: displays this help message"
    puts stdout "\t-nonav\t\t: doesn't create the indexed navbar in the index"
    puts stdout "\t\t\t  file"
    puts stdout "\t-skip <dirName>\t: skip the <dirName> directory"
    puts stdout "\t<dirList>\t: the list of directories to generate indexes in"
    puts stdout "\t\t\t  (default = .)"
    exit
}

#
# main - htmlBook main entry
#

# source the needed Tcl libraries

source "[wtxPath host resource doctools]fileLib.tcl"
source "[wtxPath host resource doctools]helpEntryLib.tcl"
source "[wtxPath host resource doctools]htmlLib.tcl"
source "[wtxPath host resource doctools]windHelpLib.tcl"

# global variables

global htmlBookDirList		;# directory name to create indexes in
global htmlBookNavbar		;# do we create a navbar in index file
global htmlBookUpdate		;# do we use local LIB / RTN files
global htmlBookDirSkipList	;# list of directories to skip
global htmlRoutineIndex         ;# file name for cumulative routine index
global htmlLibraryIndex         ;# file name for cumulative library index

# global variables setting

set htmlBookDirList	{}
set htmlBookNavbar	1
set htmlBookUpdate	1
set htmlBookDirSkipList	{}
set htmlRoutineIndex    "rtnIndex.htm"
set htmlLibraryIndex    "libIndex.htm"

# parse the commande line

htmlBookCommandeParse $argv $argc
if { $htmlBookDirList == {} } {
    set htmlBookDirList "."
}

# call for the htmlBook generator

htmlBook $htmlBookNavbar $htmlBookUpdate $htmlBookDirList $htmlBookDirSkipList
