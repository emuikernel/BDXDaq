/* vxreg32.cpp - DCOM registration utillity for VxDCOM */

/* Copyright (c) 1998-1999 Wind River Systems, Inc. */

/*
modification history
--------------------
01a,09Aug00,nel  Written (cribbed from TypeLib reader)

*/

/*
  DESCRIPTION:

    Command line utillity to register a VxDCOM control on 
    an NT client.

    To register the control the files <ProjectName>.tlb and 
    <ProjectName>.rgs must be present in the same directory.
    The project basename is supplied to the utility and it 
    registers the interface.

    e.g.
        If the project basename is CoMathDemo then typing

        vxreg32 CoMathDemo

        in the directory containing both the files
        CoMathDemo.rgs and CoMathDemo.tlb will register 
        the CoClass.

    CoMathDemo.tlb is generated by midl, whilst CoMathDemo.rgs 
    is generated by the COM Wizard.

NOMANUAL
*/

#include <iostream.h>
#include <stdio.h>
#include <atlbase.h>
#include <comdef.h>
#include <atlimpl.cpp>

/**************************************************************************
*
* RegisterTLBFile - Register the interfaces contained in the TLB file
*
* This function is used to register the CoClass interfaces contained in
* the TLB file created by midl.
*
* RETURNS: S_OK, or and error code if the TLB can't be registered.
*
* NOMANUAL
*/

HRESULT RegisterTLBFile
    (
    const char*     pszFileName
    )
    {
    HRESULT         hr = S_OK;
    ITypeLib*       pTLB;
    _bstr_t        bsFileName (pszFileName);

    bsFileName += ".tlb";

    hr = LoadTypeLibEx (bsFileName, REGKIND_REGISTER, &pTLB);

    if (FAILED (hr))
        {
        cerr << "ERROR: file " << bsFileName << " could not be registered, " <<
            "HRESULT=0x" << cerr.width (8) << hex << hr << "\n";
        return hr;
        }

    pTLB->Release ();
    return S_OK;
    }


/**************************************************************************
*
* RegisterRGSFile - Register the CoClass contained in an RGS file.
*
* This function is used to register the CoClass contained in
* the RGS file created by the COM Wizard.
*
* RETURNS: S_OK, or and error code if the RGS can't be registered.
*
* NOMANUAL
*/

int RegisterRGSFile
    (
    const char*         pszFileName
    )
    {
    IRegistrar*         pRegistrar;
    HRESULT             hr = S_OK;
    _bstr_t             bsFileName (pszFileName);

    bsFileName += ".rgs";

    hr = CoCreateInstance (CLSID_Registrar,
                           NULL,
                           CLSCTX_INPROC_SERVER,
                           IID_IRegistrar,
                           (void**) &pRegistrar);
    if (FAILED (hr))
        {
        cerr << "ERROR (HRESULT=0x" << cerr.width (8) << hex << hr << ") : " <<
                "the Registrar could not be created.\n" << 
                "Please ensure that ATL.DLL is registered on this system.\n";
        return E_FAIL;
        }

    hr = pRegistrar->FileRegister (bsFileName);
    pRegistrar->Release ();
    
    if (FAILED (hr))
        {
        cerr << "ERROR: file " << bsFileName << " could not be registered" <<
                ", HRESULT=0x" << cerr.width (8) << hex << hr << "\n";
        return hr;
        }

    return S_OK;
    }

void main (int argc, char * argv [])
    {
    if (argc < 2)
        {
        cout << "Usage: " << argv [0] << " <Project Name>\n";
        }
    else
        {
        CoInitialize (NULL);
 
        if (RegisterTLBFile (argv [1]) == S_OK)
            {
            RegisterRGSFile (argv [1]);
            }
        }
    }
