#!/usr/bin/perl

#  ipc_process_monitor

#  checks for ipc processes using ipc_testmon and ipc process list
#  if process is managed by ipc_process_manager delays setting alarm


#  options
#    -p to specify ipc process list
#    -s to specify sleep time between repeats
#    -wf window_freq to set window frequency
#    -m mail_freq to set mail frequency
#    -c cmlog_freq to set cmlog frequency
#    -debug to just dump error to stdout, no alarm

#      if sleep_time>0, sleeps and checks continuosly (sleep_time in sec)
#         otherwise makes one pass through proc_list and exits

#      dbm file name formed from process list file name unless overridden on command line


#  flag in process list:
#    xxx1       use cmlog
#    xx1x       send mail
#    x1xx       use alarm_window
#    1xxx       delay alarm, managed by ipc_process_manager

#  code:
#     alarm system code


#  still to do:


#  ejw, 15-nov-98 based on process_monitor


#  import env variable module, use integer arithmetic
use Env;
use integer;


#  Perl code:
#  ----------


# defaults
$project="clastest";
$proc_list    = "$CLON_PARMS/processes/ipc_critical_processes.cfg";
$sleep_time   = 0;
$cmlog_freq   = 0;     # hours
$mail_freq    = 24;    # hours
$window_freq  = 3;     # hours
$wait_time    = 30;    # seconds
$delay        = 600;   # seconds
$debug        = 0;

$host = `uname -n`;
$log_file     = "$CLON_LOG/processes/ipc_procmon_" . substr($host,4,2) .".txt";


# decode command line args
$line=join(" ",@ARGV);
if($line =~ s/-h//i){die "\n usage:\n   ipc_process_monitor [-a project] [-p proc_list] [-s sleep_time] [-w wait_time]\n".
			 "                       [-c cmlog_freq] [-m mail_freq] [-wf window_freq] [-delay delay] [-debug] \n\n";};
($project      =   $1) if ($line =~ s/-a\s*(\S*)//i);
($proc_list    =   $1) if ($line =~ s/-p\s*(\S*)//i);
($log_file     =   $1) if ($line =~ s/-l\s*(\S*)//i);
($sleep_time   =   $1) if ($line =~ s/-s\s*(\S*)//i);
($window_freq  =   $1) if ($line =~ s/-wf\s*(\S*)//i);
($mail_freq    =   $1) if ($line =~ s/-m\s*(\S*)//i);
($cmlog_freq   =   $1) if ($line =~ s/-c\s*(\S*)//i);
($wait_time    =   $1) if ($line =~ s/-w\s*(\S*)//i);
($delay        =   $1) if ($line =~ s/-delay\s*(\S*)//i);
($debug        =    1) if ($line =~ s/-debug\s*(\S*)//i);


# dbm file name
($dbm_name)=($proc_list=~/^\S*\/(\S*)\.\S*$/);
$dbm_file    = "$CLON_PARMS/processes/".$dbm_name;
($dbm_file   =   $1) if ($line =~ s/-dbm\s*(\S*)//i);


#  open text file
open(LOGFILE,">$log_file");
$date=`date`;
print LOGFILE "Run at $date\n";


#  get list of running ipc processes via status poll request
$ipc_result=`ipc_testmon -brief -once -a $project -w $wait_time`;


#  open dbm file (time of last mail message and last window displayed, etc.)
dbmopen(%dbmarray,$dbm_file,0664);


#  infinite loop over process list
while(1==1) {
    
    $now=time;

# loop over processess listed in file, generate warning if any missing
    if(!open(FILE,$proc_list)){die "\n?Unable to open $proc_list\n\n";}
    foreach $line (<FILE>) {

#  skip comments and blank lines    
	if($line=~/^\s*\#/){next;}
	if($line=~/^\s*$/){next;}
	
#  extract parameters
	@temp=split(/\s+/,$line);
	$proc=shift(@temp);
	$flag=shift(@temp);
	$addr=shift(@temp);
	$window=shift(@temp);
	$facility=shift(@temp);
	$class=shift(@temp);
	$severity=shift(@temp);
	$status=shift(@temp);
	$code=shift(@temp);
	$errortxt=join(" ",@temp);


#  search for process in status poll result
	$found_it=0;
	foreach $line (split("\n",$ipc_result)){
	    if($line=~/\b$proc\b/){
		$found_it=1;
		last;
	    }
	}
	

#  process missing ---------------------------------------------
	if($found_it==0) {
	    $text="$errortxt:  $proc did not respond to status poll request";
	    print LOGFILE "$class, $code:  $text\n";
	    $last_ok=$dbmarray{"ok\_$proc\_$flag"};
	    $last_status=$dbmarray{"status\_$proc\_$flag"};
	    $last_cmlogerr=$dbmarray{"cmlogerr\_$proc\_$flag"};
	    if($debug!=0) {
		warn "error_msg: procmon $facility $proc $class $severity $status ".
		    "$code \"$text\"\n";

	    } elsif (((($flag/1000)%10)==0)||(($now-$last_ok)>=$delay)) {

		if(($flag%10)!=0) {         # alarm system
		    if(($severity!=$last_status)||(($now-$last_cmlogerr)>=($cmlog_freq*3600-120))) {
			$dbmarray{"status\_$proc\_$flag"}=$severity;
			$dbmarray{"cmlogerr\_$proc\_$flag"}=$now;
			system("error_msg procmon $facility \"$proc\" $class ".
			       "$severity $status $code \"$text\"");
		    }
		}
		
		if((($flag/10)%10)!=0) {    # mail
		    $last_mail=$dbmarray{"mail\_$proc\_$flag"};
		    if(($now-$last_mail)>=($mail_freq*3600-120)){
			$dbmarray{"mail\_$proc\_$flag"}=$now;
			system("echo \"$text\" | mailx -s \"Process monitor:  missing process: ".
			       "$proc\" $addr");
		    }
		}

		if((($flag/100)%10)!=0) {   # alarm window 
		    $last_window=$dbmarray{"window\_$proc\_$flag"};
		    if(($now-$last_window)>=($window_freq*3600-120)){
			$dbmarray{"window\_$proc\_$flag"}=$now;
			$text1=$text;  $text1=~s#\(#\\\(#;   $text1=~s#\)#\\\)#;
			$text2=uc($text1);
			system("/bin/csh -c \"setenv DISPLAY $window; alarm_window ".
			       "-w $window $text2 >& /dev/null &;\"");
		    }
		}

	    }


#  process running ---------------------------------------------
	} else {
	    $text="$proc responded to status poll request";
	    print LOGFILE "$class, $code:  $text\n";
	    $last_status=$dbmarray{"status\_$proc\_$flag"};
	    $last_cmlogok=$dbmarray{"cmlogok\_$proc\_$flag"};
	    if( ($facility eq "clonalarm") && ($code>0) &&
	       (($last_status!=0)||(($now-$last_cmlogok)>=($cmlog_freq*3600-120))) ) {
		if($debug!=0) {
		    warn "class $class, code $code, proc $proc state reset\n";
		} else {
		    system("error_msg procmon $facility \"$proc\" ".
			   "$class 0 INFO $code \"$text\"");
		    $dbmarray{"cmlogok\_$proc\_$flag"}=$now;
		}
	    }
	    if($debug==0) {
		$dbmarray{"ok\_$proc\_$flag"}=$now;       # set last ok time
		$dbmarray{"mail\_$proc\_$flag"}=0;        # reset mail time stamp
		$dbmarray{"window\_$proc\_$flag"}=0;      # reset window time stamp
		$dbmarray{"status\_$proc\_$flag"}=0;      # reset alarm status
	    }
	}

	
    }  # line in file


#  close file
    close(FILE);


# reset hash so new "ps" commands are executed after sleep
    foreach $key (keys %last_ps_result) {
	delete $last_ps_result{$key};
    }     


#  sleep and repeat if sleep_time set, otherwise done
    if($sleep_time>0){
	sleep($sleep_time);
    } else {    
	last;
    }

}


#  done
dbmclose(%dbmarray);
close(LOGFILE);
